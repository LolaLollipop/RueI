{
  "README.html": {
    "href": "README.html",
    "title": "RueI | RueI",
    "keywords": "RueI RueI is a hint framework for scp:sl docs are available here. Features support for displaying multiple hints at once without them interfering with eachother cross-plugin compatibility custom tags and other utility scheduler system, which makes dealing with the hint ratelimit easier RueI is not a grid-based or line-based system, it calculates the offset necessary to put a hint at the same position no matter what"
  },
  "api/RueI.AsScreen-2.html": {
    "href": "api/RueI.AsScreen-2.html",
    "title": "Class AsScreen<TEnum, TWrapper> | RueI",
    "keywords": "Class AsScreen<TEnum, TWrapper> Namespace RueI Assembly RueI.dll Provides a wrapper that enables screen functionality for elements that do not normally support. public class AsScreen<TEnum, TWrapper> : IScreenElement<TEnum>, IElement where TEnum : Enum where TWrapper : IElement Type Parameters TEnum The class of the enum. TWrapper The element to wrap around. Inheritance object AsScreen<TEnum, TWrapper> Implements IScreenElement<TEnum> IElement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(IElement) Constructors AsScreen(TEnum, TWrapper) Initializes a new instance of the AsScreen<TEnum, TWrapper> class. public AsScreen(TEnum screens, TWrapper inner) Parameters screens TEnum The screens that this element is visible on. inner TWrapper The element to wrap around. Properties Enabled Gets or sets a value indicating whether or not this element is enabled and will show. public bool Enabled { get; set; } Property Value bool Inner Gets the element that this is wrapping around. public TWrapper Inner { get; } Property Value TWrapper ParsedData Gets the data used for parsing. public ParsedData ParsedData { get; } Property Value ParsedData Position Gets or sets the position of the element on a scale from 0-1000, where 0 represents the bottom of the screen and 1000 represents the top. public float Position { get; set; } Property Value float Screens Gets or sets the screens that this should display on. public TEnum Screens { get; set; } Property Value TEnum ZIndex Gets or sets the priority of the hint (determining if it shows above another hint). public int ZIndex { get; set; } Property Value int"
  },
  "api/RueI.Constants.html": {
    "href": "api/RueI.Constants.html",
    "title": "Class Constants | RueI",
    "keywords": "Class Constants Namespace RueI Assembly RueI.dll Provides a variety of constant values. public static class Constants Inheritance object Constants Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields BOLDINCREASE Gets the pixel amount applied to turn something into a pixel. public const float BOLDINCREASE = 1.1746577 Field Value float CAPSTOSMALLCAPS Gets the multiplier used to convert the size of a capital character to a smallcaps character. public const float CAPSTOSMALLCAPS = 0.8 Field Value float DEFAULTCOLOR Gets the default color for hints. public const string DEFAULTCOLOR = \"#FFF\" Field Value string DEFAULTHEIGHT Gets the default height if a line-height is not provided. public const float DEFAULTHEIGHT = 40.665 Field Value float Remarks Approximate. DEFAULTSIZE Gets the default size (in pixels) if a size is not provided. public const float DEFAULTSIZE = 34.7 Field Value float Remarks Not approximate. DISPLAYAREAWIDTH Gets the width of the display area (in pixels). public const float DISPLAYAREAWIDTH = 1200 Field Value float EMSTOPIXELS Gets an approximation of how many pixels are an in an em. public const float EMSTOPIXELS = 34.7 Field Value float MAXTAGNAMESIZE Gets the maximum name size allowed for a tag. public const int MAXTAGNAMESIZE = 13 Field Value int TAGCLOSER Gets a string used to close all tags. public const string TAGCLOSER = \"</noparse></align></color></b></i></cspace></line-height></line-indent></link></lowercase></uppercase></smallcaps></margin></mark></mspace></pos></size></s></u></voffset></width>\" Field Value string Properties CharacterLengths Gets a ReadOnlyDictionary<char, float> of character sizes. public static ReadOnlyDictionary<char, float> CharacterLengths { get; } Property Value ReadOnlyDictionary<char, float> Colors public static ReadOnlyCollection<string> Colors { get; } Property Value ReadOnlyCollection<string> DefaultParser public static Parser DefaultParser { get; } Property Value Parser HintRateLimit Gets the ratelimit used for displaying hints. public static TimeSpan HintRateLimit { get; } Property Value TimeSpan OldCharacterLengths Gets a ReadOnlyDictionary<char, float> of character sizes. public static ReadOnlyDictionary<char, float> OldCharacterLengths { get; } Property Value ReadOnlyDictionary<char, float> Parser Gets the parser used by all elements. public static Parser Parser { get; } Property Value Parser ValidColorSizes Gets a list of allowed sizes of color param tags, ignoring the hashtag. public static ReadOnlyCollection<int> ValidColorSizes { get; } Property Value ReadOnlyCollection<int>"
  },
  "api/RueI.Delegates.GetContent.html": {
    "href": "api/RueI.Delegates.GetContent.html",
    "title": "Delegate GetContent | RueI",
    "keywords": "Delegate GetContent Namespace RueI.Delegates Assembly RueI.dll Defines a method used to get content for an element. public delegate string GetContent() Returns string A string with the new content."
  },
  "api/RueI.Delegates.ParseTag.html": {
    "href": "api/RueI.Delegates.ParseTag.html",
    "title": "Delegate ParseTag | RueI",
    "keywords": "Delegate ParseTag Namespace RueI.Delegates Assembly RueI.dll public delegate void ParseTag(StringBuilder sb, ParserContext context) Parameters sb StringBuilder context ParserContext"
  },
  "api/RueI.Delegates.html": {
    "href": "api/RueI.Delegates.html",
    "title": "Namespace RueI.Delegates | RueI",
    "keywords": "Namespace RueI.Delegates Delegates GetContent Defines a method used to get content for an element. ParseTag"
  },
  "api/RueI.Display.html": {
    "href": "api/RueI.Display.html",
    "title": "Class Display | RueI",
    "keywords": "Class Display Namespace RueI Assembly RueI.dll Represents a display attached to a DisplayCoordinator. public class Display : DisplayBase Inheritance object DisplayBase Display Inherited Members DisplayBase.IsActive DisplayBase.ReferenceHub DisplayBase.Coordinator DisplayBase.Delete() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Display(ReferenceHub) Initializes a new instance of the Display class. public Display(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to assign the display to. Display(DisplayCoordinator) Initializes a new instance of the Display class. public Display(DisplayCoordinator coordinator) Parameters coordinator DisplayCoordinator The DisplayCoordinator to assign the display to. Fields HINTRATELIMIT Gets the ratelimit used for displaying hints. public const float HINTRATELIMIT = 0.55 Field Value float Properties Elements Gets the elements of this display. public List<IElement> Elements { get; } Property Value List<IElement> Methods ~Display() Finalizes an instance of the Display class. protected ~Display() GetAllElements() Gets all of the elements of this display. public override IEnumerable<IElement> GetAllElements() Returns IEnumerable<IElement> The IEnumerator<T> of elements. Update() public void Update()"
  },
  "api/RueI.DisplayBase.html": {
    "href": "api/RueI.DisplayBase.html",
    "title": "Class DisplayBase | RueI",
    "keywords": "Class DisplayBase Namespace RueI Assembly RueI.dll Defines the base class for all displays. public abstract class DisplayBase Inheritance object DisplayBase Derived Display ScreenDisplay<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DisplayBase(ReferenceHub) Initializes a new instance of the DisplayBase class. public DisplayBase(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to assign the display to. DisplayBase(DisplayCoordinator) Initializes a new instance of the DisplayBase class. public DisplayBase(DisplayCoordinator coordinator) Parameters coordinator DisplayCoordinator The DisplayCoordinator to assign the display to. Properties Coordinator Gets the DisplayCoordinator that this display is attached to. public DisplayCoordinator Coordinator { get; } Property Value DisplayCoordinator IsActive Gets a value indicating whether or not this display is active. public bool IsActive { get; } Property Value bool ReferenceHub Gets the ReferenceHub that this display is assigned to. public ReferenceHub ReferenceHub { get; } Property Value ReferenceHub Methods Delete() Deletes this display, removing it from the player's coordinator. public void Delete() GetAllElements() Gets all of the elements of this display. public abstract IEnumerable<IElement> GetAllElements() Returns IEnumerable<IElement> The IEnumerator<T> of elements."
  },
  "api/RueI.DisplayCoordinator.html": {
    "href": "api/RueI.DisplayCoordinator.html",
    "title": "Class DisplayCoordinator | RueI",
    "keywords": "Class DisplayCoordinator Namespace RueI Assembly RueI.dll Coordinates multiple PlayerDisplays. public class DisplayCoordinator Inheritance object DisplayCoordinator Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Scheduler Gets the Scheduler for this DisplayCoordinator. public Scheduler Scheduler { get; } Property Value Scheduler Methods Get(ReferenceHub) Gets a DisplayCoordinator from a ReferenceHub, or creates it if it doesn't exist. public static DisplayCoordinator Get(ReferenceHub hub) Parameters hub ReferenceHub The hub to get the display for. Returns DisplayCoordinator The DisplayCoordinator. Update(int) Updates this display. public void Update(int priority = 100) Parameters priority int The priority of the update - defaults to 100."
  },
  "api/RueI.Displays.EffectApplier.html": {
    "href": "api/RueI.Displays.EffectApplier.html",
    "title": "Class EffectApplier | RueI",
    "keywords": "Class EffectApplier Namespace RueI.Displays Assembly RueI.dll Provides a means of doing batch operations. public class EffectApplier Inheritance object EffectApplier Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/RueI.Displays.Scheduler.RateLimiter.html": {
    "href": "api/RueI.Displays.Scheduler.RateLimiter.html",
    "title": "Class Scheduler.RateLimiter | RueI",
    "keywords": "Class Scheduler.RateLimiter Namespace RueI.Displays Assembly RueI.dll public class Scheduler.RateLimiter Inheritance object Scheduler.RateLimiter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors RateLimiter(int, TimeSpan) Initializes a new instance of the Scheduler.RateLimiter class. public RateLimiter(int tokenLimit, TimeSpan regenRate) Parameters tokenLimit int The maximum number of tokens and the default number of tokens. regenRate TimeSpan How quickly tokens are regenerated after they have been consumed. Properties HasTokens public bool HasTokens { get; } Property Value bool RegenRate public TimeSpan RegenRate { get; set; } Property Value TimeSpan Tokens public int Tokens { get; } Property Value int Methods CalculateNewTokens() public void CalculateNewTokens() Consume() public void Consume()"
  },
  "api/RueI.Displays.Scheduler.html": {
    "href": "api/RueI.Displays.Scheduler.html",
    "title": "Class Scheduler | RueI",
    "keywords": "Class Scheduler Namespace RueI.Displays Assembly RueI.dll Provides a means of doing batch operations. public class Scheduler Inheritance object Scheduler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Scheduler(DisplayCoordinator) Initializes a new instance of the Scheduler class. public Scheduler(DisplayCoordinator coordinator) Parameters coordinator DisplayCoordinator The DisplayCoordinator to use. Methods CalculateWeighted(IEnumerable<ScheduledJob>) Calculates the weighted time for a list of jobs to be performed. public static DateTimeOffset CalculateWeighted(IEnumerable<ScheduledJob> jobs) Parameters jobs IEnumerable<ScheduledJob> The jobs. Returns DateTimeOffset The weighted DateTimeOffset of all of the jobs. Schedule(ScheduledJob) Schedules a job. public void Schedule(ScheduledJob job) Parameters job ScheduledJob The job to schedule. Schedule(Action, TimeSpan, int) Schedules a job. public void Schedule(Action action, TimeSpan time, int priority) Parameters action Action The Action to run. time TimeSpan How long into the future to run the action at. priority int The priority of the job, giving it additional weight when calculating. Schedule(TimeSpan, Action) Schedules a job with a priority of 1. public void Schedule(TimeSpan time, Action action) Parameters time TimeSpan How long into the future to run the action at. action Action The Action to run. Schedule(TimeSpan, Action, int) Schedules a job. public void Schedule(TimeSpan time, Action action, int priority) Parameters time TimeSpan How long into the future to run the action at. action Action The Action to run. priority int The priority of the job, giving it additional weight when calculating."
  },
  "api/RueI.Displays.html": {
    "href": "api/RueI.Displays.html",
    "title": "Namespace RueI.Displays | RueI",
    "keywords": "Namespace RueI.Displays Classes EffectApplier Provides a means of doing batch operations. Scheduler Provides a means of doing batch operations. Scheduler.RateLimiter"
  },
  "api/RueI.DynamicElement.html": {
    "href": "api/RueI.DynamicElement.html",
    "title": "Class DynamicElement | RueI",
    "keywords": "Class DynamicElement Namespace RueI Assembly RueI.dll Represents a non-cached element that evaluates and parses a function when getting its content. public class DynamicElement : IElement Inheritance object DynamicElement Implements IElement Derived ScreenDynamicElement<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(IElement) Remarks The content of this element is re-evaluated by calling a function every time the display is updated. This makes it suitable for scenarios where you need to have information constantly updated. For example, you may use this to display the health of SCPs in an SCP list. Constructors DynamicElement(GetContent, float, int) Initializes a new instance of the DynamicElement class. public DynamicElement(GetContent contentGetter, float position, int zIndex = 0) Parameters contentGetter GetContent A delegate returning the new content that will be ran every time the display is updated. position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. zIndex int A value determing the priority of the hint, where higher numbers means that it will render above hints with a lower number. Properties ContentGetter Gets or sets a method that returns the new content and is called every time the display is updated. public GetContent ContentGetter { get; set; } Property Value GetContent Enabled Gets or sets a value indicating whether or not this element is enabled and will show. public bool Enabled { get; set; } Property Value bool ParsedData Gets the data used for parsing. public ParsedData ParsedData { get; } Property Value ParsedData Position Gets or sets the position of the element on a scale from 0-1000, where 0 represents the bottom of the screen and 1000 represents the top. public float Position { get; set; } Property Value float ZIndex Gets or sets the priority of the hint (determining if it shows above another hint). public int ZIndex { get; set; } Property Value int"
  },
  "api/RueI.Enums.CaseStyle.html": {
    "href": "api/RueI.Enums.CaseStyle.html",
    "title": "Enum CaseStyle | RueI",
    "keywords": "Enum CaseStyle Namespace RueI.Enums Assembly RueI.dll Represents the case style of the parser. public enum CaseStyle Fields Lowercase = 1 Indicates that all text will be in lowercase. Smallcaps = 0 Indicates that all text will be in uppercase, but lowercase characters will be slightly smaller. Uppercase = 2 Indicates that all text will be in uppercase."
  },
  "api/RueI.Enums.ColorStyle.html": {
    "href": "api/RueI.Enums.ColorStyle.html",
    "title": "Enum ColorStyle | RueI",
    "keywords": "Enum ColorStyle Namespace RueI.Enums Assembly RueI.dll Represents the style used for a color parameter. public enum ColorStyle Fields HexCode = 1 Indicates that the color parameter is a hex code. Named = 0 Indicates that the color parameter is a named color."
  },
  "api/RueI.Enums.MeasurementStyle.html": {
    "href": "api/RueI.Enums.MeasurementStyle.html",
    "title": "Enum MeasurementStyle | RueI",
    "keywords": "Enum MeasurementStyle Namespace RueI.Enums Assembly RueI.dll Represents the unit used for a measurement parameter. public enum MeasurementStyle Fields Ems = 2 Indicates that the measurement is in ems. Percentage = 1 Indicates that the measurement is a percentage of the default. Pixels = 0 Indicates that the measurement is in pixels."
  },
  "api/RueI.Enums.TagDelimiterStyle.html": {
    "href": "api/RueI.Enums.TagDelimiterStyle.html",
    "title": "Enum TagDelimiterStyle | RueI",
    "keywords": "Enum TagDelimiterStyle Namespace RueI.Enums Assembly RueI.dll Represents the valid characters for a delimiter. [Flags] public enum TagDelimiterStyle Fields Color = 2 Indicates that a tag takes a color as a parameter. Measurement = 1 Indicates that a tag takes a measurement as a parameter. NoParams = 0 Indicates that a tag does not take parameters."
  },
  "api/RueI.Enums.html": {
    "href": "api/RueI.Enums.html",
    "title": "Namespace RueI.Enums | RueI",
    "keywords": "Namespace RueI.Enums Enums CaseStyle Represents the case style of the parser. ColorStyle Represents the style used for a color parameter. MeasurementStyle Represents the unit used for a measurement parameter. TagDelimiterStyle Represents the valid characters for a delimiter."
  },
  "api/RueI.EventHandler.html": {
    "href": "api/RueI.EventHandler.html",
    "title": "Class EventHandler | RueI",
    "keywords": "Class EventHandler Namespace RueI Assembly RueI.dll Handles events for RueI. public static class EventHandler Inheritance object EventHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods OnPlayerRemoved(ReferenceHub) public static void OnPlayerRemoved(ReferenceHub hub) Parameters hub ReferenceHub OnRestart() Called after the server restarts. public static void OnRestart() OnServerRoleSet(ReferenceHub, RoleTypeId, RoleChangeReason) public static void OnServerRoleSet(ReferenceHub hub, RoleTypeId type, RoleChangeReason reason) Parameters hub ReferenceHub type RoleTypeId reason RoleChangeReason"
  },
  "api/RueI.Events.DisplayUpdatedEventArgs.html": {
    "href": "api/RueI.Events.DisplayUpdatedEventArgs.html",
    "title": "Class DisplayUpdatedEventArgs | RueI",
    "keywords": "Class DisplayUpdatedEventArgs Namespace RueI.Events Assembly RueI.dll Contains all information after a player's DisplayCoordinator is updated. public class DisplayUpdatedEventArgs : EventArgs Inheritance object EventArgs DisplayUpdatedEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DisplayUpdatedEventArgs(ReferenceHub, DisplayCoordinator) Initializes a new instance of the DisplayUpdatedEventArgs class. public DisplayUpdatedEventArgs(ReferenceHub referenceHub, DisplayCoordinator displayCord) Parameters referenceHub ReferenceHub The hub of the player. displayCord DisplayCoordinator The DisplayCoordinator . Properties DisplayCoordinator Gets the DisplayCoordinator of the player. public DisplayCoordinator DisplayCoordinator { get; } Property Value DisplayCoordinator ReferenceHub Gets the ReferenceHub of the player. public ReferenceHub ReferenceHub { get; } Property Value ReferenceHub"
  },
  "api/RueI.Events.Events.RueIEvent-1.html": {
    "href": "api/RueI.Events.Events.RueIEvent-1.html",
    "title": "Delegate Events.RueIEvent<T> | RueI",
    "keywords": "Delegate Events.RueIEvent<T> Namespace RueI.Events Assembly RueI.dll Represents a custom RueI event. public delegate void Events.RueIEvent<T>(T ev) where T : EventArgs Parameters ev T The event args to use. Type Parameters T The EventArgs class to use."
  },
  "api/RueI.Events.Events.html": {
    "href": "api/RueI.Events.Events.html",
    "title": "Class Events | RueI",
    "keywords": "Class Events Namespace RueI.Events Assembly RueI.dll Provides events for use by other plugins. public static class Events Inheritance object Events Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Events DisplayUpdated Called after a player's DisplayCoordinator is updated. public static event Events.RueIEvent<DisplayUpdatedEventArgs>? DisplayUpdated Event Type Events.RueIEvent<DisplayUpdatedEventArgs> RateLimitFinished Called after the rate limit is finished for a player. public static event Events.RueIEvent<RateLimitFinishedEventArgs>? RateLimitFinished Event Type Events.RueIEvent<RateLimitFinishedEventArgs>"
  },
  "api/RueI.Events.RateLimitFinishedEventArgs.html": {
    "href": "api/RueI.Events.RateLimitFinishedEventArgs.html",
    "title": "Class RateLimitFinishedEventArgs | RueI",
    "keywords": "Class RateLimitFinishedEventArgs Namespace RueI.Events Assembly RueI.dll Contains all information after a player's hint rate limit is finished. public class RateLimitFinishedEventArgs : EventArgs Inheritance object EventArgs RateLimitFinishedEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors RateLimitFinishedEventArgs(ReferenceHub) Initializes a new instance of the RateLimitFinishedEventArgs class. public RateLimitFinishedEventArgs(ReferenceHub referenceHub) Parameters referenceHub ReferenceHub The hub that the rate limit is finished for. Properties ReferenceHub Gets the ReferenceHub that the hint rate limit is finished for. public ReferenceHub ReferenceHub { get; } Property Value ReferenceHub"
  },
  "api/RueI.Events.html": {
    "href": "api/RueI.Events.html",
    "title": "Namespace RueI.Events | RueI",
    "keywords": "Namespace RueI.Events Classes DisplayUpdatedEventArgs Contains all information after a player's DisplayCoordinator is updated. Events Provides events for use by other plugins. RateLimitFinishedEventArgs Contains all information after a player's hint rate limit is finished. Delegates Events.RueIEvent<T> Represents a custom RueI event."
  },
  "api/RueI.Extensions.CollectionExtensions.html": {
    "href": "api/RueI.Extensions.CollectionExtensions.html",
    "title": "Class CollectionExtensions | RueI",
    "keywords": "Class CollectionExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions for working with collections. public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Add<T>(ICollection<T>, params T[]) Adds multiple items to a collection. public static void Add<T>(this ICollection<T> collection, params T[] items) Parameters collection ICollection<T> The collection to add the elements to. items T[] The items to add. Type Parameters T The type of item to add."
  },
  "api/RueI.Extensions.ElementHelpers.html": {
    "href": "api/RueI.Extensions.ElementHelpers.html",
    "title": "Class ElementHelpers | RueI",
    "keywords": "Class ElementHelpers Namespace RueI.Extensions Assembly RueI.dll Provides extensions and helpers for working with elements. public static class ElementHelpers Inheritance object ElementHelpers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CalculateOffset(float, float, float) Calculates the offset for two hints. public static float CalculateOffset(float hintOnePos, float hintOneTotalLines, float hintTwoPos) Parameters hintOnePos float The first hint's vertical position. hintOneTotalLines float The first hint's total line-height, excluding the vertical position. hintTwoPos float The second hint's vertical position. Returns float A float indicating the new offset. GetFunctionalPosition(IElement) Gets the functional (un-scaled) position of an element. public static float GetFunctionalPosition(this IElement element) Parameters element IElement The element to get the position for. Returns float The un-scaled position.."
  },
  "api/RueI.Extensions.HintBuilding.HintBuilding.html": {
    "href": "api/RueI.Extensions.HintBuilding.HintBuilding.html",
    "title": "Class HintBuilding | RueI",
    "keywords": "Class HintBuilding Namespace RueI.Extensions.HintBuilding Assembly RueI.dll Provides extensions for working with collections. public static class HintBuilding Inheritance object HintBuilding Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddHorizontalPos(StringBuilder, float, MeasurementStyle) Adds a pos tag to a StringBuilder. public static StringBuilder AddHorizontalPos(this StringBuilder sb, float margins, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the pos tag. style MeasurementStyle The measurement style of the pos tag. Returns StringBuilder A reference to the original StringBuilder. AddLinebreak(StringBuilder) Adds a linebreak to a StringBuilder. public static StringBuilder AddLinebreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. AddSpace(StringBuilder, float, MeasurementStyle) Adds a space tag to a StringBuilder. public static StringBuilder AddSpace(this StringBuilder sb, float margins, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the pos tag. style MeasurementStyle The measurement style of the pos tag. Returns StringBuilder A reference to the original StringBuilder. AddSprite(StringBuilder, int) Adds a sprite tag to a StringBuilder. public static StringBuilder AddSprite(this StringBuilder sb, int index) Parameters sb StringBuilder The StringBuilder to use. index int The index (0-20) of the sprite tag. Returns StringBuilder A reference to the original StringBuilder. AddSprite(StringBuilder, int, Color) Adds a sprite tag to a StringBuilder. public static StringBuilder AddSprite(this StringBuilder sb, int index, Color color) Parameters sb StringBuilder The StringBuilder to use. index int The index (0-20) of the sprite tag. color Color The color of the sprite tag. Returns StringBuilder A reference to the original StringBuilder. AddVOffset(StringBuilder, float, MeasurementStyle) Adds a voffset tag to a StringBuilder. public static StringBuilder AddVOffset(this StringBuilder sb, float offset, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. offset float The size of the voffset tag. style MeasurementStyle The measurement style of the voffset tag. Returns StringBuilder A reference to the original StringBuilder. CloseAlpha(StringBuilder) Adds a closing alpha tag to a StringBuilder. public static StringBuilder CloseAlpha(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseBold(StringBuilder) Adds a closing bold tag to a StringBuilder. public static StringBuilder CloseBold(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseColor(StringBuilder) Adds a closing color tag to a StringBuilder. public static StringBuilder CloseColor(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseIndent(StringBuilder) Adds a closing indent tag to a StringBuilder. public static StringBuilder CloseIndent(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseItalics(StringBuilder) Adds a closing italics tag to a StringBuilder. public static StringBuilder CloseItalics(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseLineHeight(StringBuilder) Adds a closing line-height tag to a StringBuilder. public static StringBuilder CloseLineHeight(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMargins(StringBuilder) Adds a closing margins tag to a StringBuilder. public static StringBuilder CloseMargins(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMark(StringBuilder) Adds a closing mark tag to a StringBuilder. public static StringBuilder CloseMark(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMonospace(StringBuilder) Adds a closing monospace tag to a StringBuilder. public static StringBuilder CloseMonospace(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseNobreak(StringBuilder) Adds a closing nobreak tag to a StringBuilder. public static StringBuilder CloseNobreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseNoparse(StringBuilder) Adds a closing noparse tag to a StringBuilder. public static StringBuilder CloseNoparse(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseRotation(StringBuilder) Adds a closing rotation tag to a StringBuilder. public static StringBuilder CloseRotation(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseScale(StringBuilder) Adds a closing scale tag to a StringBuilder. public static StringBuilder CloseScale(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSize(StringBuilder) Adds a closing size tag to a StringBuilder. public static StringBuilder CloseSize(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseStrikethrough(StringBuilder) Adds a closing strikethrough tag to a StringBuilder. public static StringBuilder CloseStrikethrough(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSubscript(StringBuilder) Adds a closing subscript tag to a StringBuilder. public static StringBuilder CloseSubscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSuperscript(StringBuilder) Adds a closing superscript tag to a StringBuilder. public static StringBuilder CloseSuperscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseUnderline(StringBuilder) Adds a closing underline tag to a StringBuilder. public static StringBuilder CloseUnderline(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseVOffset(StringBuilder) Adds a closing voffset tag to a StringBuilder. public static StringBuilder CloseVOffset(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseWidth(StringBuilder) Adds a closing width tag to a StringBuilder. public static StringBuilder CloseWidth(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. ConvertToHex(Color) Converts a Color to a hex code string. public static string ConvertToHex(Color color) Parameters color Color The Color to convert. Returns string The color as a hex code string. SetAlpha(StringBuilder, byte) Adds an alpha tag to a StringBuilder. public static StringBuilder SetAlpha(this StringBuilder sb, byte alpha) Parameters sb StringBuilder The StringBuilder to use. alpha byte The alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetAlpha(StringBuilder, int) Adds an alpha tag to a StringBuilder. public static StringBuilder SetAlpha(this StringBuilder sb, int alpha) Parameters sb StringBuilder The StringBuilder to use. alpha int The alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetBold(StringBuilder) Adds a bold tag to a StringBuilder. public static StringBuilder SetBold(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetCase(StringBuilder, CaseStyle) Adds a case tag to a StringBuilder. public static StringBuilder SetCase(this StringBuilder sb, CaseStyle caseStyle) Parameters sb StringBuilder The StringBuilder to use. caseStyle CaseStyle The case to use. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, byte, byte, byte, byte) Adds a color tag to a StringBuilder from RGBA values. public static StringBuilder SetColor(this StringBuilder sb, byte r, byte g, byte b, byte alpha = 255) Parameters sb StringBuilder The StringBuilder to use. r byte The red (0-255) in the color. g byte The green (0-255) in the color. b byte The blue (0-255) in the color. alpha byte The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, Color) Adds a color tag to a StringBuilder. public static StringBuilder SetColor(this StringBuilder sb, Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The color to use. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, int, int, int, int) Adds a color tag to a StringBuilder from RGBA values. public static StringBuilder SetColor(this StringBuilder sb, int r, int g, int b, int alpha = 255) Parameters sb StringBuilder The StringBuilder to use. r int The red (0-255) in the color. g int The green (0-255) in the color. b int The blue (0-255) in the color. alpha int The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetIndent(StringBuilder, float, MeasurementStyle) Adds an indent tag to a StringBuilder. public static StringBuilder SetIndent(this StringBuilder sb, float indent, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. indent float The indent size to include in the indent tag. style MeasurementStyle The measurement style of the indent tag. Returns StringBuilder A reference to the original StringBuilder. SetItalics(StringBuilder) Adds an italics tag to a StringBuilder. public static StringBuilder SetItalics(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetLineHeight(StringBuilder, float, MeasurementStyle) Adds a line-height tag to a StringBuilder. public static StringBuilder SetLineHeight(this StringBuilder sb, float size, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The line height to include in the line-height tag. style MeasurementStyle The measurement style of the line-height tag. Returns StringBuilder A reference to the original StringBuilder. SetMargins(StringBuilder, float, MeasurementStyle) Adds an margins tag to a StringBuilder. public static StringBuilder SetMargins(this StringBuilder sb, float margins, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the margins. style MeasurementStyle The measurement style of the margins tag. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, byte, byte, byte, byte) Adds a mark tag to a StringBuilder from RGBA values. public static StringBuilder SetMark(this StringBuilder sb, byte r, byte g, byte b, byte alpha) Parameters sb StringBuilder The StringBuilder to use. r byte The red (0-255) in the color. g byte The green (0-255) in the color. b byte The blue (0-255) in the color. alpha byte The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, Color) Adds a mark tag to a StringBuilder. public static StringBuilder SetMark(this StringBuilder sb, Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The color to use. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, int, int, int, int) Adds a mark tag to a StringBuilder from RGBA values. public static StringBuilder SetMark(this StringBuilder sb, int r, int g, int b, int alpha) Parameters sb StringBuilder The StringBuilder to use. r int The red (0-255) in the color. g int The green (0-255) in the color. b int The blue (0-255) in the color. alpha int The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetMonospace(StringBuilder, float, MeasurementStyle) Adds a monospace tag to a StringBuilder. public static StringBuilder SetMonospace(this StringBuilder sb, float spacing, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. spacing float The size of the spacing. style MeasurementStyle The measurement style of the monospacing tag. Returns StringBuilder A reference to the original StringBuilder. SetNobreak(StringBuilder) Adds a nobreak tag to a StringBuilder. public static StringBuilder SetNobreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetNoparse(StringBuilder) Adds a noparse tag to a StringBuilder. public static StringBuilder SetNoparse(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetRotation(StringBuilder, int) Adds a rotation tag to a StringBuilder. public static StringBuilder SetRotation(this StringBuilder sb, int rotation) Parameters sb StringBuilder The StringBuilder to use. rotation int The rotation (-180 to 180) of the tag.. Returns StringBuilder A reference to the original StringBuilder. SetScale(StringBuilder, float) Adds a horizontal scale tag to a StringBuilder. public static StringBuilder SetScale(this StringBuilder sb, float scale) Parameters sb StringBuilder The StringBuilder to use. scale float The scale size to include in the scale tag. Returns StringBuilder A reference to the original StringBuilder. SetSize(StringBuilder, float, MeasurementStyle) Adds a size tag to a StringBuilder. public static StringBuilder SetSize(this StringBuilder sb, float size, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The size to include in the size tag. style MeasurementStyle The measurement style of the size tag. Returns StringBuilder A reference to the original StringBuilder. SetStrikethrough(StringBuilder) Adds a strikethrough tag to a StringBuilder. public static StringBuilder SetStrikethrough(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetSubscript(StringBuilder) Adds a subscript tag to a StringBuilder. public static StringBuilder SetSubscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetSuperscript(StringBuilder) Adds a superscript tag to a StringBuilder. public static StringBuilder SetSuperscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetUnderline(StringBuilder) Adds an underline tag to a StringBuilder. public static StringBuilder SetUnderline(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetWidth(StringBuilder, float, MeasurementStyle) Adds a width tag to a StringBuilder. public static StringBuilder SetWidth(this StringBuilder sb, float offset, MeasurementStyle style = MeasurementStyle.Pixels) Parameters sb StringBuilder The StringBuilder to use. offset float The size of the new width. style MeasurementStyle The measurement style of the width tag. Returns StringBuilder A reference to the original StringBuilder."
  },
  "api/RueI.Extensions.HintBuilding.html": {
    "href": "api/RueI.Extensions.HintBuilding.html",
    "title": "Namespace RueI.Extensions.HintBuilding | RueI",
    "keywords": "Namespace RueI.Extensions.HintBuilding Classes HintBuilding Provides extensions for working with collections."
  },
  "api/RueI.Extensions.IComparableExtensions.html": {
    "href": "api/RueI.Extensions.IComparableExtensions.html",
    "title": "Class IComparableExtensions | RueI",
    "keywords": "Class IComparableExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions and helpers for working with elements. public static class IComparableExtensions Inheritance object IComparableExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods MaxIf<T>(T, bool, T) Gets the maximum of two IComparable<T>, if a bool is true. public static T MaxIf<T>(this T first, bool skip, T second) where T : IComparable<T> Parameters first T The first value. skip bool Whether or not to return the first value. second T The second value. Returns T The maximum of the two, or the first value if the bool is true. Type Parameters T The type to use. Max<T>(T, T) Gets the maximum of two IComparable<T>. public static T Max<T>(this T first, T second) where T : IComparable<T> Parameters first T The first value. second T The second value. Returns T The maximum of the two. Type Parameters T The type to use."
  },
  "api/RueI.Extensions.IEnumerableExtensions.html": {
    "href": "api/RueI.Extensions.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | RueI",
    "keywords": "Class IEnumerableExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions for working with collections. public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ToPooledList<T>(IEnumerable<T>) Converts a IEnumerable<T> to a pooled List<T>. public static List<T> ToPooledList<T>(this IEnumerable<T> enumerable) Parameters enumerable IEnumerable<T> The IEnumerable<T> to convert. Returns List<T> The new pooled List<T>. Type Parameters T The type of item for the list. ToPooledList<T>(IEnumerable<T>, int) Converts a IEnumerable<T> to a pooled List<T>. public static List<T> ToPooledList<T>(this IEnumerable<T> enumerable, int capacity) Parameters enumerable IEnumerable<T> The IEnumerable<T> to convert. capacity int The initial capacity of the List<T>. Returns List<T> The new pooled List<T>. Type Parameters T The type of item for the list."
  },
  "api/RueI.Extensions.Union-2.html": {
    "href": "api/RueI.Extensions.Union-2.html",
    "title": "Class Union<T, TOther> | RueI",
    "keywords": "Class Union<T, TOther> Namespace RueI.Extensions Assembly RueI.dll Represents a union between a class and an interface. public class Union<T, TOther> where T : class where TOther : class Type Parameters T The more derived class. TOther The interface to be derived from. Inheritance object Union<T, TOther> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Class Gets the derived class of the union. public T Class { get; } Property Value T Interface Gets the interface of the union. public TOther Interface { get; } Property Value TOther Methods New<TClass>(TClass) Creates a new union for a class. public static Union<T, TOther> New<TClass>(TClass value) where TClass : class, T, TOther Parameters value TClass The value of the unioned type. Returns Union<T, TOther> A new union of the two types. Type Parameters TClass The class to create the union for. Operators implicit operator T(Union<T, TOther>) public static implicit operator T(Union<T, TOther> union) Parameters union Union<T, TOther> Returns T implicit operator TOther(Union<T, TOther>) public static implicit operator TOther(Union<T, TOther> union) Parameters union Union<T, TOther> Returns TOther"
  },
  "api/RueI.Extensions.html": {
    "href": "api/RueI.Extensions.html",
    "title": "Namespace RueI.Extensions | RueI",
    "keywords": "Namespace RueI.Extensions Classes CollectionExtensions Provides extensions for working with collections. ElementHelpers Provides extensions and helpers for working with elements. IComparableExtensions Provides extensions and helpers for working with elements. IEnumerableExtensions Provides extensions for working with collections. Union<T, TOther> Represents a union between a class and an interface."
  },
  "api/RueI.IElement.html": {
    "href": "api/RueI.IElement.html",
    "title": "Interface IElement | RueI",
    "keywords": "Interface IElement Namespace RueI Assembly RueI.dll Represents the base class for all elements. public interface IElement Extension Methods ElementHelpers.GetFunctionalPosition(IElement) Properties Enabled Gets or sets a value indicating whether or not this element is enabled and will show. bool Enabled { get; set; } Property Value bool ParsedData Gets the data used for parsing. ParsedData ParsedData { get; } Property Value ParsedData Position Gets or sets the position of the element on a scale from 0-1000, where 0 represents the bottom of the screen and 1000 represents the top. float Position { get; set; } Property Value float ZIndex Gets or sets the priority of the hint (determining if it shows above another hint). int ZIndex { get; set; } Property Value int"
  },
  "api/RueI.IScreenElement-1.html": {
    "href": "api/RueI.IScreenElement-1.html",
    "title": "Interface IScreenElement<T> | RueI",
    "keywords": "Interface IScreenElement<T> Namespace RueI Assembly RueI.dll Represents an element that is shown when certain screens are active. public interface IScreenElement<T> : IElement where T : Enum Type Parameters T The enum to be used as the screen identifier. Inherited Members IElement.Enabled IElement.ParsedData IElement.Position IElement.ZIndex Extension Methods ElementHelpers.GetFunctionalPosition(IElement) Properties Screens Gets or sets the screens that this element is shown on. T Screens { get; set; } Property Value T"
  },
  "api/RueI.Interfaces.ISettable.html": {
    "href": "api/RueI.Interfaces.ISettable.html",
    "title": "Interface ISettable | RueI",
    "keywords": "Interface ISettable Namespace RueI.Interfaces Assembly RueI.dll Defines an element that can be set. public interface ISettable : IElement Inherited Members IElement.Enabled IElement.ParsedData IElement.Position IElement.ZIndex Extension Methods ElementHelpers.GetFunctionalPosition(IElement) Methods Set(string) Sets the content of this element. void Set(string text) Parameters text string The new element."
  },
  "api/RueI.Interfaces.html": {
    "href": "api/RueI.Interfaces.html",
    "title": "Namespace RueI.Interfaces | RueI",
    "keywords": "Namespace RueI.Interfaces Interfaces ISettable Defines an element that can be set."
  },
  "api/RueI.Main.html": {
    "href": "api/RueI.Main.html",
    "title": "Class Main | RueI",
    "keywords": "Class Main Namespace RueI Assembly RueI.dll public static class Main Inheritance object Main Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties RoundTaskPool public static TaskPool RoundTaskPool { get; set; } Property Value TaskPool Methods EnsureInit() public static void EnsureInit()"
  },
  "api/RueI.Parser.html": {
    "href": "api/RueI.Parser.html",
    "title": "Class Parser | RueI",
    "keywords": "Class Parser Namespace RueI Assembly RueI.dll Helps parse the content of elements. public class Parser Inheritance object Parser Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Tags Gets the current tags of the parser. public ReadOnlyDictionary<string, RichTextTag> Tags { get; } Property Value ReadOnlyDictionary<string, RichTextTag> Methods AddCharacter(ParserContext, char) Adds a character to a parser context. public void AddCharacter(ParserContext context, char ch) Parameters context ParserContext The context of the parser. ch char The character to add. CalculateCharacterLength(TextInfo, char) Calculates the length of an char with a context. public float CalculateCharacterLength(TextInfo context, char ch) Parameters context TextInfo The context to parse the char under. ch char The char to calculate the length for. Returns float A float indicating the total length of the char. CreateLineBreak(ParserContext) Generates the effects of a linebreak for a parser. public void CreateLineBreak(ParserContext context) Parameters context ParserContext The context of the parser. GetTagAttributes(string, out Dictionary<string, string>) Parses the tag attributes of a string. public static bool GetTagAttributes(string content, out Dictionary<string, string> attributes) Parameters content string The content to parse. attributes Dictionary<string, string> The pairs of attributes. Returns bool true if the content is valid, otherwise false. Parse(string) Parses a rich text string. public ParsedData Parse(string text) Parameters text string The string to parse. Returns ParsedData A ParsedData containing information about the string."
  },
  "api/RueI.ParserBuilder.html": {
    "href": "api/RueI.ParserBuilder.html",
    "title": "Class ParserBuilder | RueI",
    "keywords": "Class ParserBuilder Namespace RueI Assembly RueI.dll Builds Parsers. public sealed class ParserBuilder Inheritance object ParserBuilder Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors ParserBuilder() Initializes a new instance of the ParserBuilder class. public ParserBuilder() Methods AddTag<T>() Gets the SharedTag<T> of a RichTextTag type and adds it to the builder. public ParserBuilder AddTag<T>() where T : RichTextTag, new() Returns ParserBuilder A reference to this ParserBuilder. Type Parameters T The type of the tag to create. Build() Builds this ParserBuilder into a Parser. public Parser Build() Returns Parser The built Parser."
  },
  "api/RueI.Parsing.ParserContext.html": {
    "href": "api/RueI.Parsing.ParserContext.html",
    "title": "Class ParserContext | RueI",
    "keywords": "Class ParserContext Namespace RueI.Parsing Assembly RueI.dll Describes the state of a parser at a time. public class ParserContext : TextInfo, IDisposable Inheritance object TextInfo ParserContext Implements IDisposable Inherited Members TextInfo.CurrentLineHeight TextInfo.Size TextInfo.CurrentCSpace TextInfo.IsMonospace TextInfo.Monospacing TextInfo.IsBold TextInfo.Scale TextInfo.IsSuperOrSubScript TextInfo.CurrentCase object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ClosingTags Gets a list of tags to be closed within the parser. public List<RichTextTag> ClosingTags { get; } Property Value List<RichTextTag> ColorTags Gets or sets the number of color tags that are nested. public int ColorTags { get; set; } Property Value int CurrentLineWidth Gets or sets the current line width of the parser. public float CurrentLineWidth { get; set; } Property Value float NewOffset Gets or sets the final offset for the element as a whole. public float NewOffset { get; set; } Property Value float NoBreak Gets or sets a value indicating whether or not words are currently in no break. public bool NoBreak { get; set; } Property Value bool ResultBuilder Gets the end result string builder. public StringBuilder ResultBuilder { get; } Property Value StringBuilder ShouldParse Gets or sets a value indicating whether the parser should parse tags other than noparse. public bool ShouldParse { get; set; } Property Value bool SizeTags Gets a stack containing all of the nested sizes. public Stack<float> SizeTags { get; } Property Value Stack<float> WidthSinceSpace Gets or sets the total width since a space. public float WidthSinceSpace { get; set; } Property Value float Methods Dispose() Disposes this ParserContext, returning the string builder to the pool. public void Dispose()"
  },
  "api/RueI.Parsing.RichTextTag.html": {
    "href": "api/RueI.Parsing.RichTextTag.html",
    "title": "Class RichTextTag | RueI",
    "keywords": "Class RichTextTag Namespace RueI.Parsing Assembly RueI.dll Defines the base class for all rich text tags. public abstract class RichTextTag Inheritance object RichTextTag Derived NoParamsTagBase ParamsTagBase Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of the rich text tag. public abstract string[] Names { get; } Property Value string[] Methods IsValidDelimiter(char) Returns a value indicating whether or not the char is a valid delimiter for this tag. public abstract bool IsValidDelimiter(char ch) Parameters ch char The char to check. Returns bool true if the char is a valid delimiter, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLineHeightTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLineHeightTag.html",
    "title": "Class CloseLineHeightTag | RueI",
    "keywords": "Class CloseLineHeightTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle line-height tags. public class CloseLineHeightTag : NoParamsTagBase Inheritance object RichTextTag NoParamsTagBase CloseLineHeightTag Inherited Members NoParamsTagBase.IsValidDelimiter(char) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of the rich text tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Handles an instance of a tag without params. public override void HandleTag(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSizeTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSizeTag.html",
    "title": "Class CloseSizeTag | RueI",
    "keywords": "Class CloseSizeTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing size tags. public class CloseSizeTag : NoParamsTagBase Inheritance object RichTextTag NoParamsTagBase CloseSizeTag Inherited Members NoParamsTagBase.IsValidDelimiter(char) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of the rich text tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Handles an instance of a tag without params. public override void HandleTag(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LineHeightTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LineHeightTag.html",
    "title": "Class LineHeightTag | RueI",
    "keywords": "Class LineHeightTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle line-height tags. public class LineHeightTag : MeasurementTagBase Inheritance object RichTextTag ParamsTagBase MeasurementTagBase LineHeightTag Inherited Members MeasurementTagBase.IsValidDelimiter(char) MeasurementTagBase.HandleTag(ParserContext, char, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of the rich text tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ResetTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ResetTag.html",
    "title": "Class ResetTag | RueI",
    "keywords": "Class ResetTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing size tags. public class ResetTag : NoParamsTagBase Inheritance object RichTextTag NoParamsTagBase ResetTag Inherited Members NoParamsTagBase.IsValidDelimiter(char) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of the rich text tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Handles an instance of a tag without params. public override void HandleTag(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SharedTag-1.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SharedTag-1.html",
    "title": "Class SharedTag<T> | RueI",
    "keywords": "Class SharedTag<T> Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle singletons of tags. public static class SharedTag<T> where T : RichTextTag, new() Type Parameters T The RichTextTag type to share. Inheritance object SharedTag<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Singleton Gets the shared singleton for this RichTextTag. public static T Singleton { get; } Property Value T"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SizeTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SizeTag.html",
    "title": "Class SizeTag | RueI",
    "keywords": "Class SizeTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle size tags. public class SizeTag : MeasurementTagBase Inheritance object RichTextTag ParamsTagBase MeasurementTagBase SizeTag Inherited Members MeasurementTagBase.IsValidDelimiter(char) MeasurementTagBase.HandleTag(ParserContext, char, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of the rich text tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SpriteTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SpriteTag.html",
    "title": "Class SpriteTag | RueI",
    "keywords": "Class SpriteTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle size tags. public class SpriteTag : ParamsTagBase Inheritance object RichTextTag ParamsTagBase SpriteTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of the rich text tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, char, string) Handles an instance of this tag. public override bool HandleTag(ParserContext context, char delimiter, string content) Parameters context ParserContext The context of the parser. delimiter char The delimiter of the tag. content string The content of the tag. Returns bool true if the tag is valid, otherwise false. IsValidDelimiter(char) Returns a value indicating whether or not the char is a valid delimiter for this tag. public override bool IsValidDelimiter(char ch) Parameters ch char The char to check. Returns bool true if the char is a valid delimiter, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.html",
    "title": "Namespace RueI.Parsing.Tags.ConcreteTags | RueI",
    "keywords": "Namespace RueI.Parsing.Tags.ConcreteTags Classes CloseLineHeightTag Provides a way to handle line-height tags. CloseSizeTag Provides a way to handle closing size tags. LineHeightTag Provides a way to handle line-height tags. ResetTag Provides a way to handle closing size tags. SharedTag<T> Provides a way to handle singletons of tags. SizeTag Provides a way to handle size tags. SpriteTag Provides a way to handle size tags."
  },
  "api/RueI.Parsing.Tags.MeasurementTagBase.html": {
    "href": "api/RueI.Parsing.Tags.MeasurementTagBase.html",
    "title": "Class MeasurementTagBase | RueI",
    "keywords": "Class MeasurementTagBase Namespace RueI.Parsing.Tags Assembly RueI.dll Defines the base class for all tags that only take in a measurement. public abstract class MeasurementTagBase : ParamsTagBase Inheritance object RichTextTag ParamsTagBase MeasurementTagBase Derived LineHeightTag SizeTag Inherited Members RichTextTag.Names object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag. public abstract bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false. HandleTag(ParserContext, char, string) Handles an instance of this tag. public override bool HandleTag(ParserContext context, char delimiter, string content) Parameters context ParserContext The context of the parser. delimiter char The delimiter of the tag. content string The content of the tag. Returns bool true if the tag is valid, otherwise false. IsValidDelimiter(char) Returns a value indicating whether or not the char is a valid delimiter for this tag. public override bool IsValidDelimiter(char ch) Parameters ch char The char to check. Returns bool true if the char is a valid delimiter, otherwise false."
  },
  "api/RueI.Parsing.Tags.NoParamsTagBase.html": {
    "href": "api/RueI.Parsing.Tags.NoParamsTagBase.html",
    "title": "Class NoParamsTagBase | RueI",
    "keywords": "Class NoParamsTagBase Namespace RueI.Parsing.Tags Assembly RueI.dll Defines the base class for all tags that do not have params. public abstract class NoParamsTagBase : RichTextTag Inheritance object RichTextTag NoParamsTagBase Derived CloseLineHeightTag CloseSizeTag ResetTag Inherited Members RichTextTag.Names object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods HandleTag(ParserContext) Handles an instance of a tag without params. public abstract void HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. IsValidDelimiter(char) Returns a value indicating whether or not the char is a valid delimiter for this tag. public override bool IsValidDelimiter(char ch) Parameters ch char The char to check. Returns bool true if the char is a valid delimiter, otherwise false."
  },
  "api/RueI.Parsing.Tags.ParamsTagBase.html": {
    "href": "api/RueI.Parsing.Tags.ParamsTagBase.html",
    "title": "Class ParamsTagBase | RueI",
    "keywords": "Class ParamsTagBase Namespace RueI.Parsing.Tags Assembly RueI.dll Defines the base class for all tags that take in any params. public abstract class ParamsTagBase : RichTextTag Inheritance object RichTextTag ParamsTagBase Derived SpriteTag MeasurementTagBase Inherited Members RichTextTag.Names RichTextTag.IsValidDelimiter(char) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods HandleTag(ParserContext, char, string) Handles an instance of this tag. public abstract bool HandleTag(ParserContext context, char delimiter, string content) Parameters context ParserContext The context of the parser. delimiter char The delimiter of the tag. content string The content of the tag. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.html": {
    "href": "api/RueI.Parsing.Tags.html",
    "title": "Namespace RueI.Parsing.Tags | RueI",
    "keywords": "Namespace RueI.Parsing.Tags Classes MeasurementTagBase Defines the base class for all tags that only take in a measurement. NoParamsTagBase Defines the base class for all tags that do not have params. ParamsTagBase Defines the base class for all tags that take in any params."
  },
  "api/RueI.Parsing.TextInfo.html": {
    "href": "api/RueI.Parsing.TextInfo.html",
    "title": "Class TextInfo | RueI",
    "keywords": "Class TextInfo Namespace RueI.Parsing Assembly RueI.dll Provides information about TMP text at a certain point. public class TextInfo Inheritance object TextInfo Derived ParserContext Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class provides information necessary for individual character sizes, but does not provide the required information to calculate vertical offsets and total line widths. For that, use the derived class ParserContext. Properties CurrentCSpace Gets or sets the current additional character spacing of the text. public float CurrentCSpace { get; set; } Property Value float CurrentCase Gets or sets the current case of the parser. public CaseStyle CurrentCase { get; set; } Property Value CaseStyle CurrentLineHeight Gets or sets the current line height of the parser. public float CurrentLineHeight { get; set; } Property Value float IsBold Gets or sets a value indicating whether or not the characters are currently bold. public bool IsBold { get; set; } Property Value bool IsMonospace Gets or sets a value indicating whether the characters are currently in monospace. public bool IsMonospace { get; set; } Property Value bool IsSuperOrSubScript Gets or sets a value indicating whether or not the parser is in subscript/superscript. public bool IsSuperOrSubScript { get; set; } Property Value bool Monospacing Gets or sets the monospacing of the text. public float Monospacing { get; set; } Property Value float Scale Gets or sets the scale of the parser. public float Scale { get; set; } Property Value float Size Gets or sets the current character of the parser. public float Size { get; set; } Property Value float"
  },
  "api/RueI.Parsing.html": {
    "href": "api/RueI.Parsing.html",
    "title": "Namespace RueI.Parsing | RueI",
    "keywords": "Namespace RueI.Parsing Classes ParserContext Describes the state of a parser at a time. RichTextTag Defines the base class for all rich text tags. TextInfo Provides information about TMP text at a certain point."
  },
  "api/RueI.Patches.HintPatch.html": {
    "href": "api/RueI.Patches.HintPatch.html",
    "title": "Class HintPatch | RueI",
    "keywords": "Class HintPatch Namespace RueI.Patches Assembly RueI.dll [HarmonyPatch(typeof(HintDisplay), \"Show\")] public static class HintPatch Inheritance object HintPatch Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods HandleAnonymousHint(NetworkConnection, Hint) public static void HandleAnonymousHint(NetworkConnection connection, Hint hint) Parameters connection NetworkConnection hint Hint Transpiler(IEnumerable<CodeInstruction>, ILGenerator) [HarmonyTranspiler] public static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions, ILGenerator generator) Parameters instructions IEnumerable<CodeInstruction> generator ILGenerator Returns IEnumerable<CodeInstruction>"
  },
  "api/RueI.Patches.html": {
    "href": "api/RueI.Patches.html",
    "title": "Namespace RueI.Patches | RueI",
    "keywords": "Namespace RueI.Patches Classes HintPatch"
  },
  "api/RueI.Records.MeasurementInfo.html": {
    "href": "api/RueI.Records.MeasurementInfo.html",
    "title": "Struct MeasurementInfo | RueI",
    "keywords": "Struct MeasurementInfo Namespace RueI.Records Assembly RueI.dll Defines a record that contains information about measurement info. public record struct MeasurementInfo : IEquatable<MeasurementInfo> Implements IEquatable<MeasurementInfo> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors MeasurementInfo(float, MeasurementStyle) Defines a record that contains information about measurement info. public MeasurementInfo(float Value, MeasurementStyle Style) Parameters Value float The value of the measurement. Style MeasurementStyle The style of the measurement. Properties Style The style of the measurement. public MeasurementStyle Style { readonly get; set; } Property Value MeasurementStyle Value The value of the measurement. public float Value { readonly get; set; } Property Value float Methods TryParse(string, out MeasurementInfo) Attempts to extract a MeasurementInfo from a string. public static bool TryParse(string content, out MeasurementInfo info) Parameters content string The content to parse. info MeasurementInfo The returned info, if true. Returns bool true if the string was valid, otherwise false."
  },
  "api/RueI.Records.ParsedData.html": {
    "href": "api/RueI.Records.ParsedData.html",
    "title": "Struct ParsedData | RueI",
    "keywords": "Struct ParsedData Namespace RueI.Records Assembly RueI.dll Defines a record that contains information used for displaying multiple elements. public record struct ParsedData : IEquatable<ParsedData> Implements IEquatable<ParsedData> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors ParsedData(string, float) Defines a record that contains information used for displaying multiple elements. public ParsedData(string Content, float Offset) Parameters Content string The element's content. Offset float The offset that should be applied. Equivalent to the total linebreaks within the element. Properties Content The element's content. public string Content { readonly get; set; } Property Value string Offset The offset that should be applied. Equivalent to the total linebreaks within the element. public float Offset { readonly get; set; } Property Value float"
  },
  "api/RueI.Records.ScheduledJob.html": {
    "href": "api/RueI.Records.ScheduledJob.html",
    "title": "Class ScheduledJob | RueI",
    "keywords": "Class ScheduledJob Namespace RueI.Records Assembly RueI.dll Defines a scheduled job for a Scheduler. public class ScheduledJob : IComparable<ScheduledJob> Inheritance object ScheduledJob Implements IComparable<ScheduledJob> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods IComparableExtensions.MaxIf<T>(T, bool, T) IComparableExtensions.Max<T>(T, T) Methods CompareTo(ScheduledJob) Compares this ScheduledJob to another job. public int CompareTo(ScheduledJob other) Parameters other ScheduledJob The other ScheduledJob. Returns int An int indicating whether or not the DateTimeOffset of this job comes before or after the other."
  },
  "api/RueI.Records.html": {
    "href": "api/RueI.Records.html",
    "title": "Namespace RueI.Records | RueI",
    "keywords": "Namespace RueI.Records Classes ScheduledJob Defines a scheduled job for a Scheduler. Structs MeasurementInfo Defines a record that contains information about measurement info. ParsedData Defines a record that contains information used for displaying multiple elements."
  },
  "api/RueI.Ruetility.html": {
    "href": "api/RueI.Ruetility.html",
    "title": "Class Ruetility | RueI",
    "keywords": "Class Ruetility Namespace RueI Assembly RueI.dll Provides helpful functions for dealing with elements and hints. public static class Ruetility Inheritance object Ruetility Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods FunctionalToScaledPosition(float) Converts a functional position into a scaled position. public static float FunctionalToScaledPosition(float position) Parameters position float The position to convert. Returns float The converted value. GetCleanText(string) Cleans a string by wrapping it in noparses, and removes any noparse closer tags existing in it already. public static string GetCleanText(string text) Parameters text string The string to clean. Returns string The cleaned string. ScaledPositionToFunctional(float) Converts a scaled position from 0-1000 into functional pixels (offset from baseline). public static float ScaledPositionToFunctional(float position) Parameters position float The position to convert. Returns float The converted value."
  },
  "api/RueI.ScreenDisplay-1.html": {
    "href": "api/RueI.ScreenDisplay-1.html",
    "title": "Class ScreenDisplay<T> | RueI",
    "keywords": "Class ScreenDisplay<T> Namespace RueI Assembly RueI.dll Represents a Display that hides elements based on an active screen. public class ScreenDisplay<T> : DisplayBase where T : Enum Type Parameters T The enum to be used as the screen identifier. Inheritance object DisplayBase ScreenDisplay<T> Inherited Members DisplayBase.IsActive DisplayBase.ReferenceHub DisplayBase.Coordinator DisplayBase.Delete() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ScreenDisplay(ReferenceHub, T) Initializes a new instance of the ScreenDisplay<T> class. public ScreenDisplay(ReferenceHub hub, T defaultScreen) Parameters hub ReferenceHub The ReferenceHub to assign the display to. defaultScreen T The default T to use as a screen. Properties CurrentScreen Gets or sets the current screen that the display is on. public T CurrentScreen { get; set; } Property Value T Remarks Updating this does not automatically update the display. Elements Gets a list of all IScreenElement<T>s of the display. public List<IScreenElement<T>> Elements { get; } Property Value List<IScreenElement<T>> Methods GetAllElements() Gets all of the elements of this display. public override IEnumerable<IElement> GetAllElements() Returns IEnumerable<IElement> The IEnumerator<T> of elements."
  },
  "api/RueI.ScreenDynamicElement-1.html": {
    "href": "api/RueI.ScreenDynamicElement-1.html",
    "title": "Class ScreenDynamicElement<T> | RueI",
    "keywords": "Class ScreenDynamicElement<T> Namespace RueI Assembly RueI.dll Represents a DynamicElement that it is tied to a number of screens. public class ScreenDynamicElement<T> : DynamicElement, IScreenElement<T>, IElement where T : Enum Type Parameters T The enum to be used as the screen identifier. Inheritance object DynamicElement ScreenDynamicElement<T> Implements IScreenElement<T> IElement Inherited Members DynamicElement.ContentGetter DynamicElement.Enabled DynamicElement.Position DynamicElement.ZIndex DynamicElement.ParsedData object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(IElement) Constructors ScreenDynamicElement(GetContent, T, float, int) Initializes a new instance of the ScreenDynamicElement<T> class. public ScreenDynamicElement(GetContent contentGetter, T screens, float position, int zIndex = 0) Parameters contentGetter GetContent A delegate returning the new content that will be ran every time the display is updated. screens T The screens that this element is visible on. position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. zIndex int A value determing the priority of the hint, where higher numbers means that it will render above hints with a lower number. Properties Screens Gets or sets the screens that this element is shown on. public T Screens { get; set; } Property Value T"
  },
  "api/RueI.ScreenSetElement-1.html": {
    "href": "api/RueI.ScreenSetElement-1.html",
    "title": "Class ScreenSetElement<T> | RueI",
    "keywords": "Class ScreenSetElement<T> Namespace RueI Assembly RueI.dll Represents a DynamicElement that is tied to a number of screens. public class ScreenSetElement<T> : SetElement, ISettable, IScreenElement<T>, IElement where T : Enum Type Parameters T The enum to be used as the screen identifier. Inheritance object SetElement ScreenSetElement<T> Implements ISettable IScreenElement<T> IElement Inherited Members SetElement.ParsedData SetElement.Enabled SetElement.Position SetElement.ZIndex SetElement.Set(string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(IElement) Constructors ScreenSetElement(T, float, int, string) Initializes a new instance of the ScreenSetElement<T> class. public ScreenSetElement(T screens, float position, int zIndex = 0, string content = \"\") Parameters screens T The screens that this element is visible on. position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. zIndex int A value determing the priority of the hint, where higher numbers means that it will render above hints with a lower number. content string The content to set the element to. Properties Screens Gets or sets the screens that this element is shown on. public T Screens { get; set; } Property Value T"
  },
  "api/RueI.SetElement.html": {
    "href": "api/RueI.SetElement.html",
    "title": "Class SetElement | RueI",
    "keywords": "Class SetElement Namespace RueI Assembly RueI.dll Represents a simple cached element with settable content. public class SetElement : ISettable, IElement Inheritance object SetElement Implements ISettable IElement Derived ScreenSetElement<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(IElement) Constructors SetElement(float, int, string) Initializes a new instance of the SetElement class. public SetElement(float position, int zIndex = 0, string content = \"\") Parameters position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. zIndex int A value determing the priority of the hint, where higher numbers means that it will render above hints with a lower number. content string The content to set the element to. Properties Enabled Gets or sets a value indicating whether or not this element is enabled and will show. public bool Enabled { get; set; } Property Value bool ParsedData Gets the data used for parsing. public ParsedData ParsedData { get; } Property Value ParsedData Position Gets or sets the position of the element on a scale from 0-1000, where 0 represents the bottom of the screen and 1000 represents the top. public float Position { get; set; } Property Value float ZIndex Gets or sets the priority of the hint (determining if it shows above another hint). public int ZIndex { get; set; } Property Value int Methods Set(string) Sets the content of this element. public virtual void Set(string content) Parameters content string The text to set the content to (will be parsed)."
  },
  "api/RueI.html": {
    "href": "api/RueI.html",
    "title": "Namespace RueI | RueI",
    "keywords": "Namespace RueI Classes AsScreen<TEnum, TWrapper> Provides a wrapper that enables screen functionality for elements that do not normally support. Constants Provides a variety of constant values. Display Represents a display attached to a DisplayCoordinator. DisplayBase Defines the base class for all displays. DisplayCoordinator Coordinates multiple PlayerDisplays. DynamicElement Represents a non-cached element that evaluates and parses a function when getting its content. EventHandler Handles events for RueI. Main Parser Helps parse the content of elements. ParserBuilder Builds Parsers. Ruetility Provides helpful functions for dealing with elements and hints. ScreenDisplay<T> Represents a Display that hides elements based on an active screen. ScreenDynamicElement<T> Represents a DynamicElement that it is tied to a number of screens. ScreenSetElement<T> Represents a DynamicElement that is tied to a number of screens. SetElement Represents a simple cached element with settable content. Interfaces IElement Represents the base class for all elements. IScreenElement<T> Represents an element that is shown when certain screens are active."
  },
  "api/eMEC.Cooldown.html": {
    "href": "api/eMEC.Cooldown.html",
    "title": "Class Cooldown | RueI",
    "keywords": "Class Cooldown Namespace eMEC Assembly RueI.dll Provides a way to implement a cooldown easily. public class Cooldown Inheritance object Cooldown Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Active Gets a value indicating whether or not the cooldown is active. public bool Active { get; } Property Value bool Length Gets or sets the current length of the cooldown. public TimeSpan Length { get; set; } Property Value TimeSpan TimeLeft Gets the amount of time left for the cooldown. public TimeSpan TimeLeft { get; } Property Value TimeSpan Methods Pause() Pauses the cooldown. public void Pause() Resume() Resume the cooldown if it is paused. public void Resume() Start(float) Starts the cooldown. public void Start(float length) Parameters length float In seconds, how long the cooldown should last. Start(TimeSpan) Starts the cooldown. public void Start(TimeSpan length) Parameters length TimeSpan How long the cooldown should last."
  },
  "api/eMEC.ITaskable.html": {
    "href": "api/eMEC.ITaskable.html",
    "title": "Interface ITaskable | RueI",
    "keywords": "Interface ITaskable Namespace eMEC Assembly RueI.dll Represents anything that deals with Tasks. public interface ITaskable Methods CleanUp() Recursvely cleans up this ITaskable. void CleanUp() DescendOrPerform(Action<TaskBase>) Recursively loops through the pool, or performs the action if this is a Task. void DescendOrPerform(Action<TaskBase> action) Parameters action Action<TaskBase> The Action<T> to perform."
  },
  "api/eMEC.MECExtensions.html": {
    "href": "api/eMEC.MECExtensions.html",
    "title": "Class MECExtensions | RueI",
    "keywords": "Class MECExtensions Namespace eMEC Assembly RueI.dll Provides extensions for working with MEC. The primary purpose is to provide better nullable functionality. public static class MECExtensions Inheritance object MECExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods IsRunning(CoroutineHandle) Gets whether or not a coroutine is running. public static bool IsRunning(this CoroutineHandle handle) Parameters handle CoroutineHandle The handle. Returns bool A bool indicating whether or not the coroutine is running. IsRunningOrPaused(CoroutineHandle) Gets whether or not a coroutine is running or paused. public static bool IsRunningOrPaused(this CoroutineHandle handle) Parameters handle CoroutineHandle The handle. Returns bool A bool indicating whether or not the coroutine is running or paused. Kill(CoroutineHandle) Kills a coroutine. public static void Kill(this CoroutineHandle handle) Parameters handle CoroutineHandle The handle to kill."
  },
  "api/eMEC.TaskBase.html": {
    "href": "api/eMEC.TaskBase.html",
    "title": "Class TaskBase | RueI",
    "keywords": "Class TaskBase Namespace eMEC Assembly RueI.dll Provides the base class for all tasks. public abstract class TaskBase : ITaskable Inheritance object TaskBase Implements ITaskable Derived UpdateTask Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TaskBase() Initializes a new instance of the TaskBase class. public TaskBase() TaskBase(TaskPool) Initializes a new instance of the TaskBase class. public TaskBase(TaskPool pool) Parameters pool TaskPool The pool to add Task to. Fields ch protected CoroutineHandle? ch Field Value CoroutineHandle? Properties IsRunning Gets a value indicating whether or not this task is currently running. public abstract bool IsRunning { get; } Property Value bool Methods CleanUp() Recursvely cleans up this ITaskable. public void CleanUp() DescendOrPerform(Action<TaskBase>) Performs an action on this task. public void DescendOrPerform(Action<TaskBase> action) Parameters action Action<TaskBase> The method to perform. End() Ends the task, without calling the method. public virtual void End() ~TaskBase() Finalizes an instance of the TaskBase class. protected ~TaskBase() ResetState() protected virtual void ResetState()"
  },
  "api/eMEC.TaskPool.html": {
    "href": "api/eMEC.TaskPool.html",
    "title": "Class TaskPool | RueI",
    "keywords": "Class TaskPool Namespace eMEC Assembly RueI.dll Manages a number of ITaskables and tasks. public class TaskPool : Collection<ITaskable>, IList<ITaskable>, ICollection<ITaskable>, IList, ICollection, IReadOnlyList<ITaskable>, IReadOnlyCollection<ITaskable>, IEnumerable<ITaskable>, IEnumerable, ITaskable Inheritance object Collection<ITaskable> TaskPool Implements IList<ITaskable> ICollection<ITaskable> IList ICollection IReadOnlyList<ITaskable> IReadOnlyCollection<ITaskable> IEnumerable<ITaskable> IEnumerable ITaskable Inherited Members Collection<ITaskable>.Add(ITaskable) Collection<ITaskable>.Clear() Collection<ITaskable>.CopyTo(ITaskable[], int) Collection<ITaskable>.Contains(ITaskable) Collection<ITaskable>.GetEnumerator() Collection<ITaskable>.IndexOf(ITaskable) Collection<ITaskable>.Insert(int, ITaskable) Collection<ITaskable>.Remove(ITaskable) Collection<ITaskable>.RemoveAt(int) Collection<ITaskable>.ClearItems() Collection<ITaskable>.InsertItem(int, ITaskable) Collection<ITaskable>.RemoveItem(int) Collection<ITaskable>.SetItem(int, ITaskable) Collection<ITaskable>.Count Collection<ITaskable>.Items Collection<ITaskable>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods CollectionExtensions.Add<T>(ICollection<T>, params T[]) IEnumerableExtensions.ToPooledList<T>(IEnumerable<T>) IEnumerableExtensions.ToPooledList<T>(IEnumerable<T>, int) Methods CleanUp() Recursvely cleans up this ITaskable. public void CleanUp() DescendOrPerform(Action<TaskBase>) Recursively loops through the pool, or performs the action if this is a Task. public void DescendOrPerform(Action<TaskBase> action) Parameters action Action<TaskBase> The Action<T> to perform. ~TaskPool() Finalizes an instance of the TaskPool class. protected ~TaskPool()"
  },
  "api/eMEC.UpdateTask.html": {
    "href": "api/eMEC.UpdateTask.html",
    "title": "Class UpdateTask | RueI",
    "keywords": "Class UpdateTask Namespace eMEC Assembly RueI.dll Represents a task that runs a method when finished. public class UpdateTask : TaskBase, ITaskable Inheritance object TaskBase UpdateTask Implements ITaskable Inherited Members TaskBase.ch TaskBase.CleanUp() TaskBase.End() TaskBase.DescendOrPerform(Action<TaskBase>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Action Gets or sets a method that will be run when the task is finished. public Action? Action { get; set; } Property Value Action ElapsedTime Gets how long the task has been running for. public TimeSpan? ElapsedTime { get; } Property Value TimeSpan? FinishesAt Gets how long the task has been running for. public DateTimeOffset? FinishesAt { get; } Property Value DateTimeOffset? IsRunning Gets a value indicating whether or not this task is currently running. public override bool IsRunning { get; } Property Value bool Length Gets the length of the task. public TimeSpan? Length { get; } Property Value TimeSpan? TimeLeft Gets the amount of time left until the task is finished. public TimeSpan? TimeLeft { get; } Property Value TimeSpan? Methods AddLength(TimeSpan) Adds a certain amount of time to the length of the task, if it is running. public void AddLength(TimeSpan toAdd) Parameters toAdd TimeSpan An amount of time to add. Remarks The timespan can be negative. If the new length is less than the elapsed time, the task will immediately finish. ChangeLength(TimeSpan) Sets the length of the task, if it is running. public void ChangeLength(TimeSpan newLength) Parameters newLength TimeSpan The new length. Remarks If the new length is less than the elapsed time, the task will immediately finish. Pause() Pauses the task. public void Pause() ResetState() Resets the state of the task to before it was started. protected override void ResetState() Resume() Resumes the task if it is paused. public void Resume() Start(float, Action) Starts the task. public void Start(float length, Action action) Parameters length float In seconds, how long to run the action for. action Action The action to run when finished. Start(TimeSpan, Action) Starts the task. public void Start(TimeSpan length, Action action) Parameters length TimeSpan How long to run the task for. action Action The action to run when finished. SubtractLength(TimeSpan) Subtracts a certain amount of time from the length of the task, if it is running. public void SubtractLength(TimeSpan toSubtract) Parameters toSubtract TimeSpan An amount of time to subtract. Remarks If the new length is less than the elapsed time, the task will immediately finish."
  },
  "api/eMEC.html": {
    "href": "api/eMEC.html",
    "title": "Namespace eMEC | RueI",
    "keywords": "Namespace eMEC Classes Cooldown Provides a way to implement a cooldown easily. MECExtensions Provides extensions for working with MEC. The primary purpose is to provide better nullable functionality. TaskBase Provides the base class for all tasks. TaskPool Manages a number of ITaskables and tasks. UpdateTask Represents a task that runs a method when finished. Interfaces ITaskable Represents anything that deals with Tasks."
  },
  "index.html": {
    "href": "index.html",
    "title": "RueI | RueI",
    "keywords": "RueI RueI is a hint framework for scp:sl. it provides the ability to show multiple hints at once, along with a lot of other features for server owners installing RueI is easy. download the dll, and move it into your dependencies folder for the plugin framework you are using. note that RueI requires Harmony 2.2.2, you can get that here."
  },
  "markdown/customtags.html": {
    "href": "markdown/customtags.html",
    "title": "Creating Custom Tags | RueI",
    "keywords": "Creating Custom Tags RueI supports creating custom rich text tags. all rich text tags should ultimately derive from RichTextTag. if you need certain parameter types, there are a few abstract subclasses that automatically parse their parameters. for measurement tags (e.g <line-height=5em>) use"
  },
  "markdown/eMec.html": {
    "href": "markdown/eMec.html",
    "title": "eMec | RueI",
    "keywords": "eMec eMec is a wrapper for MEC that is used by RueI. it is absolutely not necessary to use it in your own plugins, but it does provide some utility. the core of eMEC are Tasks (not to be confused with .NET Tasks)."
  },
  "markdown/getting-started.html": {
    "href": "markdown/getting-started.html",
    "title": "Getting Started | RueI",
    "keywords": "Getting Started"
  },
  "markdown/hintbuilding.html": {
    "href": "markdown/hintbuilding.html",
    "title": "HintBuilding Extensions | RueI",
    "keywords": "HintBuilding Extensions RueI provides extensions to StringBuilder through the HintBuilding class. this provides a large number of methods on StringBuilder to make adding tags easier and less error-prone. to use this, you first bring the class into scope: using RueI.Extensions.HintBuilding; then, you can use it like so: StringBuilder sb = new() .SetColor(255, 0, 0) .SetSize(1.5, MeasurementStyle.Ems) .Append(\"hello!\") .CloseColor() .CloseSize(); since all of the methods return the original StringBuilder, you can chain them easily."
  },
  "markdown/introduction.html": {
    "href": "markdown/introduction.html",
    "title": "Introduction | RueI",
    "keywords": "Introduction RueI is a hint framework for scp:sl."
  }
}