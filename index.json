{
  "README.html": {
    "href": "README.html",
    "title": "RueI | RueI",
    "keywords": "RueI RueI is a hint framework, designed to be the definitive way to display multiple hints at once. you can get the latest release here. docs are available here. if you want to develop using RueI, make sure you install the nuget package Features support for displaying multiple hints at once without them interfering with eachother cross-plugin compatibility custom tags and other utility scheduler system, which makes dealing with the hint ratelimit easier RueI is not a grid-based or line-based system, it calculates the offset necessary to put a hint at the same position no matter what Comments if you've encountered any bugs please make an issue (it helps me out a ton)"
  },
  "api/RueI.Constants.html": {
    "href": "api/RueI.Constants.html",
    "title": "Class Constants | RueI",
    "keywords": "Class Constants Namespace RueI Assembly RueI.dll Provides a variety of constant values. public static class Constants Inheritance object Constants Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class is mosty designed for internal use within RueI. However, it can still be useful for external use. Fields BOLDINCREASE Gets the pixel increase for bold characters. public const float BOLDINCREASE = 2.429 Field Value float CAPSTOSMALLCAPS Gets the multiplier used to convert the size of a capital character to a smallcaps character. public const float CAPSTOSMALLCAPS = 0.8 Field Value float DEFAULTHEIGHT Gets the default height if a line-height is not provided. public const float DEFAULTHEIGHT = 40.665 Field Value float Remarks Approximate. DEFAULTSIZE Gets the default size (in pixels) if a size is not provided. public const float DEFAULTSIZE = 34.7 Field Value float Remarks Not approximate. DISPLAYAREAWIDTH Gets the width of the display area (in pixels). public const float DISPLAYAREAWIDTH = 1200 Field Value float EMSTOPIXELS Gets how many pixels are in an em. public const float EMSTOPIXELS = 34.7 Field Value float HintRateLimit Gets the ratelimit used for displaying hints. public static readonly TimeSpan HintRateLimit Field Value TimeSpan MAXTAGNAMESIZE Gets the maximum name size allowed for a tag. public const int MAXTAGNAMESIZE = 13 Field Value int MEASUREMENTVALUELIMIT Gets the limit on measurement values. public const int MEASUREMENTVALUELIMIT = 32768 Field Value int ZeroWidthSpace Gets the zero width space. public const char ZeroWidthSpace = 'â€‹' Field Value char Properties Alignments Gets a ReadOnlyCollection<T> of valid alignments for AlignTag. public static ReadOnlyCollection<string> Alignments { get; } Property Value ReadOnlyCollection<string> Colors Gets a list of allowed colors for ColorTag. public static ReadOnlyCollection<string> Colors { get; } Property Value ReadOnlyCollection<string> ValidColorSizes Gets a list of allowed sizes of color param tags, ignoring the hashtag. public static ReadOnlyCollection<int> ValidColorSizes { get; } Property Value ReadOnlyCollection<int>"
  },
  "api/RueI.Displays.AutoElement.PeriodicUpdate.html": {
    "href": "api/RueI.Displays.AutoElement.PeriodicUpdate.html",
    "title": "Class AutoElement.PeriodicUpdate | RueI",
    "keywords": "Class AutoElement.PeriodicUpdate Namespace RueI.Displays Assembly RueI.dll Represents a periodic update for an AutoElement. public record AutoElement.PeriodicUpdate : IEquatable<AutoElement.PeriodicUpdate> Inheritance object AutoElement.PeriodicUpdate Implements IEquatable<AutoElement.PeriodicUpdate> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PeriodicUpdate(TimeSpan, int) Represents a periodic update for an AutoElement. public PeriodicUpdate(TimeSpan time, int priority = 10) Parameters time TimeSpan How often the AutoElement should schedule an auto-update. priority int The priority of the scheduled job. Properties priority The priority of the scheduled job. public int priority { get; init; } Property Value int time How often the AutoElement should schedule an auto-update. public TimeSpan time { get; init; } Property Value TimeSpan"
  },
  "api/RueI.Displays.AutoElement.html": {
    "href": "api/RueI.Displays.AutoElement.html",
    "title": "Class AutoElement | RueI",
    "keywords": "Class AutoElement Namespace RueI.Displays Assembly RueI.dll Manages and automatically assigns Element instances to any DisplayCore meeting a criteria. public class AutoElement Inheritance object AutoElement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks An AutoElement puts an Element in a DisplayCore if they match a Roles. You can use the AutoElement(Roles, Element) constructor for an AutoElement that assigns a single instance of an Element. On the other hand, if you want to create an element for each player, you can use the AutoElement(Roles, Func<DisplayCore, Element>) constructor. Constructors AutoElement(Roles, Element) Initializes a new instance of the AutoElement class. public AutoElement(Roles roles, Element element) Parameters roles Roles The Roles to use for the AutoElement. element Element The element to automatically give. AutoElement(Roles, Func<DisplayCore, Element>) Initializes a new instance of the AutoElement class. public AutoElement(Roles roles, Func<DisplayCore, Element> creator) Parameters roles Roles The Roles to use for the AutoElement. creator Func<DisplayCore, Element> A Func<T, TResult> that creates the elements. Properties Roles Gets or sets the roles that this AutoElement will give this element on. public Roles Roles { get; set; } Property Value Roles UpdateEvery Gets or sets a AutoElement.PeriodicUpdate indicating how often this AutoElement should schedule an update for players with the element, or null if it should not auto-update. public AutoElement.PeriodicUpdate? UpdateEvery { get; set; } Property Value AutoElement.PeriodicUpdate Methods Disable() Disables this AutoElement. public virtual void Disable() GiveTo(DisplayCore) Gives this AutoElement to a DisplayCore. protected virtual void GiveTo(DisplayCore core) Parameters core DisplayCore The DisplayCore to give to. RemoveFrom(DisplayCore) Removes this AutoElement from a DisplayCore. protected virtual void RemoveFrom(DisplayCore core) Parameters core DisplayCore The DisplayCore to give to."
  },
  "api/RueI.Displays.Display.html": {
    "href": "api/RueI.Displays.Display.html",
    "title": "Class Display | RueI",
    "keywords": "Class Display Namespace RueI.Displays Assembly RueI.dll Represents a basic display attached to a DisplayCore. public class Display : DisplayBase, IElementContainer Inheritance object DisplayBase Display Implements IElementContainer Inherited Members DisplayBase.IsActive DisplayBase.ReferenceHub DisplayBase.Coordinator DisplayBase.Update() DisplayBase.Delete() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Examples This example demonstrates creating and using a Display. Display display = new(referenceHub); // Create a new display from a ReferenceHub SetElement helloElem = new(300, zIndex: 10, \"hello\").AddTo(display); SetElement worldElem = new(250, zIndex: 10, \"world\").AddTo(display); display.Update(); // Update the display Constructors Display(ReferenceHub) Initializes a new instance of the Display class. public Display(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to assign the display to. Display(DisplayCore) Initializes a new instance of the Display class. public Display(DisplayCore coordinator) Parameters coordinator DisplayCore The DisplayCore to assign the display to. Properties Elements Gets the elements of this display. public List<Element> Elements { get; } Property Value List<Element> Methods GetAllElements() Gets all of the elements of this display. public override IEnumerable<Element> GetAllElements() Returns IEnumerable<Element> The IEnumerator<T> of elements."
  },
  "api/RueI.Displays.DisplayBase.html": {
    "href": "api/RueI.Displays.DisplayBase.html",
    "title": "Class DisplayBase | RueI",
    "keywords": "Class DisplayBase Namespace RueI.Displays Assembly RueI.dll Defines the base class for all displays. public abstract class DisplayBase Inheritance object DisplayBase Derived Display ScreenDisplay Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DisplayBase(ReferenceHub) Initializes a new instance of the DisplayBase class. public DisplayBase(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to assign the display to. DisplayBase(DisplayCore) Initializes a new instance of the DisplayBase class. public DisplayBase(DisplayCore coordinator) Parameters coordinator DisplayCore The DisplayCore to assign the display to. Properties Coordinator Gets the DisplayCore that this display is attached to. public DisplayCore Coordinator { get; } Property Value DisplayCore IsActive Gets a value indicating whether or not this display is active. public bool IsActive { get; } Property Value bool ReferenceHub Gets the ReferenceHub that this display is assigned to. public ReferenceHub ReferenceHub { get; } Property Value ReferenceHub Methods Delete() Deletes this display, removing it from the player's core. public void Delete() GetAllElements() Gets all of the elements of this display. public abstract IEnumerable<Element> GetAllElements() Returns IEnumerable<Element> The IEnumerator<T> of elements. Update() Updates the parent DisplayCore of this DisplayBase. public void Update()"
  },
  "api/RueI.Displays.DisplayCore.html": {
    "href": "api/RueI.Displays.DisplayCore.html",
    "title": "Class DisplayCore | RueI",
    "keywords": "Class DisplayCore Namespace RueI.Displays Assembly RueI.dll Manages all of the DisplayBases for a ReferenceHub. public class DisplayCore Inheritance object DisplayCore Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods DisplayCoreExtensions.AddTemp<T>(DisplayCore, T, TimeSpan, TimedElemRef<T>) DisplayCoreExtensions.SetElemTemp(DisplayCore, string, float, TimeSpan, TimedElemRef<SetElement>) DisplayCoreExtensions.SetElemTempFunctional(DisplayCore, string, float, TimeSpan, TimedElemRef<SetElement>) DisplayCoreExtensions.SetElementOrNew(DisplayCore, IElemReference<SetElement>, string, float) Constructors DisplayCore(ReferenceHub) Initializes a new instance of the DisplayCore class. protected DisplayCore(ReferenceHub hub) Parameters hub ReferenceHub The hub to create the display for. Properties Hub Gets the ReferenceHub that this display is for. public ReferenceHub Hub { get; } Property Value ReferenceHub Scheduler Gets the Scheduler for this DisplayCore. public Scheduler Scheduler { get; } Property Value Scheduler Methods AddAsReference<T>(IElemReference<T>, T) Adds an Element as an IElemReference<T>. public void AddAsReference<T>(IElemReference<T> reference, T element) where T : Element Parameters reference IElemReference<T> The IElemReference<T> to use. element T The Element to add. Type Parameters T The type of the Element to add. Get(ReferenceHub) Gets a DisplayCore from a ReferenceHub, or creates it if it doesn't exist. public static DisplayCore Get(ReferenceHub hub) Parameters hub ReferenceHub The hub to get the display for. Returns DisplayCore The DisplayCore. Remarks This method will never fail nor return null. GetElementOrNew<T>(IElemReference<T>, Func<T>) Gets an Element as T, or creates it. public T GetElementOrNew<T>(IElemReference<T> reference, Func<T> creator) where T : Element Parameters reference IElemReference<T> The IElemReference<T> to use. creator Func<T> A function that creates a new instance of T if it does not exist. Returns T The instance of T. Type Parameters T The type of the Element to get. GetElement<T>(IElemReference<T>) Gets an Element as T if the IElemReference<T> exists within this DisplayCore's element references. public T? GetElement<T>(IElemReference<T> reference) where T : Element Parameters reference IElemReference<T> The IElemReference<T> to use. Returns T The instance of T if the Element exists within the DisplayCore's element references, otherwise null. Type Parameters T The type of the Element to get. GetReference<T>() Gets a new IElemReference<T>. public static IElemReference<T> GetReference<T>() where T : Element Returns IElemReference<T> A new, unique IElemReference<T>. Type Parameters T The type of the element. GetText() Gets the text of this DisplayCore. public string GetText() Returns string The text that is combined to become a single hint. RemoveReference<T>(IElemReference<T>) Removes a IElemReference<T> from this DisplayCore. public void RemoveReference<T>(IElemReference<T> reference) where T : Element Parameters reference IElemReference<T> The IElemReference<T> to remove. Type Parameters T The type of the Element to remove. Update(int) Updates this DisplayCore. public void Update(int priority = 10) Parameters priority int The priority of the update - defaults to 10."
  },
  "api/RueI.Displays.ElemCombiner.html": {
    "href": "api/RueI.Displays.ElemCombiner.html",
    "title": "Class ElemCombiner | RueI",
    "keywords": "Class ElemCombiner Namespace RueI.Displays Assembly RueI.dll Provides a means of combining Elements. public static class ElemCombiner Inheritance object ElemCombiner Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The ElemCombiner is a helper class that combines all of the Elements for a DisplayCore into a single string, to be displayed as a hint. Methods CalculateOffset(float, float, float) Calculates the offset for two hints. public static float CalculateOffset(float hintOnePos, float hintOneTotalLines, float hintTwoPos) Parameters hintOnePos float The first hint's vertical position. hintOneTotalLines float The first hint's total line-height, excluding the vertical position. hintTwoPos float The second hint's vertical position. Returns float A float indicating the new offset. Combine(DisplayCore, IEnumerable<Element>) Combines multiple Elements into a string. public static string Combine(DisplayCore core, IEnumerable<Element> enumElems) Parameters core DisplayCore The DisplayCore of the player. enumElems IEnumerable<Element> The IEnumerable<T> of Elements to combine. Returns string A string with all of the combined Elements."
  },
  "api/RueI.Displays.IElemReference-1.html": {
    "href": "api/RueI.Displays.IElemReference-1.html",
    "title": "Interface IElemReference<T> | RueI",
    "keywords": "Interface IElemReference<T> Namespace RueI.Displays Assembly RueI.dll Represents a reference to an element present within any number of player's displays. public interface IElemReference<out T> where T : Element Type Parameters T The type of the element to act as a reference to."
  },
  "api/RueI.Displays.Interfaces.IElementContainer.html": {
    "href": "api/RueI.Displays.Interfaces.IElementContainer.html",
    "title": "Interface IElementContainer | RueI",
    "keywords": "Interface IElementContainer Namespace RueI.Displays.Interfaces Assembly RueI.dll Defines a container for multiple elements. public interface IElementContainer Properties Elements Gets the elements of this IElementContainer. List<Element> Elements { get; } Property Value List<Element>"
  },
  "api/RueI.Displays.Interfaces.html": {
    "href": "api/RueI.Displays.Interfaces.html",
    "title": "Namespace RueI.Displays.Interfaces | RueI",
    "keywords": "Namespace RueI.Displays.Interfaces Interfaces IElementContainer Defines a container for multiple elements."
  },
  "api/RueI.Displays.Roles.html": {
    "href": "api/RueI.Displays.Roles.html",
    "title": "Enum Roles | RueI",
    "keywords": "Enum Roles Namespace RueI.Displays Assembly RueI.dll Provides a means for describing multiple RoleTypeIds. [Flags] public enum Roles Extension Methods EnumExtensions.HasFlagFast(Roles, RoleTypeId) EnumExtensions.HasFlagFast(Roles, Roles) Fields Alive Gets all of the role ids for roles considered to be alive. All Gets all role ids. ChaosConscript Gets the Chaos Conscript role id. ChaosMarauder Gets the Chaos Marauder role id. ChaosRepressor Gets the Chaos Repressor role id. ChaosRifleman Gets the Chaos Rifleman role id. ChaosRoles Gets all of the Chaos role ids. CivilianRoles Gets all of the civilian role ids. ClassD Gets the Class-D role id. CustomRole Gets the custom role id. Dead Gets all of the role ids for roles considered to be dead. FacilityGuard Gets the Facility Guard role id. Filmmaker Gets the Filmmaker role id. HumanRoles Gets all of the human role ids. MilitaryRoles Gets all of the military role ids. NtfCaptain Gets the NTF Captain role id. NtfPrivate Gets the NTF Private role id. NtfRoles Gets all of the NTF role ids, including Facility Guards. NtfSergeant Gets the NTF Sergeant role id. NtfSpecialist Gets the NTF Specialist role id. Overwatch Gets the Overwatch role id. Scientist Gets the Scientist role id. Scp049 Gets the SCP-049 role id. Scp0492 Gets the SCP-049-2 role id. Scp079 Gets the SCP-079 role id. Scp096 Gets the SCP-096 role id. Scp106 Gets the SCP-106 role id. Scp173 Gets the SCP-173 role id. Scp3114 Gets the SCP-3114 role id. Scp939 Gets the SCP-939 role id. Scps Gets all of the SCP role ids, including SCP-049-2. ScpsNo0492 Gets all of the SCP role ids, excluding SCP-049-2. Spectator Gets the Specatator role id. Tutorial Gets the Tutorial role id. Examples This example shows how Roles can be used to perform bitfield operations with RoleTypeIds. // the | (pipe) is the bitwise OR operator // it combines the bits of all of the provided fields // 1010 | 1100 -> 1110 Roles roles = Roles.CivilianRoles | Roles.FacilityGuard | Roles.ScpsNo0492; // all things that can spawn in at the start of the game // using RueI.Extensions.HasFlagFast because it is much quicker roles.HasFlagFast(Roles.ChaosRifleman); // -> false roles.HasFlagFast(Roles.Scientist); // -> true Remarks The purpose of the Roles enum is to enable roles to be treated like a FlagsAttribute enum. Normally, RoleTypeId cannot be treated like bit flags, so this acts as a fast and convenient way to do so."
  },
  "api/RueI.Displays.Scheduling.Cooldown.html": {
    "href": "api/RueI.Displays.Scheduling.Cooldown.html",
    "title": "Class Cooldown | RueI",
    "keywords": "Class Cooldown Namespace RueI.Displays.Scheduling Assembly RueI.dll Provides a way to implement a cooldown easily. public class Cooldown Inheritance object Cooldown Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Active Gets a value indicating whether or not the cooldown is active. public bool Active { get; } Property Value bool Length Gets or sets the current length of the cooldown. public TimeSpan Length { get; set; } Property Value TimeSpan TimeLeft Gets the amount of time left for the cooldown. public TimeSpan TimeLeft { get; } Property Value TimeSpan Methods Pause() Pauses the cooldown. public void Pause() Resume() Resume the cooldown if it is paused. public void Resume() Start(float) Starts the cooldown. public void Start(float length) Parameters length float In seconds, how long the cooldown should last. Start(TimeSpan) Starts the cooldown. public void Start(TimeSpan length) Parameters length TimeSpan How long the cooldown should last."
  },
  "api/RueI.Displays.Scheduling.JobToken.html": {
    "href": "api/RueI.Displays.Scheduling.JobToken.html",
    "title": "Class JobToken | RueI",
    "keywords": "Class JobToken Namespace RueI.Displays.Scheduling Assembly RueI.dll Represents a reference to any number of ScheduledJob. public class JobToken Inheritance object JobToken Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks A JobToken provides a unique identifier for a ScheduledJob within any number of Schedulers. In other words, a JobToken can reference multiple (or no) jobs, but only a single job with the given JobToken can exist in a Scheduler. Constructors JobToken() Initializes a new instance of the JobToken class. public JobToken() See Also ScheduledJob"
  },
  "api/RueI.Displays.Scheduling.RateLimiter.html": {
    "href": "api/RueI.Displays.Scheduling.RateLimiter.html",
    "title": "Class RateLimiter | RueI",
    "keywords": "Class RateLimiter Namespace RueI.Displays.Scheduling Assembly RueI.dll Provides a way to ratelimit actions or detect ratelimits. public class RateLimiter Inheritance object RateLimiter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The RateLimiter operates using a simple token bucket ratelimiting algorithm. Constructors RateLimiter(int, TimeSpan) Initializes a new instance of the RateLimiter class. public RateLimiter(int tokenLimit, TimeSpan regenRate) Parameters tokenLimit int The maximum number of tokens and the default number of tokens. regenRate TimeSpan How quickly tokens are regenerated after they have been consumed. Properties HasTokens Gets a value indicating whether or not this ratelimiter has a token available. public bool HasTokens { get; } Property Value bool RegenRate Gets or sets the regeneration rate for this ratelimiter. public TimeSpan RegenRate { get; set; } Property Value TimeSpan TokenLimit Gets or sets the limit on tokens in this ratelimiter. public int TokenLimit { get; set; } Property Value int Tokens Gets the number of tokens available in this ratelimiter. public int Tokens { get; } Property Value int Methods Consume() Consumes a token from this ratelimiter. public void Consume() TryConsume() Tries to consume a token from this ratelimiter. public bool TryConsume() Returns bool A value indicating whether or not this RateLimiter has a token available. See Also Scheduler"
  },
  "api/RueI.Displays.Scheduling.ScheduledJob.html": {
    "href": "api/RueI.Displays.Scheduling.ScheduledJob.html",
    "title": "Class ScheduledJob | RueI",
    "keywords": "Class ScheduledJob Namespace RueI.Displays.Scheduling Assembly RueI.dll Defines a scheduled job for a Scheduler. public class ScheduledJob : IComparable<ScheduledJob> Inheritance object ScheduledJob Implements IComparable<ScheduledJob> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CompareTo(ScheduledJob) Compares this ScheduledJob to another job. public int CompareTo(ScheduledJob other) Parameters other ScheduledJob The other ScheduledJob. Returns int An int indicating whether or not the DateTimeOffset of this job comes before or after the other. See Also Scheduler JobToken"
  },
  "api/RueI.Displays.Scheduling.Scheduler.html": {
    "href": "api/RueI.Displays.Scheduling.Scheduler.html",
    "title": "Class Scheduler | RueI",
    "keywords": "Class Scheduler Namespace RueI.Displays.Scheduling Assembly RueI.dll Provides a means of doing batch operations. public class Scheduler Inheritance object Scheduler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The Scheduler is a powerful class that enables \"batch operations\". This means that multiple updates to a display can happen at once, helping to avoid the hint ratelimit. More detailed information is available at Using the Scheduler. Methods CalculateWeighted(IEnumerable<ScheduledJob>) Calculates the weighted time for a list of jobs to be performed. public static DateTimeOffset CalculateWeighted(IEnumerable<ScheduledJob> jobs) Parameters jobs IEnumerable<ScheduledJob> The ScheduledJob operations to schedule. Returns DateTimeOffset The weighted DateTimeOffset of all of the jobs. KillJob(JobToken) Attempts to kill the ScheduledJob with the JobToken. public void KillJob(JobToken token) Parameters token JobToken The JobToken to use as a reference. ReplaceJob(TimeSpan, Action, JobToken, int) Replaces the ScheduledJob with the JobToken with a new job. public void ReplaceJob(TimeSpan time, Action action, JobToken token, int priority = 1) Parameters time TimeSpan How long into the future to run the action at. action Action The Action to run. token JobToken An optional token to assign to the ScheduledJob. priority int The priority of the job. Schedule(ScheduledJob) Schedules a ScheduledJob. public void Schedule(ScheduledJob job) Parameters job ScheduledJob The job to schedule. Schedule(ScheduledJob, params ScheduledJob[]) Schedules multiple ScheduledJob operations. public void Schedule(ScheduledJob job, params ScheduledJob[] jobs) Parameters job ScheduledJob The first ScheduledJob to schedule. jobs ScheduledJob[] The rest of the ScheduledJob operations to schedule. Remarks When scheduling multiple jobs at a time, this method is preferred to calling Schedule(ScheduledJob) several times since it only recalculates the batches once. Schedule(IEnumerable<ScheduledJob>) Schedules multiple ScheduledJob operations. public void Schedule(IEnumerable<ScheduledJob> jobs) Parameters jobs IEnumerable<ScheduledJob> The jobs to schedule. Remarks When scheduling multiple jobs at a time, this method is preferred to calling Schedule(ScheduledJob) several times since it only recalculates the batches once. Schedule(TimeSpan, Action, JobToken?) Schedules a ScheduledJob with a priority of 1. public void Schedule(TimeSpan time, Action action, JobToken? token = null) Parameters time TimeSpan How long into the future to run the action at. action Action The Action to run. token JobToken An optional token to assign to the ScheduledJob. Schedule(TimeSpan, Action, int, JobToken?) Schedules a new ScheduledJob. public void Schedule(TimeSpan time, Action action, int priority, JobToken? token = null) Parameters time TimeSpan How long into the future to run the action at. action Action The Action to run. priority int The priority of the job, giving it additional weight when calculating. token JobToken An optional token to assign to the ScheduledJob. ScheduleUpdate(TimeSpan, int) Schedules an uncancellable update ScheduledJob. public void ScheduleUpdate(TimeSpan time, int priority) Parameters time TimeSpan How long into the future to update at. priority int The priority of the ScheduledJob, giving it additional weight when calculating. ScheduleUpdateToken(TimeSpan, int, JobToken) Schedules an update ScheduledJob with the JobToken. public void ScheduleUpdateToken(TimeSpan time, int priority, JobToken token) Parameters time TimeSpan How long into the future to update at. priority int The priority of the ScheduledJob, giving it additional weight when calculating. token JobToken A token to assign to the ScheduledJob."
  },
  "api/RueI.Displays.Scheduling.TimedElemRef-1.html": {
    "href": "api/RueI.Displays.Scheduling.TimedElemRef-1.html",
    "title": "Class TimedElemRef<T> | RueI",
    "keywords": "Class TimedElemRef<T> Namespace RueI.Displays.Scheduling Assembly RueI.dll Represents a IElemReference<T> with an associated JobToken. public class TimedElemRef<T> : IElemReference<T> where T : Element Type Parameters T The type of the element. Inheritance object TimedElemRef<T> Implements IElemReference<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks A TimedElemRef<T> is an IElemReference<T> that also provides a JobToken, allowing for both of these to be easily stored together. Properties JobToken Gets the JobToken for this element reference. public JobToken JobToken { get; } Property Value JobToken"
  },
  "api/RueI.Displays.Scheduling.html": {
    "href": "api/RueI.Displays.Scheduling.html",
    "title": "Namespace RueI.Displays.Scheduling | RueI",
    "keywords": "Namespace RueI.Displays.Scheduling Classes Cooldown Provides a way to implement a cooldown easily. JobToken Represents a reference to any number of ScheduledJob. RateLimiter Provides a way to ratelimit actions or detect ratelimits. ScheduledJob Defines a scheduled job for a Scheduler. Scheduler Provides a means of doing batch operations. TimedElemRef<T> Represents a IElemReference<T> with an associated JobToken."
  },
  "api/RueI.Displays.Screen.html": {
    "href": "api/RueI.Displays.Screen.html",
    "title": "Class Screen | RueI",
    "keywords": "Class Screen Namespace RueI.Displays Assembly RueI.dll Represents a IElementContainer inside a ScreenDisplay. public class Screen : IElementContainer Inheritance object Screen Implements IElementContainer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Screen() Initializes a new instance of the Screen class. public Screen() Screen(ScreenDisplay) Initializes a new instance of the Screen class. public Screen(ScreenDisplay scrDisplay) Parameters scrDisplay ScreenDisplay The ScreenDisplay to add this to. Properties Elements Gets the elements of this screen. public List<Element> Elements { get; } Property Value List<Element>"
  },
  "api/RueI.Displays.ScreenDisplay.html": {
    "href": "api/RueI.Displays.ScreenDisplay.html",
    "title": "Class ScreenDisplay | RueI",
    "keywords": "Class ScreenDisplay Namespace RueI.Displays Assembly RueI.dll Represents a display attached to a DisplayCore with support for Screens. public class ScreenDisplay : DisplayBase Inheritance object DisplayBase ScreenDisplay Inherited Members DisplayBase.IsActive DisplayBase.ReferenceHub DisplayBase.Coordinator DisplayBase.Update() DisplayBase.Delete() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks A ScreenDisplay is a version of the Display that contains a list of Screens. A Screen acts as a container for Elements, and only one can be active in a ScreenDisplay at a time. Constructors ScreenDisplay(ReferenceHub, Screen) Initializes a new instance of the ScreenDisplay class. public ScreenDisplay(ReferenceHub hub, Screen screen) Parameters hub ReferenceHub The ReferenceHub to assign the display to. screen Screen The default Screen to use for this ScreenDisplay. ScreenDisplay(DisplayCore, Screen) Initializes a new instance of the ScreenDisplay class. public ScreenDisplay(DisplayCore coordinator, Screen screen) Parameters coordinator DisplayCore The DisplayCore to assign the display to. screen Screen The default Screen to use for this ScreenDisplay. Properties CurrentScreen Gets the current screen of this display. public Screen CurrentScreen { get; } Property Value Screen GlobalElements Gets the elements of this display that will be displayed regardless of screen. public List<Element> GlobalElements { get; } Property Value List<Element> Screens Gets all of the screens of this display. public List<Screen> Screens { get; } Property Value List<Screen> Methods GetAllElements() Gets all of the elements of this display. public override IEnumerable<Element> GetAllElements() Returns IEnumerable<Element> The IEnumerator<T> of elements. SetScreen(Screen) Sets the CurrentScreen of this display. public void SetScreen(Screen screen) Parameters screen Screen The Screen to set the CurrentScreen to. Exceptions ArgumentOutOfRangeException Thrown when screen is not a Screen within Screens."
  },
  "api/RueI.Displays.html": {
    "href": "api/RueI.Displays.html",
    "title": "Namespace RueI.Displays | RueI",
    "keywords": "Namespace RueI.Displays Classes AutoElement Manages and automatically assigns Element instances to any DisplayCore meeting a criteria. AutoElement.PeriodicUpdate Represents a periodic update for an AutoElement. Display Represents a basic display attached to a DisplayCore. DisplayBase Defines the base class for all displays. DisplayCore Manages all of the DisplayBases for a ReferenceHub. ElemCombiner Provides a means of combining Elements. Screen Represents a IElementContainer inside a ScreenDisplay. ScreenDisplay Represents a display attached to a DisplayCore with support for Screens. Interfaces IElemReference<T> Represents a reference to an element present within any number of player's displays. Enums Roles Provides a means for describing multiple RoleTypeIds."
  },
  "api/RueI.Elements.Delegates.GetContent.html": {
    "href": "api/RueI.Elements.Delegates.GetContent.html",
    "title": "Delegate GetContent | RueI",
    "keywords": "Delegate GetContent Namespace RueI.Elements.Delegates Assembly RueI.dll Defines a method used to get content for an element. public delegate string GetContent(DisplayCore hub) Parameters hub DisplayCore The DisplayCore of the player. Returns string A string with the new content."
  },
  "api/RueI.Elements.Delegates.html": {
    "href": "api/RueI.Elements.Delegates.html",
    "title": "Namespace RueI.Elements.Delegates | RueI",
    "keywords": "Namespace RueI.Elements.Delegates Delegates GetContent Defines a method used to get content for an element."
  },
  "api/RueI.Elements.DynamicElement.html": {
    "href": "api/RueI.Elements.DynamicElement.html",
    "title": "Class DynamicElement | RueI",
    "keywords": "Class DynamicElement Namespace RueI.Elements Assembly RueI.dll Represents a non-cached element that evaluates and parses a function when getting its content. public class DynamicElement : Element, ISettableOptions Inheritance object Element DynamicElement Implements ISettableOptions Inherited Members Element.Enabled Element.Position Element.ZIndex Element.Parser object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(Element) Remarks The content of this element is re-evaluated by calling a function every time the display is updated. This makes it suitable for scenarios where you need to have information constantly updated. For example, you may use this to display the health of SCPs in an SCP list. Constructors DynamicElement(GetContent, float) Initializes a new instance of the DynamicElement class. public DynamicElement(GetContent contentGetter, float position) Parameters contentGetter GetContent A delegate returning the new content that will be ran every time the display is updated. position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. Properties ContentGetter Gets or sets a method that returns the new content and is called every time the display is updated. public GetContent ContentGetter { get; set; } Property Value GetContent Options Gets or sets the options for this element. public ElementOptions Options { get; set; } Property Value ElementOptions Methods GetParsedData(DisplayCore) Gets the data used for parsing. protected override ParsedData GetParsedData(DisplayCore core) Parameters core DisplayCore The DisplayCore of the player. Returns ParsedData The ParsedData for the element. Remarks This contains information used to ensure that multiple elements can be displayed at once. To obtain this, you must use Parse(string, ElementOptions)."
  },
  "api/RueI.Elements.Element.html": {
    "href": "api/RueI.Elements.Element.html",
    "title": "Class Element | RueI",
    "keywords": "Class Element Namespace RueI.Elements Assembly RueI.dll Represents the base class for all elements, which are individual 'hints' present within an arbitrary number of Displays. public abstract class Element Inheritance object Element Derived DynamicElement FixedElement SetElement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(Element) Remarks An Element is how text is displayed within RueI. Each Element acts like an individual Hints.Hint, and cannot influence other Elements. Constructors Element(float) Initializes a new instance of the Element class. public Element(float position) Parameters position float The position of the element, where 0 represents the bottom of the screen and 1000 represents the top. Properties Enabled Gets or sets a value indicating whether or not this element is enabled and will show. public bool Enabled { get; set; } Property Value bool Options Gets or sets the options for this element. public virtual ElementOptions Options { get; protected set; } Property Value ElementOptions Parser Gets or sets the Parser currently in use by this Element. public Parser Parser { get; set; } Property Value Parser Remarks Implementations should default this to DefaultParser. Position Gets or sets the position of the element on a scale from 0-1000, where 0 represents the bottom of the screen and 1000 represents the top. public float Position { get; set; } Property Value float ZIndex Gets or sets the priority of the hint (determining if it shows above another hint). public int ZIndex { get; set; } Property Value int Methods GetParsedData(DisplayCore) Gets the data used for parsing. protected abstract ParsedData GetParsedData(DisplayCore core) Parameters core DisplayCore The DisplayCore of the player. Returns ParsedData The ParsedData for the element. Remarks This contains information used to ensure that multiple elements can be displayed at once. To obtain this, you must use Parse(string, ElementOptions)."
  },
  "api/RueI.Elements.Enums.ElementOptions.html": {
    "href": "api/RueI.Elements.Enums.ElementOptions.html",
    "title": "Enum ElementOptions | RueI",
    "keywords": "Enum ElementOptions Namespace RueI.Elements.Enums Assembly RueI.dll Provides options for elements. [Flags] public enum ElementOptions Extension Methods EnumExtensions.HasFlagFast(ElementOptions, ElementOptions) Fields Default = 0 Gets the default element settings. NoparseParsesEscape = 1 Indicates whether or not noparse parses escape sequences like \\r, \\u, and \\n. PreserveSpacing = 2 Indicates whether or not the vertical spacing of an element affects the baseline. UseFunctionalPosition = 4 Indicates whether or not to automatically use functional positioning for the element. Vanilla = NoparseParsesEscape | PreserveSpacing | UseFunctionalPosition Gets the vanilla options for hints. Remarks The ElementOptions enum is a bitwise flag enum. This means that the values of this enum are not mutually exclusive. You can combine values using the bitwise OR operator | to specify that multiple options should be used."
  },
  "api/RueI.Elements.Enums.html": {
    "href": "api/RueI.Elements.Enums.html",
    "title": "Namespace RueI.Elements.Enums | RueI",
    "keywords": "Namespace RueI.Elements.Enums Enums ElementOptions Provides options for elements."
  },
  "api/RueI.Elements.FixedElement.html": {
    "href": "api/RueI.Elements.FixedElement.html",
    "title": "Class FixedElement | RueI",
    "keywords": "Class FixedElement Namespace RueI.Elements Assembly RueI.dll Represents a cached element with a fixed content. public class FixedElement : Element Inheritance object Element FixedElement Inherited Members Element.Enabled Element.Position Element.ZIndex Element.Parser Element.Options object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(Element) Constructors FixedElement(float, string, ElementOptions, Parser?) Initializes a new instance of the FixedElement class. public FixedElement(float position, string content, ElementOptions options = ElementOptions.Default, Parser? parser = null) Parameters position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. content string The content to set the element to. options ElementOptions The options of the element. parser Parser A Parser to use, or null to use the default parser. Methods GetParsedData(DisplayCore) Gets the data used for parsing. protected override ParsedData GetParsedData(DisplayCore core) Parameters core DisplayCore The DisplayCore of the player. Returns ParsedData The ParsedData for the element. Remarks This contains information used to ensure that multiple elements can be displayed at once. To obtain this, you must use Parse(string, ElementOptions)."
  },
  "api/RueI.Elements.Interfaces.ISettable.html": {
    "href": "api/RueI.Elements.Interfaces.ISettable.html",
    "title": "Interface ISettable | RueI",
    "keywords": "Interface ISettable Namespace RueI.Elements.Interfaces Assembly RueI.dll Defines an Element that can be set. public interface ISettable Properties Content Gets or sets the content of this element. string Content { get; set; } Property Value string"
  },
  "api/RueI.Elements.Interfaces.ISettableOptions.html": {
    "href": "api/RueI.Elements.Interfaces.ISettableOptions.html",
    "title": "Interface ISettableOptions | RueI",
    "keywords": "Interface ISettableOptions Namespace RueI.Elements.Interfaces Assembly RueI.dll Defines an Element with options that can be set. public interface ISettableOptions Properties Options Gets or sets the ElementOptions of this element. ElementOptions Options { get; set; } Property Value ElementOptions"
  },
  "api/RueI.Elements.Interfaces.html": {
    "href": "api/RueI.Elements.Interfaces.html",
    "title": "Namespace RueI.Elements.Interfaces | RueI",
    "keywords": "Namespace RueI.Elements.Interfaces Interfaces ISettable Defines an Element that can be set. ISettableOptions Defines an Element with options that can be set."
  },
  "api/RueI.Elements.SetElement.html": {
    "href": "api/RueI.Elements.SetElement.html",
    "title": "Class SetElement | RueI",
    "keywords": "Class SetElement Namespace RueI.Elements Assembly RueI.dll Represents a simple cached element with settable content. public class SetElement : Element, ISettable Inheritance object Element SetElement Implements ISettable Inherited Members Element.Enabled Element.Position Element.ZIndex Element.Parser object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(Element) Constructors SetElement(float, string) Initializes a new instance of the SetElement class. public SetElement(float position, string content = \"\") Parameters position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. content string The content to set the element to. Properties Content Gets or sets the content of this element. public virtual string Content { get; set; } Property Value string Options Gets or sets the options for this element. public ElementOptions Options { get; set; } Property Value ElementOptions Methods GetParsedData(DisplayCore) Gets the data used for parsing. protected override ParsedData GetParsedData(DisplayCore _) Parameters _ DisplayCore Returns ParsedData The ParsedData for the element. Remarks This contains information used to ensure that multiple elements can be displayed at once. To obtain this, you must use Parse(string, ElementOptions)."
  },
  "api/RueI.Elements.html": {
    "href": "api/RueI.Elements.html",
    "title": "Namespace RueI.Elements | RueI",
    "keywords": "Namespace RueI.Elements Classes DynamicElement Represents a non-cached element that evaluates and parses a function when getting its content. Element Represents the base class for all elements, which are individual 'hints' present within an arbitrary number of Displays. FixedElement Represents a cached element with a fixed content. SetElement Represents a simple cached element with settable content."
  },
  "api/RueI.Events.DisplayUpdatedEventArgs.html": {
    "href": "api/RueI.Events.DisplayUpdatedEventArgs.html",
    "title": "Class DisplayUpdatedEventArgs | RueI",
    "keywords": "Class DisplayUpdatedEventArgs Namespace RueI.Events Assembly RueI.dll Contains all information after a player's DisplayCore is updated. public class DisplayUpdatedEventArgs : EventArgs Inheritance object EventArgs DisplayUpdatedEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DisplayUpdatedEventArgs(DisplayCore) Initializes a new instance of the DisplayUpdatedEventArgs class. public DisplayUpdatedEventArgs(DisplayCore core) Parameters core DisplayCore The DisplayCore that has been updated. Properties DisplayCore Gets the updated DisplayCore. public DisplayCore DisplayCore { get; } Property Value DisplayCore ReferenceHub Gets the ReferenceHub of the updated core. public ReferenceHub ReferenceHub { get; } Property Value ReferenceHub Scheduler Gets the Scheduler of the updated core. public Scheduler Scheduler { get; } Property Value Scheduler"
  },
  "api/RueI.Events.Events.RueIEvent-1.html": {
    "href": "api/RueI.Events.Events.RueIEvent-1.html",
    "title": "Delegate Events.RueIEvent<T> | RueI",
    "keywords": "Delegate Events.RueIEvent<T> Namespace RueI.Events Assembly RueI.dll Represents a custom RueI event. public delegate void Events.RueIEvent<T>(T ev) where T : EventArgs Parameters ev T The event args to use. Type Parameters T The EventArgs class to use."
  },
  "api/RueI.Events.Events.html": {
    "href": "api/RueI.Events.Events.html",
    "title": "Class Events | RueI",
    "keywords": "Class Events Namespace RueI.Events Assembly RueI.dll Provides events for use by plugins using RueI. public static class Events Inheritance object Events Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Events DisplayUpdated Called after a player's DisplayCore is updated. public static event Events.RueIEvent<DisplayUpdatedEventArgs>? DisplayUpdated Event Type Events.RueIEvent<DisplayUpdatedEventArgs>"
  },
  "api/RueI.Events.html": {
    "href": "api/RueI.Events.html",
    "title": "Namespace RueI.Events | RueI",
    "keywords": "Namespace RueI.Events Classes DisplayUpdatedEventArgs Contains all information after a player's DisplayCore is updated. Events Provides events for use by plugins using RueI. Delegates Events.RueIEvent<T> Represents a custom RueI event."
  },
  "api/RueI.Extensions.DisplayCoreExtensions.html": {
    "href": "api/RueI.Extensions.DisplayCoreExtensions.html",
    "title": "Class DisplayCoreExtensions | RueI",
    "keywords": "Class DisplayCoreExtensions Namespace RueI.Extensions Assembly RueI.dll Provides miscellaneous utility for DisplayCores. public static class DisplayCoreExtensions Inheritance object DisplayCoreExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddTemp<T>(DisplayCore, T, TimeSpan, TimedElemRef<T>) Temporarily adds an Element to a DisplayCore using the specified TimedElemRef<T>. This method updates the DisplayCore. public static void AddTemp<T>(this DisplayCore core, T element, TimeSpan time, TimedElemRef<T> elemRef) where T : Element, ISettable Parameters core DisplayCore The DisplayCore to add the element to. element T The element to add. time TimeSpan How long to add the element to the DisplayCore for. elemRef TimedElemRef<T> The TimedElemRef<T> to use. Type Parameters T The type of the element. SetElemTemp(DisplayCore, string, float, TimeSpan, TimedElemRef<SetElement>) Temporarily adds a SetElement using the provided string and position, or sets it if it already exists. This method updates the DisplayCore. public static void SetElemTemp(this DisplayCore core, string content, float position, TimeSpan time, TimedElemRef<SetElement> elemRef) Parameters core DisplayCore The DisplayCore to add the element to. content string The content of the element. position float The position of the element. time TimeSpan How long to keep the element in the DisplayCore for. elemRef TimedElemRef<SetElement> The TimedElemRef<T> to use. SetElemTempFunctional(DisplayCore, string, float, TimeSpan, TimedElemRef<SetElement>) Temporarily adds a SetElement using the provided string and functional position, or sets it if it already exists. This method updates the DisplayCore. public static void SetElemTempFunctional(this DisplayCore core, string content, float position, TimeSpan time, TimedElemRef<SetElement> elemRef) Parameters core DisplayCore The DisplayCore to add the element to. content string The content of the element. position float The position of the element. time TimeSpan How long to keep the element in the DisplayCore for. elemRef TimedElemRef<SetElement> The TimedElemRef<T> to use. SetElementOrNew(DisplayCore, IElemReference<SetElement>, string, float) Sets the content of a SetElementIElemReference<T>, or creates it. public static void SetElementOrNew(this DisplayCore core, IElemReference<SetElement> reference, string content, float position) Parameters core DisplayCore The DisplayCore to use. reference IElemReference<SetElement> The IElemReference<T> to use. content string The new content of the SetElement. position float The position of the SetElement if it needs to be created."
  },
  "api/RueI.Extensions.ElementHelpers.html": {
    "href": "api/RueI.Extensions.ElementHelpers.html",
    "title": "Class ElementHelpers | RueI",
    "keywords": "Class ElementHelpers Namespace RueI.Extensions Assembly RueI.dll Provides extensions and helpers for working with elements. public static class ElementHelpers Inheritance object ElementHelpers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods FilterDisabled(IEnumerable<Element>) Filters out all of the disabled Elements in an IEnumerable<T>. public static IEnumerable<Element> FilterDisabled(this IEnumerable<Element> elements) Parameters elements IEnumerable<Element> The elements to filter. Returns IEnumerable<Element> The filtered IEnumerable<T>. GetFunctionalPosition(Element) Gets the functional (un-scaled) position of an element. public static float GetFunctionalPosition(this Element element) Parameters element Element The element to get the position for. Returns float The un-scaled position."
  },
  "api/RueI.Extensions.EnumExtensions.html": {
    "href": "api/RueI.Extensions.EnumExtensions.html",
    "title": "Class EnumExtensions | RueI",
    "keywords": "Class EnumExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions for working with RueI Enums. public static class EnumExtensions Inheritance object EnumExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods HasFlagFast(Roles, RoleTypeId) Quickly determines if a Roles has a RoleTypeId. public static bool HasFlagFast(this Roles first, RoleTypeId second) Parameters first Roles The first Roles. second RoleTypeId The other Roles. Returns bool A value indicating whether or not the first has the RoleTypeId of the second. HasFlagFast(Roles, Roles) Quickly determines if a Roles has another Roles. public static bool HasFlagFast(this Roles first, Roles second) Parameters first Roles The first Roles. second Roles The other Roles. Returns bool A value indicating whether or not the first has all of the flags of the second. Remarks This method is faster than HasFlag(Enum), because it skips checking whether or not second is a valid option and avoids boxing/unboxing. HasFlagFast(ElementOptions, ElementOptions) Quickly determines if an ElementOptions has another ElementOptions. public static bool HasFlagFast(this ElementOptions first, ElementOptions second) Parameters first ElementOptions The first ElementOptions. second ElementOptions The other ElementOptions. Returns bool A value indicating whether or not the first has all of the flags of the second. Remarks This method is faster than HasFlag(Enum), because it skips checking whether or not second is a valid option and avoids boxing/unboxing."
  },
  "api/RueI.Extensions.HintBuilding.HintBuilding.AlignStyle.html": {
    "href": "api/RueI.Extensions.HintBuilding.HintBuilding.AlignStyle.html",
    "title": "Enum HintBuilding.AlignStyle | RueI",
    "keywords": "Enum HintBuilding.AlignStyle Namespace RueI.Extensions.HintBuilding Assembly RueI.dll Represents all of the options for the alignment of a string of text. public enum HintBuilding.AlignStyle Fields Center = 1 Indicates that the text should be center-aligned. Flush = 4 Indicates that every line should be stretched to fill the display area. This includes the last line. Justified = 3 Indicates that every line should be stretched to fill the display area, excluding the last line. Left = 0 Indicates that the text should be left-aligned. Right = 2 Indicates that the text should be right-aligned."
  },
  "api/RueI.Extensions.HintBuilding.HintBuilding.html": {
    "href": "api/RueI.Extensions.HintBuilding.HintBuilding.html",
    "title": "Class HintBuilding | RueI",
    "keywords": "Class HintBuilding Namespace RueI.Extensions.HintBuilding Assembly RueI.dll Provides extensions for adding rich text tags to StringBuilders. public static class HintBuilding Inheritance object HintBuilding Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddHorizontalPos(StringBuilder, float, MeasurementUnit) Adds a pos tag to a StringBuilder. public static StringBuilder AddHorizontalPos(this StringBuilder sb, float margins, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the pos tag. style MeasurementUnit The measurement style of the pos tag. Returns StringBuilder A reference to the original StringBuilder. AddLinebreak(StringBuilder) Adds a linebreak to a StringBuilder. public static StringBuilder AddLinebreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. AddSpace(StringBuilder, float, MeasurementUnit) Adds a space tag to a StringBuilder. public static StringBuilder AddSpace(this StringBuilder sb, float margins, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the pos tag. style MeasurementUnit The measurement style of the pos tag. Returns StringBuilder A reference to the original StringBuilder. AddSprite(StringBuilder, int) Adds a sprite tag to a StringBuilder. public static StringBuilder AddSprite(this StringBuilder sb, int index) Parameters sb StringBuilder The StringBuilder to use. index int The index (0-20) of the sprite tag. Returns StringBuilder A reference to the original StringBuilder. AddSprite(StringBuilder, int, Color) Adds a sprite tag to a StringBuilder. public static StringBuilder AddSprite(this StringBuilder sb, int index, Color color) Parameters sb StringBuilder The StringBuilder to use. index int The index (0-20) of the sprite tag. color Color The color of the sprite tag. Returns StringBuilder A reference to the original StringBuilder. AddVOffset(StringBuilder, float, MeasurementUnit) Adds a voffset tag to a StringBuilder. public static StringBuilder AddVOffset(this StringBuilder sb, float offset, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. offset float The size of the voffset tag. style MeasurementUnit The measurement style of the voffset tag. Returns StringBuilder A reference to the original StringBuilder. CloseAlign(StringBuilder) Adds a closing align tag to a StringBuilder. public static StringBuilder CloseAlign(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseAlpha(StringBuilder) Adds a closing alpha tag to a StringBuilder. public static StringBuilder CloseAlpha(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseBold(StringBuilder) Adds a closing bold tag to a StringBuilder. public static StringBuilder CloseBold(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseColor(StringBuilder) Adds a closing color tag to a StringBuilder. public static StringBuilder CloseColor(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseIndent(StringBuilder) Adds a closing indent tag to a StringBuilder. public static StringBuilder CloseIndent(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseItalics(StringBuilder) Adds a closing italics tag to a StringBuilder. public static StringBuilder CloseItalics(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseLineHeight(StringBuilder) Adds a closing line-height tag to a StringBuilder. public static StringBuilder CloseLineHeight(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMargins(StringBuilder) Adds a closing margins tag to a StringBuilder. public static StringBuilder CloseMargins(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMark(StringBuilder) Adds a closing mark tag to a StringBuilder. public static StringBuilder CloseMark(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMonospace(StringBuilder) Adds a closing monospace tag to a StringBuilder. public static StringBuilder CloseMonospace(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseNobreak(StringBuilder) Adds a closing nobreak tag to a StringBuilder. public static StringBuilder CloseNobreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseNoparse(StringBuilder) Adds a closing noparse tag to a StringBuilder. public static StringBuilder CloseNoparse(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseRotation(StringBuilder) Adds a closing rotation tag to a StringBuilder. public static StringBuilder CloseRotation(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseScale(StringBuilder) Adds a closing scale tag to a StringBuilder. public static StringBuilder CloseScale(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSize(StringBuilder) Adds a closing size tag to a StringBuilder. public static StringBuilder CloseSize(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseStrikethrough(StringBuilder) Adds a closing strikethrough tag to a StringBuilder. public static StringBuilder CloseStrikethrough(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSubscript(StringBuilder) Adds a closing subscript tag to a StringBuilder. public static StringBuilder CloseSubscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSuperscript(StringBuilder) Adds a closing superscript tag to a StringBuilder. public static StringBuilder CloseSuperscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseUnderline(StringBuilder) Adds a closing underline tag to a StringBuilder. public static StringBuilder CloseUnderline(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseVOffset(StringBuilder) Adds a closing voffset tag to a StringBuilder. public static StringBuilder CloseVOffset(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseWidth(StringBuilder) Adds a closing width tag to a StringBuilder. public static StringBuilder CloseWidth(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. ConvertToHex(Color) Converts a Color to a hex code string. public static string ConvertToHex(Color color) Parameters color Color The Color to convert. Returns string The color as a hex code string. SetAlignment(StringBuilder, AlignStyle) Adds an alignment tag to a StringBuilder. public static StringBuilder SetAlignment(this StringBuilder sb, HintBuilding.AlignStyle align) Parameters sb StringBuilder The StringBuilder to use. align HintBuilding.AlignStyle The HintBuilding.AlignStyle to use. Returns StringBuilder A reference to the original StringBuilder. SetAlpha(StringBuilder, byte) Adds an alpha tag to a StringBuilder. public static StringBuilder SetAlpha(this StringBuilder sb, byte alpha) Parameters sb StringBuilder The StringBuilder to use. alpha byte The alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetAlpha(StringBuilder, int) Adds an alpha tag to a StringBuilder. public static StringBuilder SetAlpha(this StringBuilder sb, int alpha) Parameters sb StringBuilder The StringBuilder to use. alpha int The alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetBold(StringBuilder) Adds a bold tag to a StringBuilder. public static StringBuilder SetBold(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetCase(StringBuilder, CaseStyle) Adds a case tag to a StringBuilder. public static StringBuilder SetCase(this StringBuilder sb, CaseStyle caseStyle) Parameters sb StringBuilder The StringBuilder to use. caseStyle CaseStyle The case to use. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, byte, byte, byte, byte) Adds a color tag to a StringBuilder from RGBA values. public static StringBuilder SetColor(this StringBuilder sb, byte r, byte g, byte b, byte alpha = 255) Parameters sb StringBuilder The StringBuilder to use. r byte The red (0-255) in the color. g byte The green (0-255) in the color. b byte The blue (0-255) in the color. alpha byte The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, Color) Adds a color tag to a StringBuilder. public static StringBuilder SetColor(this StringBuilder sb, Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The color to use. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, int, int, int, int) Adds a color tag to a StringBuilder from RGBA values. public static StringBuilder SetColor(this StringBuilder sb, int r, int g, int b, int alpha = 255) Parameters sb StringBuilder The StringBuilder to use. r int The red (0-255) in the color. g int The green (0-255) in the color. b int The blue (0-255) in the color. alpha int The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetIndent(StringBuilder, float, MeasurementUnit) Adds an indent tag to a StringBuilder. public static StringBuilder SetIndent(this StringBuilder sb, float indent, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. indent float The indent size to include in the indent tag. style MeasurementUnit The measurement style of the indent tag. Returns StringBuilder A reference to the original StringBuilder. SetItalics(StringBuilder) Adds an italics tag to a StringBuilder. public static StringBuilder SetItalics(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetLineHeight(StringBuilder, float, MeasurementUnit) Adds a line-height tag to a StringBuilder. public static StringBuilder SetLineHeight(this StringBuilder sb, float size, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The line height to include in the line-height tag. style MeasurementUnit The measurement style of the line-height tag. Returns StringBuilder A reference to the original StringBuilder. SetMargins(StringBuilder, float, MeasurementUnit) Adds an margins tag to a StringBuilder. public static StringBuilder SetMargins(this StringBuilder sb, float margins, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the margins. style MeasurementUnit The measurement style of the margins tag. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, byte, byte, byte, byte) Adds a mark tag to a StringBuilder from RGBA values. public static StringBuilder SetMark(this StringBuilder sb, byte r, byte g, byte b, byte alpha) Parameters sb StringBuilder The StringBuilder to use. r byte The red (0-255) in the color. g byte The green (0-255) in the color. b byte The blue (0-255) in the color. alpha byte The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, Color) Adds a mark tag to a StringBuilder. public static StringBuilder SetMark(this StringBuilder sb, Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The color to use. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, int, int, int, int) Adds a mark tag to a StringBuilder from RGBA values. public static StringBuilder SetMark(this StringBuilder sb, int r, int g, int b, int alpha) Parameters sb StringBuilder The StringBuilder to use. r int The red (0-255) in the color. g int The green (0-255) in the color. b int The blue (0-255) in the color. alpha int The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetMonospace(StringBuilder, float, MeasurementUnit) Adds a monospace tag to a StringBuilder. public static StringBuilder SetMonospace(this StringBuilder sb, float spacing, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. spacing float The size of the spacing. style MeasurementUnit The measurement style of the monospacing tag. Returns StringBuilder A reference to the original StringBuilder. SetNobreak(StringBuilder) Adds a nobreak tag to a StringBuilder. public static StringBuilder SetNobreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetNoparse(StringBuilder) Adds a noparse tag to a StringBuilder. public static StringBuilder SetNoparse(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetRotation(StringBuilder, int) Adds a rotation tag to a StringBuilder. public static StringBuilder SetRotation(this StringBuilder sb, int rotation) Parameters sb StringBuilder The StringBuilder to use. rotation int The rotation (-180 to 180) of the tag.. Returns StringBuilder A reference to the original StringBuilder. SetScale(StringBuilder, float) Adds a horizontal scale tag to a StringBuilder. public static StringBuilder SetScale(this StringBuilder sb, float scale) Parameters sb StringBuilder The StringBuilder to use. scale float The scale size to include in the scale tag. Returns StringBuilder A reference to the original StringBuilder. SetSize(StringBuilder, float, MeasurementUnit) Adds a size tag to a StringBuilder. public static StringBuilder SetSize(this StringBuilder sb, float size, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The size to include in the size tag. style MeasurementUnit The measurement style of the size tag. Returns StringBuilder A reference to the original StringBuilder. SetStrikethrough(StringBuilder) Adds a strikethrough tag to a StringBuilder. public static StringBuilder SetStrikethrough(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetSubscript(StringBuilder) Adds a subscript tag to a StringBuilder. public static StringBuilder SetSubscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetSuperscript(StringBuilder) Adds a superscript tag to a StringBuilder. public static StringBuilder SetSuperscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetUnderline(StringBuilder) Adds an underline tag to a StringBuilder. public static StringBuilder SetUnderline(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetWidth(StringBuilder, float, MeasurementUnit) Adds a width tag to a StringBuilder. public static StringBuilder SetWidth(this StringBuilder sb, float offset, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. offset float The size of the new width. style MeasurementUnit The measurement style of the width tag. Returns StringBuilder A reference to the original StringBuilder."
  },
  "api/RueI.Extensions.HintBuilding.html": {
    "href": "api/RueI.Extensions.HintBuilding.html",
    "title": "Namespace RueI.Extensions.HintBuilding | RueI",
    "keywords": "Namespace RueI.Extensions.HintBuilding Classes HintBuilding Provides extensions for adding rich text tags to StringBuilders. Enums HintBuilding.AlignStyle Represents all of the options for the alignment of a string of text."
  },
  "api/RueI.Extensions.IEnumerableExtensions.html": {
    "href": "api/RueI.Extensions.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | RueI",
    "keywords": "Class IEnumerableExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions for working with collections. public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetMultiple<TKey, TValue>(IDictionary<TKey, IEnumerable<TValue>>, TKey) Gets a IEnumerable<T> of values from a IDictionary<TKey, TValue> using the key. public static IEnumerable<TValue> GetMultiple<TKey, TValue>(this IDictionary<TKey, IEnumerable<TValue>> dict, TKey key) Parameters dict IDictionary<TKey, IEnumerable<TValue>> The dictionary to use. key TKey The key to search with. Returns IEnumerable<TValue> The IEnumerable<T>, or Empty<TResult>() if it is not found. Type Parameters TKey The type of the dictionary's key. TValue The type of the dictionary's value. Only<T>(IEnumerable<T>) Determines if a IEnumerable<T> has only one element. public static bool Only<T>(this IEnumerable<T> enumerable) Parameters enumerable IEnumerable<T> The IEnumerable<T> to check. Returns bool true if there is only one element in the IEnumerable<T>. Type Parameters T The inner type of the IEnumerable<T>. Only<T>(IEnumerable<T>, Func<T, bool>) Determines if a IEnumerable<T> has only one element that passes a filter. public static bool Only<T>(this IEnumerable<T> enumerable, Func<T, bool> filter) Parameters enumerable IEnumerable<T> The IEnumerable<T> to check. filter Func<T, bool> A filter to use. Returns bool true if there is only one element in the IEnumerable<T> and that element passes the filter, otherwise false. Type Parameters T The inner type of the IEnumerable<T>."
  },
  "api/RueI.Extensions.ReflectionHelpers.html": {
    "href": "api/RueI.Extensions.ReflectionHelpers.html",
    "title": "Class ReflectionHelpers | RueI",
    "keywords": "Class ReflectionHelpers Namespace RueI.Extensions Assembly RueI.dll Contains methods designed for use by reflection. public static class ReflectionHelpers Inheritance object ReflectionHelpers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetElemCreator() Gets a Func<TResult> that can be used to easily call GetElementShower(). public static Func<Action<ReferenceHub, string, float, TimeSpan>> GetElemCreator() Returns Func<Action<ReferenceHub, string, float, TimeSpan>> A Func<TResult> that itself returns an Action<T1, T2, T3, T4>. Remarks The Func<TResult> returned by this method is identical to calling GetElementShower(). This method serves a helper to easily turn GetElementShower into a Func<TResult>, to make reflection easier. GetElementShower() Gets an Action<T1, T2, T3, T4> that can be used to add an element, with a TimedElemRef<T> as a closure. public static Action<ReferenceHub, string, float, TimeSpan> GetElementShower() Returns Action<ReferenceHub, string, float, TimeSpan> An Action<T1, T2, T3, T4> that can be used to add an element to a ReferenceHub. Remarks Every time this method is called, it creates a new TimedElemRef<T>. Therefore, every delegate returned by this method represents a unique 'element'."
  },
  "api/RueI.Extensions.html": {
    "href": "api/RueI.Extensions.html",
    "title": "Namespace RueI.Extensions | RueI",
    "keywords": "Namespace RueI.Extensions RueI.Extensions contains extensions and helpers for working with hints and RueI as a whole. This namespace also contains various extensions that are used internally by RueI. Classes DisplayCoreExtensions Provides miscellaneous utility for DisplayCores. ElementHelpers Provides extensions and helpers for working with elements. EnumExtensions Provides extensions for working with RueI Enums. IEnumerableExtensions Provides extensions for working with collections. ReflectionHelpers Contains methods designed for use by reflection."
  },
  "api/RueI.NonUnityProvider.TaskAsyncOperation.html": {
    "href": "api/RueI.NonUnityProvider.TaskAsyncOperation.html",
    "title": "Class NonUnityProvider.TaskAsyncOperation | RueI",
    "keywords": "Class NonUnityProvider.TaskAsyncOperation Namespace RueI Assembly RueI.dll Represents an async operation using a Task. public class NonUnityProvider.TaskAsyncOperation : UnityAlternative.IAsyncOperation, IDisposable Inheritance object NonUnityProvider.TaskAsyncOperation Implements UnityAlternative.IAsyncOperation IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TaskAsyncOperation(TimeSpan, Action) Initializes a new instance of the NonUnityProvider.TaskAsyncOperation class, and then immediately runs. public TaskAsyncOperation(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Properties IsRunning Gets a value indicating whether or not this operation is currently running. public bool IsRunning { get; } Property Value bool Methods Cancel() Cancels this operation. public void Cancel() Dispose() Disposes this async operation. public void Dispose()"
  },
  "api/RueI.NonUnityProvider.html": {
    "href": "api/RueI.NonUnityProvider.html",
    "title": "Class NonUnityProvider | RueI",
    "keywords": "Class NonUnityProvider Namespace RueI Assembly RueI.dll Provides non-Unity alternatives for the UnityProvider of the application. public class NonUnityProvider : UnityAlternative Inheritance object UnityAlternative NonUnityProvider Inherited Members UnityAlternative.Provider object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Log(string, ConsoleColor) Logs a message to the console. public override void Log(string message, ConsoleColor color = ConsoleColor.Yellow) Parameters message string The message to log. color ConsoleColor The color of the message. LogDebug(string) Logs a debug message to the console. public override void LogDebug(string message) Parameters message string The debug message to log. LogWarn(string) Logs a warning message to the console. public override void LogWarn(string message) Parameters message string The warn message to log. PatchAll(Harmony) Loads all patches. public override void PatchAll(Harmony harmony) Parameters harmony Harmony The HarmonyLib.Harmony instance to use. PerformAsync(TimeSpan, Action) Performs an async operation. public override UnityAlternative.IAsyncOperation PerformAsync(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Returns UnityAlternative.IAsyncOperation A UnityAlternative.IAsyncOperation to use."
  },
  "api/RueI.Parsing.CharacterLengths.html": {
    "href": "api/RueI.Parsing.CharacterLengths.html",
    "title": "Class CharacterLengths | RueI",
    "keywords": "Class CharacterLengths Namespace RueI.Parsing Assembly RueI.dll Provides lengths for characters in hints. public static class CharacterLengths Inheritance object CharacterLengths Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class is mosty designed for internal use within RueI. However, it can still be useful for external use. Properties Lengths Gets a IReadOnlyDictionary<TKey, TValue> of character sizes. public static IReadOnlyDictionary<char, float> Lengths { get; } Property Value IReadOnlyDictionary<char, float>"
  },
  "api/RueI.Parsing.ClosingTag-1.html": {
    "href": "api/RueI.Parsing.ClosingTag-1.html",
    "title": "Class ClosingTag<T> | RueI",
    "keywords": "Class ClosingTag<T> Namespace RueI.Parsing Assembly RueI.dll Defines the base class for all rich text tags. public abstract class ClosingTag<T> : NoParamsTag where T : ClosingTag<T>, new() Type Parameters T The type of the closing tag. Inheritance object RichTextTag NoParamsTag ClosingTag<T> Derived CloseAlignTag CloseBoldTag CloseCSpaceTag CloseColorTag CloseIndentTag CloseItalicsTag CloseLineIndentTag CloseMarginTag CloseMarkTag CloseNobrTag CloseNoparseTag CloseRotateTag CloseScaleTag CloseStrikethroughTag CloseSubscriptTag CloseSuperscriptTag CloseUnderlineTag CloseVOffsetTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public abstract string Name { get; } Property Value string Names Gets the names of this tag. public override sealed string[] Names { get; } Property Value string[] Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected virtual void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser. HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override sealed bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Enums.CaseStyle.html": {
    "href": "api/RueI.Parsing.Enums.CaseStyle.html",
    "title": "Enum CaseStyle | RueI",
    "keywords": "Enum CaseStyle Namespace RueI.Parsing.Enums Assembly RueI.dll Represents the case style of the parser. public enum CaseStyle Fields Lowercase = 1 Indicates that all text will be in lowercase. Smallcaps = 0 Indicates that all text will be in uppercase, but lowercase characters will be slightly smaller. Uppercase = 2 Indicates that all text will be in uppercase."
  },
  "api/RueI.Parsing.Enums.ColorStyle.html": {
    "href": "api/RueI.Parsing.Enums.ColorStyle.html",
    "title": "Enum ColorStyle | RueI",
    "keywords": "Enum ColorStyle Namespace RueI.Parsing.Enums Assembly RueI.dll Represents the style used for a color parameter. public enum ColorStyle Fields HexCode = 1 Indicates that the color parameter is a hex code. Named = 0 Indicates that the color parameter is a named color."
  },
  "api/RueI.Parsing.Enums.MeasurementUnit.html": {
    "href": "api/RueI.Parsing.Enums.MeasurementUnit.html",
    "title": "Enum MeasurementUnit | RueI",
    "keywords": "Enum MeasurementUnit Namespace RueI.Parsing.Enums Assembly RueI.dll Represents the unit used for a measurement parameter. public enum MeasurementUnit Fields Ems = 2 Indicates that the measurement is in ems. Percentage = 1 Indicates that the measurement is a percentage of the default. Pixels = 0 Indicates that the measurement is in pixels."
  },
  "api/RueI.Parsing.Enums.TagStyle.html": {
    "href": "api/RueI.Parsing.Enums.TagStyle.html",
    "title": "Enum TagStyle | RueI",
    "keywords": "Enum TagStyle Namespace RueI.Parsing.Enums Assembly RueI.dll Represents the valid characters for a delimiter. public enum TagStyle Fields Attributes = 2 Indicates that a tag takes in only attributes (space delimiter). NoParams = 0 Indicates that a tag does not take parameters. ValueParam = 1 Indicates that a tag takes in a value (equal sign) param."
  },
  "api/RueI.Parsing.Enums.html": {
    "href": "api/RueI.Parsing.Enums.html",
    "title": "Namespace RueI.Parsing.Enums | RueI",
    "keywords": "Namespace RueI.Parsing.Enums Enums CaseStyle Represents the case style of the parser. ColorStyle Represents the style used for a color parameter. MeasurementUnit Represents the unit used for a measurement parameter. TagStyle Represents the valid characters for a delimiter."
  },
  "api/RueI.Parsing.NoParamsTag.html": {
    "href": "api/RueI.Parsing.NoParamsTag.html",
    "title": "Class NoParamsTag | RueI",
    "keywords": "Class NoParamsTag Namespace RueI.Parsing Assembly RueI.dll Defines a RichTextTag that does not take in parameters. public abstract class NoParamsTag : RichTextTag Inheritance object RichTextTag NoParamsTag Derived ClosingTag<T> AllcapsTag BoldTag BrTag CloseAllcapsTag CloseAlphaTag CloseLineHeightTag CloseLowercase CloseSizeTag CloseSmallcapsTag ItalicsTag LowercaseTag NobrTag NoparseTag PageTag SmallcapsTag StrikethroughTag SubscriptTag SuperscriptTag UnderlineTag Inherited Members RichTextTag.Names object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties TagStyle Gets the parameter style of this tag. public override sealed TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public abstract bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false. HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override sealed bool HandleTag(ParserContext context, string parameters) Parameters context ParserContext The context of the parser. parameters string The parameters of the tag, excluding the delimiter. Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Parser.html": {
    "href": "api/RueI.Parsing.Parser.html",
    "title": "Class Parser | RueI",
    "keywords": "Class Parser Namespace RueI.Parsing Assembly RueI.dll Helps parse the content of elements. This class cannot be inherited. public sealed class Parser Inheritance object Parser Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Examples This example demonstrates creating and using a ParserBuilder. Parser builder = new ParserBuilder() .ImportFrom(Constants.DefaultParser) .AddTag<MyCustomTag>(); .Build(); builder.Parse(\"hello world!\") Remarks The Parser is a sealed, immutable class that provides APIs for parsing (extracting the information of) hints so that multiple can be displayed at once, along with the ability to add new RichTextTags. In order to create new Parsers, you must use the ParserBuilder class. Properties DefaultParser Gets the default Parser. public static Parser DefaultParser { get; } Property Value Parser TagBackups Gets a list of Parsers which this Parser will include the tags for. public ReadOnlyCollection<Parser> TagBackups { get; } Property Value ReadOnlyCollection<Parser> Tags Gets the tags that will be searched for when parsing. public Lookup<string, RichTextTag> Tags { get; } Property Value Lookup<string, RichTextTag> Remarks Multiple tags can share the same name. Methods AddCharacter(ParserContext, char, bool) Adds a character to a parser context. public static void AddCharacter(ParserContext context, char ch, bool append = true) Parameters context ParserContext The context of the parser. ch char The character to add. append bool Whether or not the character should be appended to the ParserContext's ResultBuilder. CalculateCharacterLength(TextInfo, char) Calculates the length of a char with a context. public static float CalculateCharacterLength(TextInfo context, char ch) Parameters context TextInfo The context to parse the char under. ch char The char to calculate the length for. Returns float A float indicating the total length of the char. CreateLineBreak(ParserContext, bool) Generates the effects of a linebreak for a parser. public static void CreateLineBreak(ParserContext context, bool isOverflow = false) Parameters context ParserContext The context of the parser. isOverflow bool Whether or not the line break was caused by an overflow. GetTagAttributes(string, out Dictionary<string, string>) Attempts to parse the tag attributes of a string. public static bool GetTagAttributes(string content, out Dictionary<string, string> attributes) Parameters content string The content to parse. attributes Dictionary<string, string> The pairs of attributes. Returns bool true if the content is valid, otherwise false. Parse(string, ElementOptions) Parses a rich text string. public ParsedData Parse(string text, ElementOptions options = ElementOptions.Default) Parameters text string The string to parse. options ElementOptions The options of the element. Returns ParsedData A ParsedData containing information about the string. See Also ParserBuilder"
  },
  "api/RueI.Parsing.ParserBuilder.html": {
    "href": "api/RueI.Parsing.ParserBuilder.html",
    "title": "Class ParserBuilder | RueI",
    "keywords": "Class ParserBuilder Namespace RueI.Parsing Assembly RueI.dll Builds Parsers. public sealed class ParserBuilder Inheritance object ParserBuilder Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors ParserBuilder() Initializes a new instance of the ParserBuilder class. public ParserBuilder() Properties TagsCount Gets the number of tags within this ParserBuilder. public int TagsCount { get; } Property Value int Methods AddFromAssembly(Assembly) Adds new RichTextTags from an assembly by getting all of the RichTextTagAttribute classes. public ParserBuilder AddFromAssembly(Assembly assembly) Parameters assembly Assembly The Assembly to get the classes from. Returns ParserBuilder A reference to this ParserBuilder. AddTag<T>() Gets the SharedTag<T> of a RichTextTag type and adds it to the builder. public ParserBuilder AddTag<T>() where T : RichTextTag, new() Returns ParserBuilder A reference to this ParserBuilder. Type Parameters T The type of the tag to create. Build() Builds this ParserBuilder into a Parser. public Parser Build() Returns Parser The built Parser. ImportFrom(Parser) Imports all of the RichTextTags from a Parser, adding it to the builder. public ParserBuilder ImportFrom(Parser parser) Parameters parser Parser The Parser to import the tags from. Returns ParserBuilder A reference to this ParserBuilder."
  },
  "api/RueI.Parsing.ParserContext.html": {
    "href": "api/RueI.Parsing.ParserContext.html",
    "title": "Class ParserContext | RueI",
    "keywords": "Class ParserContext Namespace RueI.Parsing Assembly RueI.dll Describes the state of a parser at a time. public class ParserContext : TextInfo, IDisposable Inheritance object TextInfo ParserContext Implements IDisposable Inherited Members TextInfo.CurrentLineHeight TextInfo.Size TextInfo.CurrentCSpace TextInfo.IsMonospace TextInfo.Monospacing TextInfo.IsBold TextInfo.Scale TextInfo.IsSubscript TextInfo.IsSuperscript TextInfo.CurrentCase object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The ParserContext class provides a way for the general state of the parser, such as the current line width or the vertical height, to be modified by passing it along. Tags should modify this in order to change the end result of parsing. Properties BiggestCharSize Gets or sets the biggest char size of the line. public float BiggestCharSize { get; set; } Property Value float ColorTags Gets or sets the number of color tags that are nested. public int ColorTags { get; set; } Property Value int CurrentLineWidth Gets or sets the current line width of the parser. public float CurrentLineWidth { get; set; } Property Value float DisplayAreaWidth Gets or sets the current width of the text. public float DisplayAreaWidth { get; set; } Property Value float FunctionalWidth Gets the current functional width of the text. public float FunctionalWidth { get; } Property Value float Indent Gets or sets the current indent of the parser. public float Indent { get; set; } Property Value float LeftMargin Gets or sets the left margin of the line. public float LeftMargin { get; set; } Property Value float LineHasAnyChars Gets or sets a value indicating whether or not the current line has any characters. public bool LineHasAnyChars { get; set; } Property Value bool LineIndent Gets or sets the current line indent of the parser. public float LineIndent { get; set; } Property Value float NewOffset Gets or sets the final offset for the element as a whole. public float NewOffset { get; set; } Property Value float NewlineBuffer Gets or sets the newline buffer of the parser. public float NewlineBuffer { get; set; } Property Value float NoBreak Gets or sets a value indicating whether or not words are currently in no break. public bool NoBreak { get; set; } Property Value bool ResultBuilder Gets the end result string builder. public StringBuilder ResultBuilder { get; } Property Value StringBuilder RightMargin Gets or sets the right margin of the line. public float RightMargin { get; set; } Property Value float ShouldParse Gets or sets a value indicating whether the parser should parse tags other than CloseNoparseTag. public bool ShouldParse { get; set; } Property Value bool SizeTags Gets a stack containing all of the nested sizes. public Stack<float> SizeTags { get; } Property Value Stack<float> SkipOverflow Gets or sets a value indicating whether or not overflow checks will be skipped. public bool SkipOverflow { get; set; } Property Value bool SpaceBuffer Gets or sets the current space buffer of the parser. public float SpaceBuffer { get; set; } Property Value float VOffset Gets or sets the current voffset of the parser. public float VOffset { get; set; } Property Value float WidthSinceSpace Gets or sets the total width since a space. public float WidthSinceSpace { get; set; } Property Value float Methods AddEndingTag<T>(bool) Adds a RichTextTag to a list of tags that will be added to the end of the parser's result. public void AddEndingTag<T>(bool allowDuplicates = false) where T : NoParamsTag, new() Parameters allowDuplicates bool Whether or not duplicates are allowed, accommodating for nested tags. Type Parameters T The type of the RichTextTag to be added as an ending tag (as a SharedTag<T>). ApplyClosingTags() Applies the endingTags and closing SizeTags tags to this ParserContext. public void ApplyClosingTags() Dispose() Disposes this ParserContext, returning the string builder to the pool. public void Dispose() RemoveEndingTag<T>() Removes a RichTextTag from the list list of tags that will be added to the end of the parser's result. public void RemoveEndingTag<T>() where T : NoParamsTag, new() Type Parameters T The type of the RichTextTag to be removed from the ending tags (as a SharedTag<T>)."
  },
  "api/RueI.Parsing.Records.MeasurementInfo.html": {
    "href": "api/RueI.Parsing.Records.MeasurementInfo.html",
    "title": "Struct MeasurementInfo | RueI",
    "keywords": "Struct MeasurementInfo Namespace RueI.Parsing.Records Assembly RueI.dll Defines a record that contains information about measurement info. public record struct MeasurementInfo : IEquatable<MeasurementInfo> Implements IEquatable<MeasurementInfo> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Remarks This provides a convenient way to specify both the value and unit for a measurement, as the base value when converted to pixels can differ depending on the context of the measurement. Constructors MeasurementInfo(float, MeasurementUnit) Defines a record that contains information about measurement info. public MeasurementInfo(float value, MeasurementUnit style) Parameters value float The value of the measurement. style MeasurementUnit The style of the measurement. Remarks This provides a convenient way to specify both the value and unit for a measurement, as the base value when converted to pixels can differ depending on the context of the measurement. Properties style The style of the measurement. public MeasurementUnit style { readonly get; set; } Property Value MeasurementUnit value The value of the measurement. public float value { readonly get; set; } Property Value float Methods ToString() Gets a string representation of this MeasurementInfo. public override readonly string ToString() Returns string A new value. TryParse(string, out MeasurementInfo) Attempts to extract a MeasurementInfo from a string. public static bool TryParse(string content, out MeasurementInfo info) Parameters content string The content to parse. info MeasurementInfo The returned info, if true. Returns bool true if the string was valid, otherwise false."
  },
  "api/RueI.Parsing.Records.ParsedData.html": {
    "href": "api/RueI.Parsing.Records.ParsedData.html",
    "title": "Class ParsedData | RueI",
    "keywords": "Class ParsedData Namespace RueI.Parsing.Records Assembly RueI.dll Defines a class that contains parsed information about a single element, used for displaying multiple at a time. public class ParsedData Inheritance object ParsedData Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Content Gets the content of the element. public string Content { get; } Property Value string Offset Gets the offset that should be applied to the element. public float Offset { get; } Property Value float Methods Deconstruct(out string, out float) Deconstructs this ParsedData. public void Deconstruct(out string content, out float offset) Parameters content string The returned new content of the element. offset float The returned offset of the element."
  },
  "api/RueI.Parsing.Records.html": {
    "href": "api/RueI.Parsing.Records.html",
    "title": "Namespace RueI.Parsing.Records | RueI",
    "keywords": "Namespace RueI.Parsing.Records Classes ParsedData Defines a class that contains parsed information about a single element, used for displaying multiple at a time. Structs MeasurementInfo Defines a record that contains information about measurement info."
  },
  "api/RueI.Parsing.RichTextTag.html": {
    "href": "api/RueI.Parsing.RichTextTag.html",
    "title": "Class RichTextTag | RueI",
    "keywords": "Class RichTextTag Namespace RueI.Parsing Assembly RueI.dll Defines the base class for all rich text tags. public abstract class RichTextTag Inheritance object RichTextTag Derived NoParamsTag AlignTag AlphaTag ColorTag ItalicsAngleTag MarkTag ScaleTag MeasurementTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public abstract string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public abstract TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public abstract bool HandleTag(ParserContext context, string parameters) Parameters context ParserContext The context of the parser. parameters string The parameters of the tag, excluding the delimiter. Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AlignTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AlignTag.html",
    "title": "Class AlignTag | RueI",
    "keywords": "Class AlignTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle align tags. public class AlignTag : RichTextTag Inheritance object RichTextTag AlignTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AllcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AllcapsTag.html",
    "title": "Class AllcapsTag | RueI",
    "keywords": "Class AllcapsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle allcaps tags. public class AllcapsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag AllcapsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AlphaTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AlphaTag.html",
    "title": "Class AlphaTag | RueI",
    "keywords": "Class AlphaTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle alpha tags. public class AlphaTag : RichTextTag Inheritance object RichTextTag AlphaTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.BoldTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.BoldTag.html",
    "title": "Class BoldTag | RueI",
    "keywords": "Class BoldTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle bold tags. public class BoldTag : NoParamsTag Inheritance object RichTextTag NoParamsTag BoldTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.BrTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.BrTag.html",
    "title": "Class BrTag | RueI",
    "keywords": "Class BrTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle br tags. public class BrTag : NoParamsTag Inheritance object RichTextTag NoParamsTag BrTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CSpaceTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CSpaceTag.html",
    "title": "Class CSpaceTag | RueI",
    "keywords": "Class CSpaceTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle cspace tags. public class CSpaceTag : MeasurementTag Inheritance object RichTextTag MeasurementTag CSpaceTag Inherited Members MeasurementTag.TagStyle MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AllowPercentages Gets a value indicating whether or not this tag allows parentheses. public override bool AllowPercentages { get; } Property Value bool Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAlignTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAlignTag.html",
    "title": "Class CloseAlignTag | RueI",
    "keywords": "Class CloseAlignTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing align tags. public class CloseAlignTag : ClosingTag<CloseAlignTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseAlignTag> CloseAlignTag Inherited Members ClosingTag<CloseAlignTag>.Names ClosingTag<CloseAlignTag>.HandleTag(ParserContext) ClosingTag<CloseAlignTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAllcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAllcapsTag.html",
    "title": "Class CloseAllcapsTag | RueI",
    "keywords": "Class CloseAllcapsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing allcaps tags. public class CloseAllcapsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseAllcapsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAlphaTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAlphaTag.html",
    "title": "Class CloseAlphaTag | RueI",
    "keywords": "Class CloseAlphaTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing alpha tags. public class CloseAlphaTag : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseAlphaTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseBoldTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseBoldTag.html",
    "title": "Class CloseBoldTag | RueI",
    "keywords": "Class CloseBoldTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing bold tags. public class CloseBoldTag : ClosingTag<CloseBoldTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseBoldTag> CloseBoldTag Inherited Members ClosingTag<CloseBoldTag>.Names ClosingTag<CloseBoldTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseCSpaceTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseCSpaceTag.html",
    "title": "Class CloseCSpaceTag | RueI",
    "keywords": "Class CloseCSpaceTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing cspace tags. public class CloseCSpaceTag : ClosingTag<CloseCSpaceTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseCSpaceTag> CloseCSpaceTag Inherited Members ClosingTag<CloseCSpaceTag>.Names ClosingTag<CloseCSpaceTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseColorTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseColorTag.html",
    "title": "Class CloseColorTag | RueI",
    "keywords": "Class CloseColorTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing color tags. public class CloseColorTag : ClosingTag<CloseColorTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseColorTag> CloseColorTag Inherited Members ClosingTag<CloseColorTag>.Names ClosingTag<CloseColorTag>.HandleTag(ParserContext) ClosingTag<CloseColorTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseIndentTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseIndentTag.html",
    "title": "Class CloseIndentTag | RueI",
    "keywords": "Class CloseIndentTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing indent tags. public class CloseIndentTag : ClosingTag<CloseIndentTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseIndentTag> CloseIndentTag Inherited Members ClosingTag<CloseIndentTag>.Names ClosingTag<CloseIndentTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseItalicsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseItalicsTag.html",
    "title": "Class CloseItalicsTag | RueI",
    "keywords": "Class CloseItalicsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing italics tags. public class CloseItalicsTag : ClosingTag<CloseItalicsTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseItalicsTag> CloseItalicsTag Inherited Members ClosingTag<CloseItalicsTag>.Names ClosingTag<CloseItalicsTag>.HandleTag(ParserContext) ClosingTag<CloseItalicsTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLineHeightTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLineHeightTag.html",
    "title": "Class CloseLineHeightTag | RueI",
    "keywords": "Class CloseLineHeightTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing line height tags. public class CloseLineHeightTag : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseLineHeightTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLineIndentTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLineIndentTag.html",
    "title": "Class CloseLineIndentTag | RueI",
    "keywords": "Class CloseLineIndentTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing line indent tags. public class CloseLineIndentTag : ClosingTag<CloseLineIndentTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseLineIndentTag> CloseLineIndentTag Inherited Members ClosingTag<CloseLineIndentTag>.Names ClosingTag<CloseLineIndentTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLowercase.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLowercase.html",
    "title": "Class CloseLowercase | RueI",
    "keywords": "Class CloseLowercase Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing lowercase tags. public class CloseLowercase : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseLowercase Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseMarginTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseMarginTag.html",
    "title": "Class CloseMarginTag | RueI",
    "keywords": "Class CloseMarginTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing indent tags. public class CloseMarginTag : ClosingTag<CloseMarginTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseMarginTag> CloseMarginTag Inherited Members ClosingTag<CloseMarginTag>.Names ClosingTag<CloseMarginTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseMarkTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseMarkTag.html",
    "title": "Class CloseMarkTag | RueI",
    "keywords": "Class CloseMarkTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing mark tags. public class CloseMarkTag : ClosingTag<CloseMarkTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseMarkTag> CloseMarkTag Inherited Members ClosingTag<CloseMarkTag>.Names ClosingTag<CloseMarkTag>.HandleTag(ParserContext) ClosingTag<CloseMarkTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseNobrTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseNobrTag.html",
    "title": "Class CloseNobrTag | RueI",
    "keywords": "Class CloseNobrTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing nobr tags. public class CloseNobrTag : ClosingTag<CloseNobrTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseNobrTag> CloseNobrTag Inherited Members ClosingTag<CloseNobrTag>.Names ClosingTag<CloseNobrTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseNoparseTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseNoparseTag.html",
    "title": "Class CloseNoparseTag | RueI",
    "keywords": "Class CloseNoparseTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing noparse tags. public class CloseNoparseTag : ClosingTag<CloseNoparseTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseNoparseTag> CloseNoparseTag Inherited Members ClosingTag<CloseNoparseTag>.Names ClosingTag<CloseNoparseTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The RueI Parser allows this tag to be matched even when ShouldParse is false. This replicates the behavior of normal TextMesh Pro. Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseRotateTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseRotateTag.html",
    "title": "Class CloseRotateTag | RueI",
    "keywords": "Class CloseRotateTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing rotate tags. public class CloseRotateTag : ClosingTag<CloseRotateTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseRotateTag> CloseRotateTag Inherited Members ClosingTag<CloseRotateTag>.Names ClosingTag<CloseRotateTag>.HandleTag(ParserContext) ClosingTag<CloseRotateTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseScaleTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseScaleTag.html",
    "title": "Class CloseScaleTag | RueI",
    "keywords": "Class CloseScaleTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing scale tags. public class CloseScaleTag : ClosingTag<CloseScaleTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseScaleTag> CloseScaleTag Inherited Members ClosingTag<CloseScaleTag>.Names ClosingTag<CloseScaleTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSizeTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSizeTag.html",
    "title": "Class CloseSizeTag | RueI",
    "keywords": "Class CloseSizeTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing size tags. public class CloseSizeTag : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseSizeTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSmallcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSmallcapsTag.html",
    "title": "Class CloseSmallcapsTag | RueI",
    "keywords": "Class CloseSmallcapsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing smallcaps tags. public class CloseSmallcapsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseSmallcapsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseStrikethroughTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseStrikethroughTag.html",
    "title": "Class CloseStrikethroughTag | RueI",
    "keywords": "Class CloseStrikethroughTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing strikethrough tags. public class CloseStrikethroughTag : ClosingTag<CloseStrikethroughTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseStrikethroughTag> CloseStrikethroughTag Inherited Members ClosingTag<CloseStrikethroughTag>.Names ClosingTag<CloseStrikethroughTag>.HandleTag(ParserContext) ClosingTag<CloseStrikethroughTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSubscriptTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSubscriptTag.html",
    "title": "Class CloseSubscriptTag | RueI",
    "keywords": "Class CloseSubscriptTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing subscript tags. public class CloseSubscriptTag : ClosingTag<CloseSubscriptTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseSubscriptTag> CloseSubscriptTag Inherited Members ClosingTag<CloseSubscriptTag>.Names ClosingTag<CloseSubscriptTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSuperscriptTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSuperscriptTag.html",
    "title": "Class CloseSuperscriptTag | RueI",
    "keywords": "Class CloseSuperscriptTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing superscript tags. public class CloseSuperscriptTag : ClosingTag<CloseSuperscriptTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseSuperscriptTag> CloseSuperscriptTag Inherited Members ClosingTag<CloseSuperscriptTag>.Names ClosingTag<CloseSuperscriptTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseUnderlineTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseUnderlineTag.html",
    "title": "Class CloseUnderlineTag | RueI",
    "keywords": "Class CloseUnderlineTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing underline tags. public class CloseUnderlineTag : ClosingTag<CloseUnderlineTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseUnderlineTag> CloseUnderlineTag Inherited Members ClosingTag<CloseUnderlineTag>.Names ClosingTag<CloseUnderlineTag>.HandleTag(ParserContext) ClosingTag<CloseUnderlineTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseVOffsetTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseVOffsetTag.html",
    "title": "Class CloseVOffsetTag | RueI",
    "keywords": "Class CloseVOffsetTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing voffset tags. public class CloseVOffsetTag : ClosingTag<CloseVOffsetTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseVOffsetTag> CloseVOffsetTag Inherited Members ClosingTag<CloseVOffsetTag>.Names ClosingTag<CloseVOffsetTag>.HandleTag(ParserContext) ClosingTag<CloseVOffsetTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ColorTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ColorTag.html",
    "title": "Class ColorTag | RueI",
    "keywords": "Class ColorTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle color tags. public class ColorTag : RichTextTag Inheritance object RichTextTag ColorTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.IndentTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.IndentTag.html",
    "title": "Class IndentTag | RueI",
    "keywords": "Class IndentTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle indent tags. public class IndentTag : MeasurementTag Inheritance object RichTextTag MeasurementTag IndentTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ItalicsAngleTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ItalicsAngleTag.html",
    "title": "Class ItalicsAngleTag | RueI",
    "keywords": "Class ItalicsAngleTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle italic angles tags. public class ItalicsAngleTag : RichTextTag Inheritance object RichTextTag ItalicsAngleTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ItalicsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ItalicsTag.html",
    "title": "Class ItalicsTag | RueI",
    "keywords": "Class ItalicsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle italics tags. public class ItalicsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag ItalicsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LineHeightTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LineHeightTag.html",
    "title": "Class LineHeightTag | RueI",
    "keywords": "Class LineHeightTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle line-height tags. public class LineHeightTag : MeasurementTag Inheritance object RichTextTag MeasurementTag LineHeightTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LineIndentTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LineIndentTag.html",
    "title": "Class LineIndentTag | RueI",
    "keywords": "Class LineIndentTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle line indent tags. public class LineIndentTag : MeasurementTag Inheritance object RichTextTag MeasurementTag LineIndentTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LowercaseTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LowercaseTag.html",
    "title": "Class LowercaseTag | RueI",
    "keywords": "Class LowercaseTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle lowercase tags. public class LowercaseTag : NoParamsTag Inheritance object RichTextTag NoParamsTag LowercaseTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.MarginLeft.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.MarginLeft.html",
    "title": "Class MarginLeft | RueI",
    "keywords": "Class MarginLeft Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle margin tags. public class MarginLeft : MeasurementTag Inheritance object RichTextTag MeasurementTag MarginLeft Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.MarginRight.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.MarginRight.html",
    "title": "Class MarginRight | RueI",
    "keywords": "Class MarginRight Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle margin tags. public class MarginRight : MeasurementTag Inheritance object RichTextTag MeasurementTag MarginRight Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.MarginTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.MarginTag.html",
    "title": "Class MarginTag | RueI",
    "keywords": "Class MarginTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle margin tags. public class MarginTag : MeasurementTag Inheritance object RichTextTag MeasurementTag MarginTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.MarkTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.MarkTag.html",
    "title": "Class MarkTag | RueI",
    "keywords": "Class MarkTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle mark tags. public class MarkTag : RichTextTag Inheritance object RichTextTag MarkTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.NobrTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.NobrTag.html",
    "title": "Class NobrTag | RueI",
    "keywords": "Class NobrTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle nobr tags. public class NobrTag : NoParamsTag Inheritance object RichTextTag NoParamsTag NobrTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.NoparseTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.NoparseTag.html",
    "title": "Class NoparseTag | RueI",
    "keywords": "Class NoparseTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle noparse tags. public class NoparseTag : NoParamsTag Inheritance object RichTextTag NoParamsTag NoparseTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.PageTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.PageTag.html",
    "title": "Class PageTag | RueI",
    "keywords": "Class PageTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle page tags. public class PageTag : NoParamsTag Inheritance object RichTextTag NoParamsTag PageTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.PosTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.PosTag.html",
    "title": "Class PosTag | RueI",
    "keywords": "Class PosTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle pos tags. public class PosTag : MeasurementTag Inheritance object RichTextTag MeasurementTag PosTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.RotateTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.RotateTag.html",
    "title": "Class RotateTag | RueI",
    "keywords": "Class RotateTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle rotate tags. public class RotateTag : MeasurementTag Inheritance object RichTextTag MeasurementTag RotateTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ScaleTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ScaleTag.html",
    "title": "Class ScaleTag | RueI",
    "keywords": "Class ScaleTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle scale tags. public class ScaleTag : RichTextTag Inheritance object RichTextTag ScaleTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SizeTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SizeTag.html",
    "title": "Class SizeTag | RueI",
    "keywords": "Class SizeTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle size tags. public class SizeTag : MeasurementTag Inheritance object RichTextTag MeasurementTag SizeTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SmallcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SmallcapsTag.html",
    "title": "Class SmallcapsTag | RueI",
    "keywords": "Class SmallcapsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle smallcaps tags. public class SmallcapsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag SmallcapsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SpaceTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SpaceTag.html",
    "title": "Class SpaceTag | RueI",
    "keywords": "Class SpaceTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle space tags. public class SpaceTag : MeasurementTag Inheritance object RichTextTag MeasurementTag SpaceTag Inherited Members MeasurementTag.TagStyle MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AllowPercentages Gets a value indicating whether or not this tag allows parentheses. public override bool AllowPercentages { get; } Property Value bool Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.StrikethroughTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.StrikethroughTag.html",
    "title": "Class StrikethroughTag | RueI",
    "keywords": "Class StrikethroughTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle strikethrough tags. public class StrikethroughTag : NoParamsTag Inheritance object RichTextTag NoParamsTag StrikethroughTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SubscriptTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SubscriptTag.html",
    "title": "Class SubscriptTag | RueI",
    "keywords": "Class SubscriptTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle subscript tags. public class SubscriptTag : NoParamsTag Inheritance object RichTextTag NoParamsTag SubscriptTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SuperscriptTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SuperscriptTag.html",
    "title": "Class SuperscriptTag | RueI",
    "keywords": "Class SuperscriptTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle superscript tags. public class SuperscriptTag : NoParamsTag Inheritance object RichTextTag NoParamsTag SuperscriptTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.UnderlineTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.UnderlineTag.html",
    "title": "Class UnderlineTag | RueI",
    "keywords": "Class UnderlineTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle underline tags. public class UnderlineTag : NoParamsTag Inheritance object RichTextTag NoParamsTag UnderlineTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.VOffsetTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.VOffsetTag.html",
    "title": "Class VOffsetTag | RueI",
    "keywords": "Class VOffsetTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle voffset tags. public class VOffsetTag : MeasurementTag Inheritance object RichTextTag MeasurementTag VOffsetTag Inherited Members MeasurementTag.TagStyle MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AllowPercentages Gets a value indicating whether or not this tag allows parentheses. public override bool AllowPercentages { get; } Property Value bool Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.html",
    "title": "Namespace RueI.Parsing.Tags.ConcreteTags | RueI",
    "keywords": "Namespace RueI.Parsing.Tags.ConcreteTags Classes AlignTag Provides a way to handle align tags. AllcapsTag Provides a way to handle allcaps tags. AlphaTag Provides a way to handle alpha tags. BoldTag Provides a way to handle bold tags. BrTag Provides a way to handle br tags. CSpaceTag Provides a way to handle cspace tags. CloseAlignTag Provides a way to handle closing align tags. CloseAllcapsTag Provides a way to handle closing allcaps tags. CloseAlphaTag Provides a way to handle closing alpha tags. CloseBoldTag Provides a way to handle closing bold tags. CloseCSpaceTag Provides a way to handle closing cspace tags. CloseColorTag Provides a way to handle closing color tags. CloseIndentTag Provides a way to handle closing indent tags. CloseItalicsTag Provides a way to handle closing italics tags. CloseLineHeightTag Provides a way to handle closing line height tags. CloseLineIndentTag Provides a way to handle closing line indent tags. CloseLowercase Provides a way to handle closing lowercase tags. CloseMarginTag Provides a way to handle closing indent tags. CloseMarkTag Provides a way to handle closing mark tags. CloseNobrTag Provides a way to handle closing nobr tags. CloseNoparseTag Provides a way to handle closing noparse tags. CloseRotateTag Provides a way to handle closing rotate tags. CloseScaleTag Provides a way to handle closing scale tags. CloseSizeTag Provides a way to handle closing size tags. CloseSmallcapsTag Provides a way to handle closing smallcaps tags. CloseStrikethroughTag Provides a way to handle closing strikethrough tags. CloseSubscriptTag Provides a way to handle closing subscript tags. CloseSuperscriptTag Provides a way to handle closing superscript tags. CloseUnderlineTag Provides a way to handle closing underline tags. CloseVOffsetTag Provides a way to handle closing voffset tags. ColorTag Provides a way to handle color tags. IndentTag Provides a way to handle indent tags. ItalicsAngleTag Provides a way to handle italic angles tags. ItalicsTag Provides a way to handle italics tags. LineHeightTag Provides a way to handle line-height tags. LineIndentTag Provides a way to handle line indent tags. LowercaseTag Provides a way to handle lowercase tags. MarginLeft Provides a way to handle margin tags. MarginRight Provides a way to handle margin tags. MarginTag Provides a way to handle margin tags. MarkTag Provides a way to handle mark tags. NobrTag Provides a way to handle nobr tags. NoparseTag Provides a way to handle noparse tags. PageTag Provides a way to handle page tags. PosTag Provides a way to handle pos tags. RotateTag Provides a way to handle rotate tags. ScaleTag Provides a way to handle scale tags. SizeTag Provides a way to handle size tags. SmallcapsTag Provides a way to handle smallcaps tags. SpaceTag Provides a way to handle space tags. StrikethroughTag Provides a way to handle strikethrough tags. SubscriptTag Provides a way to handle subscript tags. SuperscriptTag Provides a way to handle superscript tags. UnderlineTag Provides a way to handle underline tags. VOffsetTag Provides a way to handle voffset tags."
  },
  "api/RueI.Parsing.Tags.MeasurementTag.html": {
    "href": "api/RueI.Parsing.Tags.MeasurementTag.html",
    "title": "Class MeasurementTag | RueI",
    "keywords": "Class MeasurementTag Namespace RueI.Parsing.Tags Assembly RueI.dll Defines a RichTextTag that only takes in a measurement. public abstract class MeasurementTag : RichTextTag Inheritance object RichTextTag MeasurementTag Derived CSpaceTag IndentTag LineHeightTag LineIndentTag MarginLeft MarginRight MarginTag PosTag RotateTag SizeTag SpaceTag VOffsetTag Inherited Members RichTextTag.Names object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AllowPercentages Gets a value indicating whether or not this tag allows parentheses. public virtual bool AllowPercentages { get; } Property Value bool TagStyle Gets the parameter style of this tag. public override sealed TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public abstract bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false. HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override sealed bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.RichTextTagAttribute.html": {
    "href": "api/RueI.Parsing.Tags.RichTextTagAttribute.html",
    "title": "Class RichTextTagAttribute | RueI",
    "keywords": "Class RichTextTagAttribute Namespace RueI.Parsing.Tags Assembly RueI.dll Defines a RichTextTag for RueI. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class RichTextTagAttribute : Attribute, _Attribute Inheritance object Attribute RichTextTagAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks You can apply this Attribute to classes that inherit from RichTextTag to define a custom RichTextTag easily. This attribute is used exclusive by the AddFromAssembly(Assembly) method."
  },
  "api/RueI.Parsing.Tags.SharedTag-1.html": {
    "href": "api/RueI.Parsing.Tags.SharedTag-1.html",
    "title": "Class SharedTag<T> | RueI",
    "keywords": "Class SharedTag<T> Namespace RueI.Parsing.Tags Assembly RueI.dll Provides a way to handle singletons of tags. public static class SharedTag<T> where T : RichTextTag, new() Type Parameters T The RichTextTag type to share. Inheritance object SharedTag<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class provides a way to guarantee that only one instance of a tag will ever be used by the parser, since tags are not static to support inheritance but must act similar to it. Properties Singleton Gets the shared singleton for this RichTextTag. public static T Singleton { get; } Property Value T"
  },
  "api/RueI.Parsing.Tags.TagHelpers.html": {
    "href": "api/RueI.Parsing.Tags.TagHelpers.html",
    "title": "Class TagHelpers | RueI",
    "keywords": "Class TagHelpers Namespace RueI.Parsing.Tags Assembly RueI.dll Provides a number of helper functions for RichTextTags. public static class TagHelpers Inheritance object TagHelpers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ExtractFromQuotations(string) Validates and extracts the text from inside quotations for tag parameters, or returns the original string. public static string? ExtractFromQuotations(string str) Parameters str string The string to extract the quotations from. Returns string The string with the quotes removed, or null if the string is invalid. Examples This code demonstrates the behavior of ExtractFromQuotations(string). ExtractFromQuotations(\"\\\"hello world\\\"\") // -> hello world ExtractFromQuotations(\"hello world\") // -> hello world ExtractFromQuotations(\"\\\"hello world\") // -> null ExtractFromQuotations(\"hello world\\\"\") // -> null"
  },
  "api/RueI.Parsing.Tags.html": {
    "href": "api/RueI.Parsing.Tags.html",
    "title": "Namespace RueI.Parsing.Tags | RueI",
    "keywords": "Namespace RueI.Parsing.Tags Classes MeasurementTag Defines a RichTextTag that only takes in a measurement. RichTextTagAttribute Defines a RichTextTag for RueI. SharedTag<T> Provides a way to handle singletons of tags. TagHelpers Provides a number of helper functions for RichTextTags."
  },
  "api/RueI.Parsing.TextInfo.html": {
    "href": "api/RueI.Parsing.TextInfo.html",
    "title": "Class TextInfo | RueI",
    "keywords": "Class TextInfo Namespace RueI.Parsing Assembly RueI.dll Provides information about TMP text at a certain point. public class TextInfo Inheritance object TextInfo Derived ParserContext Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class provides information necessary for individual character sizes, but does not provide the required information to calculate vertical offsets and total line widths. For that, use the derived class ParserContext. Properties CurrentCSpace Gets or sets the current additional character spacing of the text. public float CurrentCSpace { get; set; } Property Value float CurrentCase Gets or sets the current case of the parser. public CaseStyle CurrentCase { get; set; } Property Value CaseStyle CurrentLineHeight Gets or sets the current line height of the parser. public float CurrentLineHeight { get; set; } Property Value float IsBold Gets or sets a value indicating whether or not the characters are currently bold. public bool IsBold { get; set; } Property Value bool IsMonospace Gets or sets a value indicating whether the characters are currently in monospace. public bool IsMonospace { get; set; } Property Value bool IsSubscript Gets or sets a value indicating whether or not the parser is in subscript. public bool IsSubscript { get; set; } Property Value bool IsSuperscript Gets or sets a value indicating whether or not the parser is in superscript. public bool IsSuperscript { get; set; } Property Value bool Monospacing Gets or sets the monospacing of the text. public float Monospacing { get; set; } Property Value float Remarks If IsMonospace is false, this value will be ignored. Scale Gets or sets the scale of the parser. public float Scale { get; set; } Property Value float Size Gets or sets the current character of the parser. public float Size { get; set; } Property Value float"
  },
  "api/RueI.Parsing.html": {
    "href": "api/RueI.Parsing.html",
    "title": "Namespace RueI.Parsing | RueI",
    "keywords": "Namespace RueI.Parsing The RueI.Parsing namespace contains a large number of classes mostly used internally by RueI. Notably, classes within this namespace can be used to create custom tags. Additionally, if you want to calculate and parse hints, you can use this namespace. Classes CharacterLengths Provides lengths for characters in hints. ClosingTag<T> Defines the base class for all rich text tags. NoParamsTag Defines a RichTextTag that does not take in parameters. Parser Helps parse the content of elements. This class cannot be inherited. ParserBuilder Builds Parsers. ParserContext Describes the state of a parser at a time. RichTextTag Defines the base class for all rich text tags. TextInfo Provides information about TMP text at a certain point."
  },
  "api/RueI.Patches.HintPatch.html": {
    "href": "api/RueI.Patches.HintPatch.html",
    "title": "Class HintPatch | RueI",
    "keywords": "Class HintPatch Namespace RueI.Patches Assembly RueI.dll Patches HintDisplay.Show to detect when hints are shown. [HarmonyPatch(typeof(HintDisplay), \"Show\")] public static class HintPatch Inheritance object HintPatch Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks RueI patches the HintDisplay.Show method so that it can get an accurate state of the player's hint display at any given time. When a hint outside of RueI is shown, it schedules an update that occurs after 3 seconds. Methods Transpiler(IEnumerable<CodeInstruction>, ILGenerator) Patches HintDisplay.Show to detect when hints are shown. [HarmonyTranspiler] public static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions, ILGenerator generator) Parameters instructions IEnumerable<CodeInstruction> The original instructions. generator ILGenerator An ILGenerator to use. Returns IEnumerable<CodeInstruction> The new instructions."
  },
  "api/RueI.Patches.PatchHelper.html": {
    "href": "api/RueI.Patches.PatchHelper.html",
    "title": "Class PatchHelper | RueI",
    "keywords": "Class PatchHelper Namespace RueI.Patches Assembly RueI.dll Provides helpful functions for working with patches. public class PatchHelper Inheritance object PatchHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods DelegeteMatch<T>(Type, string) Finds a matching method using the provided Delegate and name in a type. public static MethodInfo? DelegeteMatch<T>(Type type, string name) where T : Delegate Parameters type Type The type of the class to search. name string The name of the method. Returns MethodInfo The MethodInfo of the found method, or null if it was not found. Type Parameters T The type of the delegate."
  },
  "api/RueI.Patches.html": {
    "href": "api/RueI.Patches.html",
    "title": "Namespace RueI.Patches | RueI",
    "keywords": "Namespace RueI.Patches Classes HintPatch Patches HintDisplay.Show to detect when hints are shown. PatchHelper Provides helpful functions for working with patches."
  },
  "api/RueI.RueIMain.html": {
    "href": "api/RueI.RueIMain.html",
    "title": "Class RueIMain | RueI",
    "keywords": "Class RueIMain Namespace RueI Assembly RueI.dll Represents the main class for RueI. public static class RueIMain Inheritance object RueIMain Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The RueIMain class is responsible for properly initializing all of RueI. Fields HARMONYID Gets the HarmonyLib.Harmony id for RueI. public const string HARMONYID = \"RueI_Hint_Dependency\" Field Value string Version Gets the current version of RueI. public static readonly Version Version Field Value Version Methods EnsureInit() Ensures that RueI is properly initialized. public static void EnsureInit()"
  },
  "api/RueI.Ruetility.html": {
    "href": "api/RueI.Ruetility.html",
    "title": "Class Ruetility | RueI",
    "keywords": "Class Ruetility Namespace RueI Assembly RueI.dll Provides helpful functions for dealing with elements and hints. public static class Ruetility Inheritance object Ruetility Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Ruetility is a helper class that provides methods for handling scaled and functional values, along with other helpful methods that may not work exclusively with hints. Methods FunctionalToScaledPosition(float) Converts a functional position into a scaled position. public static float FunctionalToScaledPosition(float position) Parameters position float The position to convert. Returns float The converted value. GetCleanText(string) Cleans a string by wrapping it in noparses, and removes any noparse closer tags existing in it already. public static string GetCleanText(string text) Parameters text string The string to clean. Returns string The cleaned string. ScaledPositionToFunctional(float) Converts a scaled position from 0-1000 into functional pixels (offset from baseline). public static float ScaledPositionToFunctional(float position) Parameters position float The position to convert. Returns float The converted value."
  },
  "api/RueI.UnityAlternative.IAsyncOperation.html": {
    "href": "api/RueI.UnityAlternative.IAsyncOperation.html",
    "title": "Interface UnityAlternative.IAsyncOperation | RueI",
    "keywords": "Interface UnityAlternative.IAsyncOperation Namespace RueI Assembly RueI.dll Represents a generalized handler for an async operation. public interface UnityAlternative.IAsyncOperation : IDisposable Inherited Members IDisposable.Dispose() Properties IsRunning Gets a value indicating whether or not this operation is currently running. bool IsRunning { get; } Property Value bool Methods Cancel() Cancels this operation. void Cancel()"
  },
  "api/RueI.UnityAlternative.html": {
    "href": "api/RueI.UnityAlternative.html",
    "title": "Class UnityAlternative | RueI",
    "keywords": "Class UnityAlternative Namespace RueI Assembly RueI.dll Defines the base class for a provider of methods that may or may not use Unity. public abstract class UnityAlternative Inheritance object UnityAlternative Derived NonUnityProvider UnityProvider Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The UnityAlternative class is primarily intended for internal use within RueI. This enables certain features to work even outside of SCP:SL and Unity, which is utilized primarily for unit-testing. Properties Provider Gets the current UnityAlternative of the application. public static UnityAlternative Provider { get; } Property Value UnityAlternative Methods Log(string, ConsoleColor) Logs a message to the console. public abstract void Log(string message, ConsoleColor color = ConsoleColor.Yellow) Parameters message string The message to log. color ConsoleColor The color of the message. LogDebug(string) Logs a debug message to the console. [Conditional(\"DEBUG\")] public abstract void LogDebug(string message) Parameters message string The debug message to log. LogWarn(string) Logs a warning message to the console. public abstract void LogWarn(string message) Parameters message string The warn message to log. PatchAll(Harmony) Loads all patches. public abstract void PatchAll(Harmony harmony) Parameters harmony Harmony The HarmonyLib.Harmony instance to use. PerformAsync(TimeSpan, Action) Performs an async operation. public abstract UnityAlternative.IAsyncOperation PerformAsync(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Returns UnityAlternative.IAsyncOperation A UnityAlternative.IAsyncOperation to use."
  },
  "api/RueI.UnityProvider.MECAsyncOperation.html": {
    "href": "api/RueI.UnityProvider.MECAsyncOperation.html",
    "title": "Class UnityProvider.MECAsyncOperation | RueI",
    "keywords": "Class UnityProvider.MECAsyncOperation Namespace RueI Assembly RueI.dll Represents an async operation using a CoroutineHandle. public class UnityProvider.MECAsyncOperation : UnityAlternative.IAsyncOperation, IDisposable Inheritance object UnityProvider.MECAsyncOperation Implements UnityAlternative.IAsyncOperation IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors MECAsyncOperation(TimeSpan, Action) Initializes a new instance of the UnityProvider.MECAsyncOperation class, and then immediately runs. public MECAsyncOperation(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Properties IsRunning Gets a value indicating whether or not this operation is currently running. public bool IsRunning { get; } Property Value bool Methods Cancel() Cancels this operation. public void Cancel() Dispose() Disposes this MEC operation. public void Dispose()"
  },
  "api/RueI.UnityProvider.html": {
    "href": "api/RueI.UnityProvider.html",
    "title": "Class UnityProvider | RueI",
    "keywords": "Class UnityProvider Namespace RueI Assembly RueI.dll Provides Unity methods for the application. public class UnityProvider : UnityAlternative Inheritance object UnityAlternative UnityProvider Inherited Members UnityAlternative.Provider object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Log(string, ConsoleColor) Logs a message to the console. public override void Log(string message, ConsoleColor color = ConsoleColor.Yellow) Parameters message string The message to log. color ConsoleColor The color of the message. LogDebug(string) Logs a debug message to the console. public override void LogDebug(string message) Parameters message string The debug message to log. LogWarn(string) Logs a warning message to the console. public override void LogWarn(string message) Parameters message string The warn message to log. PatchAll(Harmony) Loads all patches. public override void PatchAll(Harmony harmony) Parameters harmony Harmony The HarmonyLib.Harmony instance to use. PerformAsync(TimeSpan, Action) Performs an async operation. public override UnityAlternative.IAsyncOperation PerformAsync(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Returns UnityAlternative.IAsyncOperation A UnityAlternative.IAsyncOperation to use."
  },
  "api/RueI.html": {
    "href": "api/RueI.html",
    "title": "Namespace RueI | RueI",
    "keywords": "Namespace RueI The RueI namespace contains classes shared across all of RueI. Generally, you shouldn't need to use the classes and interfaces within this namespace. The exception is the RueIMain class that contains the EnsureInit() method, which should be called by any plugin using RueI upon being loaded. Classes Constants Provides a variety of constant values. NonUnityProvider Provides non-Unity alternatives for the UnityProvider of the application. NonUnityProvider.TaskAsyncOperation Represents an async operation using a Task. RueIMain Represents the main class for RueI. Ruetility Provides helpful functions for dealing with elements and hints. UnityAlternative Defines the base class for a provider of methods that may or may not use Unity. UnityProvider Provides Unity methods for the application. UnityProvider.MECAsyncOperation Represents an async operation using a CoroutineHandle. Interfaces UnityAlternative.IAsyncOperation Represents a generalized handler for an async operation."
  },
  "index.html": {
    "href": "index.html",
    "title": "RueI | RueI",
    "keywords": "RueI RueI is a hint framework for scp:sl. it provides the ability to show multiple hints at once, along with a lot of other features for server owners installing RueI is easy. download the dll, and move it into your dependencies folder for the plugin framework you are using. note that RueI requires Harmony 2.2.2, you can get that here."
  },
  "markdown/basic-concepts.html": {
    "href": "markdown/basic-concepts.html",
    "title": "Basic Concepts | RueI",
    "keywords": "Basic Concepts this serves as a basic introduction to RueI concepts and functionality. the most basic components of RueI are Elements, which act like individual hints with their own content. elements are contained within DisplayBases. elements are not tied to a player (so you can have an instance of an element in multiple displays at once), but displays are. finally, every ReferenceHub (player) in RueI has an associated DisplayCore, which manages all of the displays for a player and combines the elements in them to one hint. every DisplayCore also has a Scheduler, enabling synchronized delayed updates. there are two element types that RueI provides out of the box: SetElement: a very simple element with settable content DynamicElement: an element that, when the display is updated/refreshed, gets its content by calling a function. every time you update something in RueI, such as the content of an element, you must update the DisplayCore by calling DisplayCore.Update(). you can get the DisplayCore for a player by calling DisplayCore.Get(ReferenceHub). while it's easy to forget to do this, this is unfortunately necessary."
  },
  "markdown/customtags.html": {
    "href": "markdown/customtags.html",
    "title": "Creating Custom Tags | RueI",
    "keywords": "Creating Custom Tags RueI supports creating custom rich text tags. all rich text tags should ultimately derive from RichTextTag. if you need certain parameter types, there are a few abstract subclasses that automatically parse their parameters. for measurement tags (e.g <line-height=5em>) use"
  },
  "markdown/eMec.html": {
    "href": "markdown/eMec.html",
    "title": "eMEC | RueI",
    "keywords": "eMEC eMEC is a wrapper for MEC that is used by RueI. it is absolutely not necessary to use it in your own plugins, but it does provide some utility. eMEC provides a few notable advantages over the usual MEC. firstly, it is much higher level - you do not directly manipulate CoroutineHandles directly. instead, you use TaskBases (not to be confused with .NET Tasks). secondly, if RueI detects that it is not running in Unity, it will automatically swap over to using .NET tasks, which means that you can do unit tests on things that use TaskBases but also use them normally in scp:sl."
  },
  "markdown/getting-started.html": {
    "href": "markdown/getting-started.html",
    "title": "Getting Started | RueI",
    "keywords": "Getting Started this guide assumes that you have a basic level of knowledge with c#. there are three main ways of using RueI: as a 'hard' dependency, as a 'soft' dependency, or through reflection. with a hard dependency, you directly reference RueI and use it in place of hints. the advantages of this are that it gives you type safety, it is significantly faster, and it is just overall much easier to use. however, if someone does not have RueI installed, then your plugin will stop working. this makes it ideal for plugins that rely on RueI heavily, or if you're creating a plugin for your own use. a soft dependency still means that you reference RueI, but you also provide alternatives using normal hints and switch to those alternatives if RueI isn't detected, ideally using a dependency injection model. this requires you to carefully avoid type load exceptions, but doesn't have penalties to speed or type safety. using reflection, you can dynamically add support for RueI, meaning that you don't have it reference it at all. reflection, however, is slow and does not provide any of the compile-time guarantees of the first two options, making it much harder to work with. the way that you should use RueI depends on who your plugin is for and what it's doing. if you're making a private plugin or want to make use of all of the features of RueI, then you should make it a hard dependency. if your plugin is small and/or extensively uses hints, you should use it as a soft dependency. finally, if your plugin only uses hints occassionally, reflection is the best choice. this guide will cover how to use RueI using the first option, as a normal hard dependency. installing RueI to install RueI as a dependency, you'll want to add it through nuget. this depends on which code editor you're using, but you can also install it through the command line. the nuget package for RueI is available here. after you've done that, make sure you put the RueI dll in your dependencies folder for the plugin manager you're using. you can get the latest release here. using RueI using RueI is pretty simple. you can import it using the using statement. make sure that in the method called when your plugin is loaded you call the RueIMain.EnsureInit function - this ensures everything is properly initialized for RueI."
  },
  "markdown/hintbuilding.html": {
    "href": "markdown/hintbuilding.html",
    "title": "HintBuilding Extensions | RueI",
    "keywords": "HintBuilding Extensions RueI provides extensions to StringBuilder through the HintBuilding class. this provides a large number of methods on StringBuilder to make adding tags easier and less error-prone. to use this, you first bring the class into scope: using RueI.Extensions.HintBuilding; then, you can use it like so: StringBuilder sb = new() .SetColor(255, 0, 0) .SetSize(1.5, MeasurementStyle.Ems) .Append(\"hello!\") .CloseColor() .CloseSize(); since all of the methods return the original StringBuilder, you can chain them easily."
  },
  "markdown/introduction.html": {
    "href": "markdown/introduction.html",
    "title": "Introduction | RueI",
    "keywords": "Introduction RueI is a hint framework for scp:sl. the primary component of RueI is the ability to display multiple hints at once, but it also provides a lot of other features to make working with hints easier and more effective. a quick note: RueI is licensed under CC0 1.0. this means you can do whatever you want with both its compiled versions and its source code. commerical use, modifications, etc, are all okay! :) RueI is a dependency. it is a not a plugin. this means that it does not provide any functionality out of the box. other plugins will not work automatically once you install this if they do not have built-in support for RueI."
  },
  "markdown/scheduling.html": {
    "href": "markdown/scheduling.html",
    "title": "Using the Scheduler | RueI",
    "keywords": "Using the Scheduler RueI comes with the Scheduler, and every display has one of them. the main purpose of the Scheduler is to provide an easy way to update the display at a certain time, and to provide a way to batch updates together to prevent getting ratelimited. normally, the hints system comes with a 0.5 second ratelimit. if you send a hint (which updating the display does), you cannot send another one for 0.5 seconds*. this can easily create problems. for example, what if you update the display in 0.3 seconds and 0.5 seconds? normally, the first update would show, but then the second update would not show up until in 0.8 seconds. this might not seem like the biggest problem, but it can make things look weird because of the delay. instead, what RueI will do is batch those two operations together, averaging the times. so, in that example, it will update the display in 0.4 seconds (assuming they both have the same priority). How to do it scheduling a job is pretty easy. first, you have to get the DisplayCore of a player, and then access the DisplayCore.Scheduler property. then you can use the Scheduler.Schedule method to schedule jobs. here's an example: // assuming hub is previously defined as a ReferenceHub SetElement element = new(300, \"Hello!!\"); DisplayCore core = DisplayCore.Get(hub); Display display = new(core); core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () => display.Elements.Add(element)); notice how you do not have to explicitly call display.Update() or core.Update(). this is because, once RueI performs a batch job, it automatically updates the display. updating the display in a batch job doesn't do anything as the DisplayCore ignores all update requests when it is performing a batch job. so, this does nothing: core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () => core.Update()); Canceling a job often, you're going to want to cancel a job that is ongoing. however, RueI does not return a reference to a job that you can then use to cancel it. instead, you use a JobToken. you can then pass a JobToken in the Scheduler.Schedule() method. the benefit of this is that since you can declare a static JobToken singleton, you can ensure that there is only ever one instance of a certain job. here's an example: public static JobToken HelloToken { get; } = new(); public void UpdateDisplay(ReferenceHub hub) { SetElement element = new(300, \"Hello!!\"); DisplayCore core = DisplayCore.Get(hub); Display display = new(core); core.Scheduler.KillJob(HelloToken); core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () => display.Elements.Add(element)); } with this, you won't ever have to worry about having multiple instances of the same job. * it is more complicated than this, technically. however, RueI enforces a 0.525 second ratelimit, so you won't notice it."
  }
}