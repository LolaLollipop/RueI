{
  "README.html": {
    "href": "README.html",
    "title": "RueI | RueI",
    "keywords": "RueI RueI is a hint framework for scp:sl docs are available here. Features support for displaying multiple hints at once without them interfering with eachother cross-plugin compatibility custom tags and other utility scheduler system, which makes dealing with the hint ratelimit easier RueI is not a grid-based or line-based system, it calculates the offset necessary to put a hint at the same position no matter what"
  },
  "api/RueI.CharacterLengths.html": {
    "href": "api/RueI.CharacterLengths.html",
    "title": "Class CharacterLengths | RueI",
    "keywords": "Class CharacterLengths Namespace RueI Assembly RueI.dll Provides a variety of constant values. public static class CharacterLengths Inheritance object CharacterLengths Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class is mosty designed for internal use within RueI. However, they can still be useful for external use. Properties Lengths Gets a IReadOnlyDictionary<TKey, TValue> of character sizes. public static IReadOnlyDictionary<char, float> Lengths { get; } Property Value IReadOnlyDictionary<char, float>"
  },
  "api/RueI.Constants.html": {
    "href": "api/RueI.Constants.html",
    "title": "Class Constants | RueI",
    "keywords": "Class Constants Namespace RueI Assembly RueI.dll Provides a variety of constant values. public static class Constants Inheritance object Constants Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class is mosty designed for internal use within RueI. However, they can still be useful for external use. Fields BOLDINCREASE Gets the pixel increase for bold characters. public const float BOLDINCREASE = 2.429 Field Value float CAPSTOSMALLCAPS Gets the multiplier used to convert the size of a capital character to a smallcaps character. public const float CAPSTOSMALLCAPS = 0.8 Field Value float DEFAULTHEIGHT Gets the default height if a line-height is not provided. public const float DEFAULTHEIGHT = 40.665 Field Value float Remarks Approximate. DEFAULTSIZE Gets the default size (in pixels) if a size is not provided. public const float DEFAULTSIZE = 34.7 Field Value float Remarks Not approximate. DISPLAYAREAWIDTH Gets the width of the display area (in pixels). public const float DISPLAYAREAWIDTH = 1200 Field Value float EMSTOPIXELS Gets an approximation of how many pixels are an in an em. public const float EMSTOPIXELS = 34.7 Field Value float MAXTAGNAMESIZE Gets the maximum name size allowed for a tag. public const int MAXTAGNAMESIZE = 13 Field Value int Properties Alignments Gets a ReadOnlyCollection<T> of valid alignments for AlignTag. public static ReadOnlyCollection<string> Alignments { get; } Property Value ReadOnlyCollection<string> Colors Gets a list of allowed colors for ColorTag. public static ReadOnlyCollection<string> Colors { get; } Property Value ReadOnlyCollection<string> HintRateLimit Gets the ratelimit used for displaying hints. public static TimeSpan HintRateLimit { get; } Property Value TimeSpan ValidColorSizes Gets a list of allowed sizes of color param tags, ignoring the hashtag. public static ReadOnlyCollection<int> ValidColorSizes { get; } Property Value ReadOnlyCollection<int>"
  },
  "api/RueI.Displays.Display.html": {
    "href": "api/RueI.Displays.Display.html",
    "title": "Class Display | RueI",
    "keywords": "Class Display Namespace RueI.Displays Assembly RueI.dll Represents a display attached to a DisplayCore. public class Display : DisplayBase, IElementContainer Inheritance object DisplayBase Display Implements IElementContainer Inherited Members DisplayBase.IsActive DisplayBase.ReferenceHub DisplayBase.Coordinator DisplayBase.Update() DisplayBase.Delete() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Examples This example demonstrates creating and using a Display. Display display = new(referenceHub); // Create a new display from a ReferenceHub SetElement helloElem = new(300, zIndex: 10, \"hello\").AddTo(display); SetElement worldElem = new(250, zIndex: 10, \"world\").AddTo(display); display.Elements.Add(helloElem, worldElem); display.Update(); // Update the display Constructors Display(ReferenceHub) Initializes a new instance of the Display class. public Display(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to assign the display to. Display(DisplayCore) Initializes a new instance of the Display class. public Display(DisplayCore coordinator) Parameters coordinator DisplayCore The DisplayCore to assign the display to. Properties Elements Gets the elements of this display. public List<IElement> Elements { get; } Property Value List<IElement> Methods GetAllElements() Gets all of the elements of this display. public override IEnumerable<IElement> GetAllElements() Returns IEnumerable<IElement> The IEnumerator<T> of elements."
  },
  "api/RueI.Displays.DisplayBase.html": {
    "href": "api/RueI.Displays.DisplayBase.html",
    "title": "Class DisplayBase | RueI",
    "keywords": "Class DisplayBase Namespace RueI.Displays Assembly RueI.dll Defines the base class for all displays. public abstract class DisplayBase Inheritance object DisplayBase Derived Display ScreenDisplay Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors DisplayBase(ReferenceHub) Initializes a new instance of the DisplayBase class. public DisplayBase(ReferenceHub hub) Parameters hub ReferenceHub The ReferenceHub to assign the display to. DisplayBase(DisplayCore) Initializes a new instance of the DisplayBase class. public DisplayBase(DisplayCore coordinator) Parameters coordinator DisplayCore The DisplayCore to assign the display to. Properties Coordinator Gets the DisplayCore that this display is attached to. public DisplayCore Coordinator { get; } Property Value DisplayCore IsActive Gets a value indicating whether or not this display is active. public bool IsActive { get; } Property Value bool ReferenceHub Gets the ReferenceHub that this display is assigned to. public ReferenceHub ReferenceHub { get; } Property Value ReferenceHub Methods Delete() Deletes this display, removing it from the player's coordinator. public void Delete() GetAllElements() Gets all of the elements of this display. public abstract IEnumerable<IElement> GetAllElements() Returns IEnumerable<IElement> The IEnumerator<T> of elements. Update() Updates the parent DisplayCore of this DisplayBase. public void Update()"
  },
  "api/RueI.Displays.DisplayCore.html": {
    "href": "api/RueI.Displays.DisplayCore.html",
    "title": "Class DisplayCore | RueI",
    "keywords": "Class DisplayCore Namespace RueI.Displays Assembly RueI.dll Is responsible for managing all of the DisplayBases for a ReferenceHub. public class DisplayCore Inheritance object DisplayCore Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors DisplayCore(ReferenceHub) Initializes a new instance of the DisplayCore class. protected DisplayCore(ReferenceHub hub) Parameters hub ReferenceHub The hub to create the display for. Properties Scheduler Gets the Scheduler for this DisplayCore. public Scheduler Scheduler { get; } Property Value Scheduler Methods AddAsReference<T>(ElemReference<T>, T) Adds an IElement as an ElemReference<T>. public void AddAsReference<T>(ElemReference<T> reference, T element) where T : IElement Parameters reference ElemReference<T> The ElemReference<T> to use. element T The IElement to add. Type Parameters T The type of the IElement to add. Get(ReferenceHub) Gets a DisplayCore from a ReferenceHub, or creates it if it doesn't exist. public static DisplayCore Get(ReferenceHub hub) Parameters hub ReferenceHub The hub to get the display for. Returns DisplayCore The DisplayCore. GetElementOrNew<T>(ElemReference<T>, Func<T>) Gets an IElement as T, or creates it. public T GetElementOrNew<T>(ElemReference<T> reference, Func<T> creator) where T : IElement Parameters reference ElemReference<T> The ElemReference<T> to use. creator Func<T> A function that creates a new instance of T if it does not exist. Returns T The instance of T. Type Parameters T The type of the IElement to get. GetElement<T>(ElemReference<T>) Gets an IElement as T if the ElemReference<T> exists within this DisplayCore's element references. public T? GetElement<T>(ElemReference<T> reference) where T : IElement Parameters reference ElemReference<T> The ElemReference<T> to use. Returns T The instance of T if the IElement exists within the DisplayCore's element references, otherwise null. Type Parameters T The type of the IElement to get. SetElementOrNew(ElemReference<SetElement>, string, float) Sets the content of a SetElement ElemReference<T>, or creates it. public void SetElementOrNew(ElemReference<SetElement> reference, string content, float position) Parameters reference ElemReference<SetElement> The ElemReference<T> to use. content string The new content of the SetElement. position float The position of the SetElement if it needs to be created. Update(int) Updates this DisplayCore. public void Update(int priority = 100) Parameters priority int The priority of the update - defaults to 100."
  },
  "api/RueI.Displays.EffectApplier.html": {
    "href": "api/RueI.Displays.EffectApplier.html",
    "title": "Class EffectApplier | RueI",
    "keywords": "Class EffectApplier Namespace RueI.Displays Assembly RueI.dll Provides a means of doing batch operations. public class EffectApplier Inheritance object EffectApplier Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>)"
  },
  "api/RueI.Displays.ElemCombiner.html": {
    "href": "api/RueI.Displays.ElemCombiner.html",
    "title": "Class ElemCombiner | RueI",
    "keywords": "Class ElemCombiner Namespace RueI.Displays Assembly RueI.dll Provides a means of combining IElements. public static class ElemCombiner Inheritance object ElemCombiner Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CalculateOffset(float, float, float) Calculates the offset for two hints. public static float CalculateOffset(float hintOnePos, float hintOneTotalLines, float hintTwoPos) Parameters hintOnePos float The first hint's vertical position. hintOneTotalLines float The first hint's total line-height, excluding the vertical position. hintTwoPos float The second hint's vertical position. Returns float A float indicating the new offset. Combine(IEnumerable<IElement>) Combines multiple IElements into a string. public static string Combine(IEnumerable<IElement> enumElems) Parameters enumElems IEnumerable<IElement> The IEnumerable<T> of IElements to combine. Returns string A string with all of the combined IElements."
  },
  "api/RueI.Displays.ElemReference-1.html": {
    "href": "api/RueI.Displays.ElemReference-1.html",
    "title": "Struct ElemReference<T> | RueI",
    "keywords": "Struct ElemReference<T> Namespace RueI.Displays Assembly RueI.dll Represents a reference to an element present within any number of player's displays. public readonly struct ElemReference<T> : IEquatable<ElemReference<T>> where T : IElement Type Parameters T The type of the element to act as a reference to. Implements IEquatable<ElemReference<T>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors ElemReference() Initializes a new instance of the ElemReference<T> struct. public ElemReference() Methods Equals(ElemReference<T>) Compares this ElemReference<T> to another ElemReference<T>. public bool Equals(ElemReference<T> other) Parameters other ElemReference<T> The other ElemReference<T>. Returns bool A value indicating whether or not the two are equal. Operators implicit operator ElemReference<IElement>(ElemReference<T>) Safely casts this to a ElemReference<T> with IElement generic. public static implicit operator ElemReference<IElement>(ElemReference<T> toCast) Parameters toCast ElemReference<T> The ElemReference<T> to cast. Returns ElemReference<IElement>"
  },
  "api/RueI.Displays.Interfaces.IElementContainer.html": {
    "href": "api/RueI.Displays.Interfaces.IElementContainer.html",
    "title": "Interface IElementContainer | RueI",
    "keywords": "Interface IElementContainer Namespace RueI.Displays.Interfaces Assembly RueI.dll Defines a container for multiple elements. public interface IElementContainer Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Elements Gets the elements of this IElementContainer. List<IElement> Elements { get; } Property Value List<IElement>"
  },
  "api/RueI.Displays.Interfaces.html": {
    "href": "api/RueI.Displays.Interfaces.html",
    "title": "Namespace RueI.Displays.Interfaces | RueI",
    "keywords": "Namespace RueI.Displays.Interfaces Interfaces IElementContainer Defines a container for multiple elements."
  },
  "api/RueI.Displays.Scheduling.Records.ScheduledJob.html": {
    "href": "api/RueI.Displays.Scheduling.Records.ScheduledJob.html",
    "title": "Class ScheduledJob | RueI",
    "keywords": "Class ScheduledJob Namespace RueI.Displays.Scheduling.Records Assembly RueI.dll Defines a scheduled job for a Scheduler. public class ScheduledJob : IComparable<ScheduledJob> Inheritance object ScheduledJob Implements IComparable<ScheduledJob> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods IComparableExtensions.MaxIf<T>(T, bool, T) IComparableExtensions.Max<T>(T, T) UniversalExtensions.AddTo<T>(T, ICollection<T>) Methods CompareTo(ScheduledJob) Compares this ScheduledJob to another job. public int CompareTo(ScheduledJob other) Parameters other ScheduledJob The other ScheduledJob. Returns int An int indicating whether or not the DateTimeOffset of this job comes before or after the other."
  },
  "api/RueI.Displays.Scheduling.Records.html": {
    "href": "api/RueI.Displays.Scheduling.Records.html",
    "title": "Namespace RueI.Displays.Scheduling.Records | RueI",
    "keywords": "Namespace RueI.Displays.Scheduling.Records Classes ScheduledJob Defines a scheduled job for a Scheduler."
  },
  "api/RueI.Displays.Scheduling.Scheduler.RateLimiter.html": {
    "href": "api/RueI.Displays.Scheduling.Scheduler.RateLimiter.html",
    "title": "Class Scheduler.RateLimiter | RueI",
    "keywords": "Class Scheduler.RateLimiter Namespace RueI.Displays.Scheduling Assembly RueI.dll public class Scheduler.RateLimiter Inheritance object Scheduler.RateLimiter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors RateLimiter(int, TimeSpan) Initializes a new instance of the Scheduler.RateLimiter class. public RateLimiter(int tokenLimit, TimeSpan regenRate) Parameters tokenLimit int The maximum number of tokens and the default number of tokens. regenRate TimeSpan How quickly tokens are regenerated after they have been consumed. Properties HasTokens public bool HasTokens { get; } Property Value bool RegenRate public TimeSpan RegenRate { get; set; } Property Value TimeSpan Tokens public int Tokens { get; } Property Value int Methods CalculateNewTokens() public void CalculateNewTokens() Consume() public void Consume()"
  },
  "api/RueI.Displays.Scheduling.Scheduler.html": {
    "href": "api/RueI.Displays.Scheduling.Scheduler.html",
    "title": "Class Scheduler | RueI",
    "keywords": "Class Scheduler Namespace RueI.Displays.Scheduling Assembly RueI.dll Provides a means of doing batch operations. public class Scheduler Inheritance object Scheduler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors Scheduler(DisplayCore) Initializes a new instance of the Scheduler class. public Scheduler(DisplayCore coordinator) Parameters coordinator DisplayCore The DisplayCore to use. Methods CalculateWeighted(IEnumerable<ScheduledJob>) Calculates the weighted time for a list of jobs to be performed. public static DateTimeOffset CalculateWeighted(IEnumerable<ScheduledJob> jobs) Parameters jobs IEnumerable<ScheduledJob> The jobs. Returns DateTimeOffset The weighted DateTimeOffset of all of the jobs. Schedule(ScheduledJob) Schedules a job. public void Schedule(ScheduledJob job) Parameters job ScheduledJob The job to schedule. Schedule(Action, TimeSpan, int) Schedules a job. public void Schedule(Action action, TimeSpan time, int priority) Parameters action Action The Action to run. time TimeSpan How long into the future to run the action at. priority int The priority of the job, giving it additional weight when calculating. Schedule(TimeSpan, Action) Schedules a job with a priority of 1. public void Schedule(TimeSpan time, Action action) Parameters time TimeSpan How long into the future to run the action at. action Action The Action to run. Schedule(TimeSpan, Action, int) Schedules a job. public void Schedule(TimeSpan time, Action action, int priority) Parameters time TimeSpan How long into the future to run the action at. action Action The Action to run. priority int The priority of the job, giving it additional weight when calculating."
  },
  "api/RueI.Displays.Scheduling.html": {
    "href": "api/RueI.Displays.Scheduling.html",
    "title": "Namespace RueI.Displays.Scheduling | RueI",
    "keywords": "Namespace RueI.Displays.Scheduling Classes Scheduler Provides a means of doing batch operations. Scheduler.RateLimiter"
  },
  "api/RueI.Displays.Screen.html": {
    "href": "api/RueI.Displays.Screen.html",
    "title": "Class Screen | RueI",
    "keywords": "Class Screen Namespace RueI.Displays Assembly RueI.dll Represents a IElementContainer inside a ScreenDisplay. public class Screen : IElementContainer Inheritance object Screen Implements IElementContainer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors Screen() Initializes a new instance of the Screen class. public Screen() Screen(ScreenDisplay) Initializes a new instance of the Screen class. public Screen(ScreenDisplay scrDisplay) Parameters scrDisplay ScreenDisplay The ScreenDisplay to add this to. Properties Elements Gets the elements of this screen. public List<IElement> Elements { get; } Property Value List<IElement>"
  },
  "api/RueI.Displays.ScreenDisplay.html": {
    "href": "api/RueI.Displays.ScreenDisplay.html",
    "title": "Class ScreenDisplay | RueI",
    "keywords": "Class ScreenDisplay Namespace RueI.Displays Assembly RueI.dll Represents a display attached to a DisplayCore with support for Screens. public class ScreenDisplay : DisplayBase Inheritance object DisplayBase ScreenDisplay Inherited Members DisplayBase.IsActive DisplayBase.ReferenceHub DisplayBase.Coordinator DisplayBase.Update() DisplayBase.Delete() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors ScreenDisplay(ReferenceHub, Screen) Initializes a new instance of the ScreenDisplay class. public ScreenDisplay(ReferenceHub hub, Screen screen) Parameters hub ReferenceHub The ReferenceHub to assign the display to. screen Screen The default Screen to use for this ScreenDisplay. ScreenDisplay(DisplayCore, Screen) Initializes a new instance of the ScreenDisplay class. public ScreenDisplay(DisplayCore coordinator, Screen screen) Parameters coordinator DisplayCore The DisplayCore to assign the display to. screen Screen The default Screen to use for this ScreenDisplay. Properties CurrentScreen Gets the current screen of this display. public Screen CurrentScreen { get; } Property Value Screen GlobalElements Gets the elements of this display that will be displayed regardless of screen. public List<IElement> GlobalElements { get; } Property Value List<IElement> Screens Gets all of the screens of this display. public List<Screen> Screens { get; } Property Value List<Screen> Methods GetAllElements() Gets all of the elements of this display. public override IEnumerable<IElement> GetAllElements() Returns IEnumerable<IElement> The IEnumerator<T> of elements. SetScreen(Screen) Sets the CurrentScreen of this display. public void SetScreen(Screen screen) Parameters screen Screen The Screen to set the CurrentScreen to. Exceptions ArgumentOutOfRangeException Thrown when screen is not a Screen within Screens."
  },
  "api/RueI.Displays.html": {
    "href": "api/RueI.Displays.html",
    "title": "Namespace RueI.Displays | RueI",
    "keywords": "Namespace RueI.Displays Classes Display Represents a display attached to a DisplayCore. DisplayBase Defines the base class for all displays. DisplayCore Is responsible for managing all of the DisplayBases for a ReferenceHub. EffectApplier Provides a means of doing batch operations. ElemCombiner Provides a means of combining IElements. Screen Represents a IElementContainer inside a ScreenDisplay. ScreenDisplay Represents a display attached to a DisplayCore with support for Screens. Structs ElemReference<T> Represents a reference to an element present within any number of player's displays."
  },
  "api/RueI.Elements.Delegates.GetContent.html": {
    "href": "api/RueI.Elements.Delegates.GetContent.html",
    "title": "Delegate GetContent | RueI",
    "keywords": "Delegate GetContent Namespace RueI.Elements.Delegates Assembly RueI.dll Defines a method used to get content for an element. public delegate string GetContent() Returns string A string with the new content. Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>)"
  },
  "api/RueI.Elements.Delegates.html": {
    "href": "api/RueI.Elements.Delegates.html",
    "title": "Namespace RueI.Elements.Delegates | RueI",
    "keywords": "Namespace RueI.Elements.Delegates Delegates GetContent Defines a method used to get content for an element."
  },
  "api/RueI.Elements.DynamicElement.html": {
    "href": "api/RueI.Elements.DynamicElement.html",
    "title": "Class DynamicElement | RueI",
    "keywords": "Class DynamicElement Namespace RueI.Elements Assembly RueI.dll Represents a non-cached element that evaluates and parses a function when getting its content. public class DynamicElement : IElement Inheritance object DynamicElement Implements IElement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.AddTo<T>(T, IElementContainer) UniversalExtensions.AddTo<T>(T, ICollection<T>) ElementHelpers.GetFunctionalPosition(IElement) Remarks The content of this element is re-evaluated by calling a function every time the display is updated. This makes it suitable for scenarios where you need to have information constantly updated. For example, you may use this to display the health of SCPs in an SCP list. Constructors DynamicElement(GetContent, float, int) Initializes a new instance of the DynamicElement class. public DynamicElement(GetContent contentGetter, float position, int zIndex = 0) Parameters contentGetter GetContent A delegate returning the new content that will be ran every time the display is updated. position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. zIndex int A value determing the priority of the hint, where higher numbers means that it will render above hints with a lower number. Properties ContentGetter Gets or sets a method that returns the new content and is called every time the display is updated. public GetContent ContentGetter { get; set; } Property Value GetContent Enabled Gets or sets a value indicating whether or not this element is enabled and will show. public bool Enabled { get; set; } Property Value bool ParsedData Gets the data used for parsing. public ParsedData ParsedData { get; } Property Value ParsedData Remarks This contains information used to ensure that multiple elements can be displayed at once. To obtain this, you should almost always use Parse(string). Parser Gets or sets the Parser currently in use by this IElement. public Parser Parser { get; set; } Property Value Parser Remarks Implementations should default this to DefaultParser. Position Gets or sets the position of the element on a scale from 0-1000, where 0 represents the bottom of the screen and 1000 represents the top. public float Position { get; set; } Property Value float ZIndex Gets or sets the priority of the hint (determining if it shows above another hint). public int ZIndex { get; set; } Property Value int"
  },
  "api/RueI.Elements.IElement.html": {
    "href": "api/RueI.Elements.IElement.html",
    "title": "Interface IElement | RueI",
    "keywords": "Interface IElement Namespace RueI.Elements Assembly RueI.dll Represents the base interface for all elements. public interface IElement Extension Methods ElementHelpers.AddTo<T>(T, IElementContainer) ElementHelpers.GetFunctionalPosition(IElement) UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Enabled Gets or sets a value indicating whether or not this element is enabled and will show. bool Enabled { get; set; } Property Value bool ParsedData Gets the data used for parsing. ParsedData ParsedData { get; } Property Value ParsedData Remarks This contains information used to ensure that multiple elements can be displayed at once. To obtain this, you should almost always use Parse(string). Parser Gets or sets the Parser currently in use by this IElement. Parser Parser { get; set; } Property Value Parser Remarks Implementations should default this to DefaultParser. Position Gets or sets the position of the element on a scale from 0-1000, where 0 represents the bottom of the screen and 1000 represents the top. float Position { get; set; } Property Value float ZIndex Gets or sets the priority of the hint (determining if it shows above another hint). int ZIndex { get; set; } Property Value int"
  },
  "api/RueI.Elements.Interfaces.ISettable.html": {
    "href": "api/RueI.Elements.Interfaces.ISettable.html",
    "title": "Interface ISettable | RueI",
    "keywords": "Interface ISettable Namespace RueI.Elements.Interfaces Assembly RueI.dll Defines an element that can be set. public interface ISettable : IElement Inherited Members IElement.Enabled IElement.ParsedData IElement.Position IElement.ZIndex IElement.Parser Extension Methods ElementHelpers.GetFunctionalPosition(IElement) ElementHelpers.AddTo<T>(T, IElementContainer) UniversalExtensions.AddTo<T>(T, ICollection<T>) Methods Set(string) Sets the content of this element. void Set(string text) Parameters text string The new element."
  },
  "api/RueI.Elements.Interfaces.html": {
    "href": "api/RueI.Elements.Interfaces.html",
    "title": "Namespace RueI.Elements.Interfaces | RueI",
    "keywords": "Namespace RueI.Elements.Interfaces Interfaces ISettable Defines an element that can be set."
  },
  "api/RueI.Elements.SetElement.html": {
    "href": "api/RueI.Elements.SetElement.html",
    "title": "Class SetElement | RueI",
    "keywords": "Class SetElement Namespace RueI.Elements Assembly RueI.dll Represents a simple cached element with settable content. public class SetElement : ISettable, IElement Inheritance object SetElement Implements ISettable IElement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods ElementHelpers.GetFunctionalPosition(IElement) ElementHelpers.AddTo<T>(T, IElementContainer) UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors SetElement(float, string) Initializes a new instance of the SetElement class. public SetElement(float position, string content = \"\") Parameters position float The scaled position of the element, where 0 is the bottom of the screen and 1000 is the top. content string The content to set the element to. Properties Enabled Gets or sets a value indicating whether or not this element is enabled and will show. public bool Enabled { get; set; } Property Value bool ParsedData Gets the data used for parsing. public ParsedData ParsedData { get; } Property Value ParsedData Remarks This contains information used to ensure that multiple elements can be displayed at once. To obtain this, you should almost always use Parse(string). Parser Gets or sets the Parser currently in use by this IElement. public Parser Parser { get; set; } Property Value Parser Remarks Implementations should default this to DefaultParser. Position Gets or sets the position of the element on a scale from 0-1000, where 0 represents the bottom of the screen and 1000 represents the top. public float Position { get; set; } Property Value float ZIndex Gets or sets the priority of the hint (determining if it shows above another hint). public int ZIndex { get; set; } Property Value int Methods Set(string) Sets the content of this element. public virtual void Set(string content) Parameters content string The text to set the content to (will be parsed)."
  },
  "api/RueI.Elements.html": {
    "href": "api/RueI.Elements.html",
    "title": "Namespace RueI.Elements | RueI",
    "keywords": "Namespace RueI.Elements Classes DynamicElement Represents a non-cached element that evaluates and parses a function when getting its content. SetElement Represents a simple cached element with settable content. Interfaces IElement Represents the base interface for all elements."
  },
  "api/RueI.EventHandler.html": {
    "href": "api/RueI.EventHandler.html",
    "title": "Class EventHandler | RueI",
    "keywords": "Class EventHandler Namespace RueI Assembly RueI.dll Handles events for RueI. public static class EventHandler Inheritance object EventHandler Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods OnPlayerRemoved(ReferenceHub) public static void OnPlayerRemoved(ReferenceHub hub) Parameters hub ReferenceHub OnRestart() Called after the server restarts. public static void OnRestart() OnServerRoleSet(ReferenceHub, RoleTypeId, RoleChangeReason) public static void OnServerRoleSet(ReferenceHub hub, RoleTypeId type, RoleChangeReason reason) Parameters hub ReferenceHub type RoleTypeId reason RoleChangeReason"
  },
  "api/RueI.Events.DisplayUpdatedEventArgs.html": {
    "href": "api/RueI.Events.DisplayUpdatedEventArgs.html",
    "title": "Class DisplayUpdatedEventArgs | RueI",
    "keywords": "Class DisplayUpdatedEventArgs Namespace RueI.Events Assembly RueI.dll Contains all information after a player's DisplayCore is updated. public class DisplayUpdatedEventArgs : EventArgs Inheritance object EventArgs DisplayUpdatedEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors DisplayUpdatedEventArgs(ReferenceHub, DisplayCore) Initializes a new instance of the DisplayUpdatedEventArgs class. public DisplayUpdatedEventArgs(ReferenceHub referenceHub, DisplayCore displayCord) Parameters referenceHub ReferenceHub The hub of the player. displayCord DisplayCore The DisplayCore to use.. Properties DisplayCore Gets the DisplayCore of the player. public DisplayCore DisplayCore { get; } Property Value DisplayCore ReferenceHub Gets the ReferenceHub of the player. public ReferenceHub ReferenceHub { get; } Property Value ReferenceHub"
  },
  "api/RueI.Events.Events.RueIEvent-1.html": {
    "href": "api/RueI.Events.Events.RueIEvent-1.html",
    "title": "Delegate Events.RueIEvent<T> | RueI",
    "keywords": "Delegate Events.RueIEvent<T> Namespace RueI.Events Assembly RueI.dll Represents a custom RueI event. public delegate void Events.RueIEvent<T>(T ev) where T : EventArgs Parameters ev T The event args to use. Type Parameters T The EventArgs class to use. Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>)"
  },
  "api/RueI.Events.Events.html": {
    "href": "api/RueI.Events.Events.html",
    "title": "Class Events | RueI",
    "keywords": "Class Events Namespace RueI.Events Assembly RueI.dll Provides events for use by other plugins. public static class Events Inheritance object Events Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Events DisplayUpdated Called after a player's DisplayCore is updated. public static event Events.RueIEvent<DisplayUpdatedEventArgs>? DisplayUpdated Event Type Events.RueIEvent<DisplayUpdatedEventArgs> RateLimitFinished Called after the rate limit is finished for a player. public static event Events.RueIEvent<RateLimitFinishedEventArgs>? RateLimitFinished Event Type Events.RueIEvent<RateLimitFinishedEventArgs>"
  },
  "api/RueI.Events.RateLimitFinishedEventArgs.html": {
    "href": "api/RueI.Events.RateLimitFinishedEventArgs.html",
    "title": "Class RateLimitFinishedEventArgs | RueI",
    "keywords": "Class RateLimitFinishedEventArgs Namespace RueI.Events Assembly RueI.dll Contains all information after a player's hint rate limit is finished. public class RateLimitFinishedEventArgs : EventArgs Inheritance object EventArgs RateLimitFinishedEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors RateLimitFinishedEventArgs(ReferenceHub) Initializes a new instance of the RateLimitFinishedEventArgs class. public RateLimitFinishedEventArgs(ReferenceHub referenceHub) Parameters referenceHub ReferenceHub The hub that the rate limit is finished for. Properties ReferenceHub Gets the ReferenceHub that the hint rate limit is finished for. public ReferenceHub ReferenceHub { get; } Property Value ReferenceHub"
  },
  "api/RueI.Events.html": {
    "href": "api/RueI.Events.html",
    "title": "Namespace RueI.Events | RueI",
    "keywords": "Namespace RueI.Events Classes DisplayUpdatedEventArgs Contains all information after a player's DisplayCore is updated. Events Provides events for use by other plugins. RateLimitFinishedEventArgs Contains all information after a player's hint rate limit is finished. Delegates Events.RueIEvent<T> Represents a custom RueI event."
  },
  "api/RueI.Extensions.AutoElement-1.html": {
    "href": "api/RueI.Extensions.AutoElement-1.html",
    "title": "Class AutoElement<T> | RueI",
    "keywords": "Class AutoElement<T> Namespace RueI.Extensions Assembly RueI.dll Manages and automatically assigns elements to ReferenceHubs meeting a criteria. public class AutoElement<T> : AutoElementBase where T : IElement Type Parameters T The type of the element to give. Inheritance object AutoElementBase AutoElement<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors AutoElement(ElemReference<T>, Func<DisplayCore, T>) Initializes a new instance of the AutoElement<T> class. public AutoElement(ElemReference<T> reference, Func<DisplayCore, T> creator) Parameters reference ElemReference<T> The ElemReference<T> to use. creator Func<DisplayCore, T> A Func<T, TResult> that creates the elements. AutoElement(T) Initializes a new instance of the AutoElement<T> class. public AutoElement(T element) Parameters element T The T to automatically give. Methods GiveTo(DisplayCore) Gives this AutoElement<T> to a DisplayCore. protected override void GiveTo(DisplayCore core) Parameters core DisplayCore The core to give this to."
  },
  "api/RueI.Extensions.AutoElementBase.html": {
    "href": "api/RueI.Extensions.AutoElementBase.html",
    "title": "Class AutoElementBase | RueI",
    "keywords": "Class AutoElementBase Namespace RueI.Extensions Assembly RueI.dll Represents the base class for all automatic element givers. public abstract class AutoElementBase Inheritance object AutoElementBase Derived AutoElement<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Methods GiveTo(DisplayCore) Gives this AutoElement<T> to a DisplayCore. protected abstract void GiveTo(DisplayCore core) Parameters core DisplayCore The core to give this to."
  },
  "api/RueI.Extensions.CollectionExtensions.html": {
    "href": "api/RueI.Extensions.CollectionExtensions.html",
    "title": "Class CollectionExtensions | RueI",
    "keywords": "Class CollectionExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions for working with collections. public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Add<T>(ICollection<T>, params T[]) Adds multiple items to a collection. public static void Add<T>(this ICollection<T> collection, params T[] items) Parameters collection ICollection<T> The collection to add the elements to. items T[] The items to add. Type Parameters T The type of item to add."
  },
  "api/RueI.Extensions.ElemRefResolver-1.html": {
    "href": "api/RueI.Extensions.ElemRefResolver-1.html",
    "title": "Class ElemRefResolver<T> | RueI",
    "keywords": "Class ElemRefResolver<T> Namespace RueI.Extensions Assembly RueI.dll Represents a ElemReference<T> and its associated creator. public record ElemRefResolver<T> : IEquatable<ElemRefResolver<T>> where T : IElement Type Parameters T The type of the element. Inheritance object ElemRefResolver<T> Implements IEquatable<ElemRefResolver<T>> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors ElemRefResolver(ElemReference<T>, Func<T>) Represents a ElemReference<T> and its associated creator. public ElemRefResolver(ElemReference<T> elemRef, Func<T> creator) Parameters elemRef ElemReference<T> The ElemReference<T> to use. creator Func<T> A Func<TResult> that creates the element. if it does not exist. Properties creator A Func<TResult> that creates the element. if it does not exist. public Func<T> creator { get; init; } Property Value Func<T> elemRef The ElemReference<T> to use. public ElemReference<T> elemRef { get; init; } Property Value ElemReference<T> Methods GetFor(DisplayCore) Gets an instance of T using the ElemReference<T>, or creates it. public T GetFor(DisplayCore core) Parameters core DisplayCore The DisplayCore to use. Returns T An instance of T."
  },
  "api/RueI.Extensions.ElementHelpers.html": {
    "href": "api/RueI.Extensions.ElementHelpers.html",
    "title": "Class ElementHelpers | RueI",
    "keywords": "Class ElementHelpers Namespace RueI.Extensions Assembly RueI.dll Provides extensions and helpers for working with elements. public static class ElementHelpers Inheritance object ElementHelpers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddTo<T>(T, IElementContainer) Adds an IElement to a IElementContainer. public static T AddTo<T>(this T element, IElementContainer container) where T : IElement Parameters element T The element to add. container IElementContainer The IElementContainer to add to. Returns T A reference to this element. Type Parameters T The type of the IElement. FilterDisabled(IEnumerable<IElement>) Filters out all of the disabled IElements in an IEnumerable<T>. public static IEnumerable<IElement> FilterDisabled(this IEnumerable<IElement> elements) Parameters elements IEnumerable<IElement> The elements to filter. Returns IEnumerable<IElement> The filtered IEnumerable<T>. GetFunctionalPosition(IElement) Gets the functional (un-scaled) position of an element. public static float GetFunctionalPosition(this IElement element) Parameters element IElement The element to get the position for. Returns float The un-scaled position.."
  },
  "api/RueI.Extensions.HintBuilding.HintBuilding.html": {
    "href": "api/RueI.Extensions.HintBuilding.HintBuilding.html",
    "title": "Class HintBuilding | RueI",
    "keywords": "Class HintBuilding Namespace RueI.Extensions.HintBuilding Assembly RueI.dll Provides extensions for adding rich text tags to StringBuilders. public static class HintBuilding Inheritance object HintBuilding Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddHorizontalPos(StringBuilder, float, MeasurementUnit) Adds a pos tag to a StringBuilder. public static StringBuilder AddHorizontalPos(this StringBuilder sb, float margins, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the pos tag. style MeasurementUnit The measurement style of the pos tag. Returns StringBuilder A reference to the original StringBuilder. AddLinebreak(StringBuilder) Adds a linebreak to a StringBuilder. public static StringBuilder AddLinebreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. AddSpace(StringBuilder, float, MeasurementUnit) Adds a space tag to a StringBuilder. public static StringBuilder AddSpace(this StringBuilder sb, float margins, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the pos tag. style MeasurementUnit The measurement style of the pos tag. Returns StringBuilder A reference to the original StringBuilder. AddSprite(StringBuilder, int) Adds a sprite tag to a StringBuilder. public static StringBuilder AddSprite(this StringBuilder sb, int index) Parameters sb StringBuilder The StringBuilder to use. index int The index (0-20) of the sprite tag. Returns StringBuilder A reference to the original StringBuilder. AddSprite(StringBuilder, int, Color) Adds a sprite tag to a StringBuilder. public static StringBuilder AddSprite(this StringBuilder sb, int index, Color color) Parameters sb StringBuilder The StringBuilder to use. index int The index (0-20) of the sprite tag. color Color The color of the sprite tag. Returns StringBuilder A reference to the original StringBuilder. AddVOffset(StringBuilder, float, MeasurementUnit) Adds a voffset tag to a StringBuilder. public static StringBuilder AddVOffset(this StringBuilder sb, float offset, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. offset float The size of the voffset tag. style MeasurementUnit The measurement style of the voffset tag. Returns StringBuilder A reference to the original StringBuilder. CloseAlpha(StringBuilder) Adds a closing alpha tag to a StringBuilder. public static StringBuilder CloseAlpha(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseBold(StringBuilder) Adds a closing bold tag to a StringBuilder. public static StringBuilder CloseBold(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseColor(StringBuilder) Adds a closing color tag to a StringBuilder. public static StringBuilder CloseColor(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseIndent(StringBuilder) Adds a closing indent tag to a StringBuilder. public static StringBuilder CloseIndent(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseItalics(StringBuilder) Adds a closing italics tag to a StringBuilder. public static StringBuilder CloseItalics(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseLineHeight(StringBuilder) Adds a closing line-height tag to a StringBuilder. public static StringBuilder CloseLineHeight(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMargins(StringBuilder) Adds a closing margins tag to a StringBuilder. public static StringBuilder CloseMargins(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMark(StringBuilder) Adds a closing mark tag to a StringBuilder. public static StringBuilder CloseMark(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseMonospace(StringBuilder) Adds a closing monospace tag to a StringBuilder. public static StringBuilder CloseMonospace(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseNobreak(StringBuilder) Adds a closing nobreak tag to a StringBuilder. public static StringBuilder CloseNobreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseNoparse(StringBuilder) Adds a closing noparse tag to a StringBuilder. public static StringBuilder CloseNoparse(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseRotation(StringBuilder) Adds a closing rotation tag to a StringBuilder. public static StringBuilder CloseRotation(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseScale(StringBuilder) Adds a closing scale tag to a StringBuilder. public static StringBuilder CloseScale(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSize(StringBuilder) Adds a closing size tag to a StringBuilder. public static StringBuilder CloseSize(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseStrikethrough(StringBuilder) Adds a closing strikethrough tag to a StringBuilder. public static StringBuilder CloseStrikethrough(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSubscript(StringBuilder) Adds a closing subscript tag to a StringBuilder. public static StringBuilder CloseSubscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseSuperscript(StringBuilder) Adds a closing superscript tag to a StringBuilder. public static StringBuilder CloseSuperscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseUnderline(StringBuilder) Adds a closing underline tag to a StringBuilder. public static StringBuilder CloseUnderline(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseVOffset(StringBuilder) Adds a closing voffset tag to a StringBuilder. public static StringBuilder CloseVOffset(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. CloseWidth(StringBuilder) Adds a closing width tag to a StringBuilder. public static StringBuilder CloseWidth(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. ConvertToHex(Color) Converts a Color to a hex code string. public static string ConvertToHex(Color color) Parameters color Color The Color to convert. Returns string The color as a hex code string. SetAlpha(StringBuilder, byte) Adds an alpha tag to a StringBuilder. public static StringBuilder SetAlpha(this StringBuilder sb, byte alpha) Parameters sb StringBuilder The StringBuilder to use. alpha byte The alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetAlpha(StringBuilder, int) Adds an alpha tag to a StringBuilder. public static StringBuilder SetAlpha(this StringBuilder sb, int alpha) Parameters sb StringBuilder The StringBuilder to use. alpha int The alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetBold(StringBuilder) Adds a bold tag to a StringBuilder. public static StringBuilder SetBold(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetCase(StringBuilder, CaseStyle) Adds a case tag to a StringBuilder. public static StringBuilder SetCase(this StringBuilder sb, CaseStyle caseStyle) Parameters sb StringBuilder The StringBuilder to use. caseStyle CaseStyle The case to use. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, byte, byte, byte, byte) Adds a color tag to a StringBuilder from RGBA values. public static StringBuilder SetColor(this StringBuilder sb, byte r, byte g, byte b, byte alpha = 255) Parameters sb StringBuilder The StringBuilder to use. r byte The red (0-255) in the color. g byte The green (0-255) in the color. b byte The blue (0-255) in the color. alpha byte The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, Color) Adds a color tag to a StringBuilder. public static StringBuilder SetColor(this StringBuilder sb, Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The color to use. Returns StringBuilder A reference to the original StringBuilder. SetColor(StringBuilder, int, int, int, int) Adds a color tag to a StringBuilder from RGBA values. public static StringBuilder SetColor(this StringBuilder sb, int r, int g, int b, int alpha = 255) Parameters sb StringBuilder The StringBuilder to use. r int The red (0-255) in the color. g int The green (0-255) in the color. b int The blue (0-255) in the color. alpha int The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetIndent(StringBuilder, float, MeasurementUnit) Adds an indent tag to a StringBuilder. public static StringBuilder SetIndent(this StringBuilder sb, float indent, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. indent float The indent size to include in the indent tag. style MeasurementUnit The measurement style of the indent tag. Returns StringBuilder A reference to the original StringBuilder. SetItalics(StringBuilder) Adds an italics tag to a StringBuilder. public static StringBuilder SetItalics(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetLineHeight(StringBuilder, float, MeasurementUnit) Adds a line-height tag to a StringBuilder. public static StringBuilder SetLineHeight(this StringBuilder sb, float size, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The line height to include in the line-height tag. style MeasurementUnit The measurement style of the line-height tag. Returns StringBuilder A reference to the original StringBuilder. SetMargins(StringBuilder, float, MeasurementUnit) Adds an margins tag to a StringBuilder. public static StringBuilder SetMargins(this StringBuilder sb, float margins, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. margins float The size of the margins. style MeasurementUnit The measurement style of the margins tag. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, byte, byte, byte, byte) Adds a mark tag to a StringBuilder from RGBA values. public static StringBuilder SetMark(this StringBuilder sb, byte r, byte g, byte b, byte alpha) Parameters sb StringBuilder The StringBuilder to use. r byte The red (0-255) in the color. g byte The green (0-255) in the color. b byte The blue (0-255) in the color. alpha byte The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, Color) Adds a mark tag to a StringBuilder. public static StringBuilder SetMark(this StringBuilder sb, Color color) Parameters sb StringBuilder The StringBuilder to use. color Color The color to use. Returns StringBuilder A reference to the original StringBuilder. SetMark(StringBuilder, int, int, int, int) Adds a mark tag to a StringBuilder from RGBA values. public static StringBuilder SetMark(this StringBuilder sb, int r, int g, int b, int alpha) Parameters sb StringBuilder The StringBuilder to use. r int The red (0-255) in the color. g int The green (0-255) in the color. b int The blue (0-255) in the color. alpha int The optional alpha (0-255) of the color. Returns StringBuilder A reference to the original StringBuilder. SetMonospace(StringBuilder, float, MeasurementUnit) Adds a monospace tag to a StringBuilder. public static StringBuilder SetMonospace(this StringBuilder sb, float spacing, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. spacing float The size of the spacing. style MeasurementUnit The measurement style of the monospacing tag. Returns StringBuilder A reference to the original StringBuilder. SetNobreak(StringBuilder) Adds a nobreak tag to a StringBuilder. public static StringBuilder SetNobreak(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetNoparse(StringBuilder) Adds a noparse tag to a StringBuilder. public static StringBuilder SetNoparse(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetRotation(StringBuilder, int) Adds a rotation tag to a StringBuilder. public static StringBuilder SetRotation(this StringBuilder sb, int rotation) Parameters sb StringBuilder The StringBuilder to use. rotation int The rotation (-180 to 180) of the tag.. Returns StringBuilder A reference to the original StringBuilder. SetScale(StringBuilder, float) Adds a horizontal scale tag to a StringBuilder. public static StringBuilder SetScale(this StringBuilder sb, float scale) Parameters sb StringBuilder The StringBuilder to use. scale float The scale size to include in the scale tag. Returns StringBuilder A reference to the original StringBuilder. SetSize(StringBuilder, float, MeasurementUnit) Adds a size tag to a StringBuilder. public static StringBuilder SetSize(this StringBuilder sb, float size, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. size float The size to include in the size tag. style MeasurementUnit The measurement style of the size tag. Returns StringBuilder A reference to the original StringBuilder. SetStrikethrough(StringBuilder) Adds a strikethrough tag to a StringBuilder. public static StringBuilder SetStrikethrough(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetSubscript(StringBuilder) Adds a subscript tag to a StringBuilder. public static StringBuilder SetSubscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetSuperscript(StringBuilder) Adds a superscript tag to a StringBuilder. public static StringBuilder SetSuperscript(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetUnderline(StringBuilder) Adds an underline tag to a StringBuilder. public static StringBuilder SetUnderline(this StringBuilder sb) Parameters sb StringBuilder The StringBuilder to use. Returns StringBuilder A reference to the original StringBuilder. SetWidth(StringBuilder, float, MeasurementUnit) Adds a width tag to a StringBuilder. public static StringBuilder SetWidth(this StringBuilder sb, float offset, MeasurementUnit style = MeasurementUnit.Pixels) Parameters sb StringBuilder The StringBuilder to use. offset float The size of the new width. style MeasurementUnit The measurement style of the width tag. Returns StringBuilder A reference to the original StringBuilder."
  },
  "api/RueI.Extensions.HintBuilding.html": {
    "href": "api/RueI.Extensions.HintBuilding.html",
    "title": "Namespace RueI.Extensions.HintBuilding | RueI",
    "keywords": "Namespace RueI.Extensions.HintBuilding Classes HintBuilding Provides extensions for adding rich text tags to StringBuilders."
  },
  "api/RueI.Extensions.IComparableExtensions.html": {
    "href": "api/RueI.Extensions.IComparableExtensions.html",
    "title": "Class IComparableExtensions | RueI",
    "keywords": "Class IComparableExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions and helpers for working with elements. public static class IComparableExtensions Inheritance object IComparableExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods MaxIf<T>(T, bool, T) Gets the maximum of two IComparable<T>, if a bool is true. public static T MaxIf<T>(this T first, bool skip, T second) where T : IComparable<T> Parameters first T The first value. skip bool Whether or not to return the first value. second T The second value. Returns T The maximum of the two, or the first value if the bool is true. Type Parameters T The type to use. Max<T>(T, T) Gets the maximum of two IComparable<T>. public static T Max<T>(this T first, T second) where T : IComparable<T> Parameters first T The first value. second T The second value. Returns T The maximum of the two. Type Parameters T The type to use."
  },
  "api/RueI.Extensions.IEnumerableExtensions.html": {
    "href": "api/RueI.Extensions.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | RueI",
    "keywords": "Class IEnumerableExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions for working with collections. public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ToPooledList<T>(IEnumerable<T>) Converts a IEnumerable<T> to a pooled List<T>. public static List<T> ToPooledList<T>(this IEnumerable<T> enumerable) Parameters enumerable IEnumerable<T> The IEnumerable<T> to convert. Returns List<T> The new pooled List<T>. Type Parameters T The type of item for the list. ToPooledList<T>(IEnumerable<T>, int) Converts a IEnumerable<T> to a pooled List<T>. public static List<T> ToPooledList<T>(this IEnumerable<T> enumerable, int capacity) Parameters enumerable IEnumerable<T> The IEnumerable<T> to convert. capacity int The initial capacity of the List<T>. Returns List<T> The new pooled List<T>. Type Parameters T The type of item for the list."
  },
  "api/RueI.Extensions.Intersection-2.html": {
    "href": "api/RueI.Extensions.Intersection-2.html",
    "title": "Class Intersection<T, TOther> | RueI",
    "keywords": "Class Intersection<T, TOther> Namespace RueI.Extensions Assembly RueI.dll Represents an intersection between a class and an interface. public class Intersection<T, TOther> where T : class where TOther : class Type Parameters T The more derived class. TOther The interface to be derived from. Inheritance object Intersection<T, TOther> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Class Gets the derived class of the intersection. public T Class { get; } Property Value T Interface Gets the interface of the intersection. public TOther Interface { get; } Property Value TOther Methods New<TClass>(TClass) Creates a new intersection for a class. public static Intersection<T, TOther> New<TClass>(TClass value) where TClass : class, T, TOther Parameters value TClass The value of the intersected type. Returns Intersection<T, TOther> A new intersection of the two types. Type Parameters TClass The class to create the intersection for. Operators implicit operator T(Intersection<T, TOther>) public static implicit operator T(Intersection<T, TOther> intersection) Parameters intersection Intersection<T, TOther> Returns T implicit operator TOther(Intersection<T, TOther>) public static implicit operator TOther(Intersection<T, TOther> intersection) Parameters intersection Intersection<T, TOther> Returns TOther"
  },
  "api/RueI.Extensions.UniversalExtensions.html": {
    "href": "api/RueI.Extensions.UniversalExtensions.html",
    "title": "Class UniversalExtensions | RueI",
    "keywords": "Class UniversalExtensions Namespace RueI.Extensions Assembly RueI.dll Provides extensions for working with all types. public static class UniversalExtensions Inheritance object UniversalExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddTo<T>(T, ICollection<T>) Adds this instance to an ICollection<T>. public static T AddTo<T>(this T item, ICollection<T> collection) where T : class Parameters item T The instance to add. collection ICollection<T> The collection to add the elements to. Returns T A reference to item. Type Parameters T The type of this instance and the collection to add to."
  },
  "api/RueI.Extensions.html": {
    "href": "api/RueI.Extensions.html",
    "title": "Namespace RueI.Extensions | RueI",
    "keywords": "Namespace RueI.Extensions Classes AutoElementBase Represents the base class for all automatic element givers. AutoElement<T> Manages and automatically assigns elements to ReferenceHubs meeting a criteria. CollectionExtensions Provides extensions for working with collections. ElemRefResolver<T> Represents a ElemReference<T> and its associated creator. ElementHelpers Provides extensions and helpers for working with elements. IComparableExtensions Provides extensions and helpers for working with elements. IEnumerableExtensions Provides extensions for working with collections. Intersection<T, TOther> Represents an intersection between a class and an interface. UniversalExtensions Provides extensions for working with all types."
  },
  "api/RueI.Main.html": {
    "href": "api/RueI.Main.html",
    "title": "Class Main | RueI",
    "keywords": "Class Main Namespace RueI Assembly RueI.dll Represents the main class for RueI. public static class Main Inheritance object Main Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Version Gets the current version of RueI. public static readonly Version Version Field Value Version Methods EnsureInit() Ensures that RueI is properly initialized. public static void EnsureInit()"
  },
  "api/RueI.NonUnityProvider.TaskAsyncOperation.html": {
    "href": "api/RueI.NonUnityProvider.TaskAsyncOperation.html",
    "title": "Class NonUnityProvider.TaskAsyncOperation | RueI",
    "keywords": "Class NonUnityProvider.TaskAsyncOperation Namespace RueI Assembly RueI.dll Represents an async operation using a Task. public class NonUnityProvider.TaskAsyncOperation : UnityAlternative.IAsyncOperation, IDisposable Inheritance object NonUnityProvider.TaskAsyncOperation Implements UnityAlternative.IAsyncOperation IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors TaskAsyncOperation(TimeSpan, Action) Initializes a new instance of the NonUnityProvider.TaskAsyncOperation class, and then immediately runs. public TaskAsyncOperation(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Properties IsRunning Gets a value indicating whether or not this operation is handling. public bool IsRunning { get; } Property Value bool Methods Cancel() Cancels this operation. public void Cancel() Dispose() Disposes this async operation. public void Dispose()"
  },
  "api/RueI.NonUnityProvider.html": {
    "href": "api/RueI.NonUnityProvider.html",
    "title": "Class NonUnityProvider | RueI",
    "keywords": "Class NonUnityProvider Namespace RueI Assembly RueI.dll Provides non-Unity alternatives for the UnityProvider of the application. public class NonUnityProvider : UnityAlternative Inheritance object UnityAlternative NonUnityProvider Inherited Members UnityAlternative.Provider object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Methods Log(string) Logs a message to the console. public override void Log(string message) Parameters message string The message to log. PerformAsync(TimeSpan, Action) Performs an async operation. public override UnityAlternative.IAsyncOperation PerformAsync(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Returns UnityAlternative.IAsyncOperation A UnityAlternative.IAsyncOperation to use."
  },
  "api/RueI.Parsing.ClosingTag-1.html": {
    "href": "api/RueI.Parsing.ClosingTag-1.html",
    "title": "Class ClosingTag<T> | RueI",
    "keywords": "Class ClosingTag<T> Namespace RueI.Parsing Assembly RueI.dll Defines the base class for all rich text tags. public abstract class ClosingTag<T> : NoParamsTag where T : NoParamsTag, new() Type Parameters T The type of the closing tag. Inheritance object RichTextTag NoParamsTag ClosingTag<T> Derived CloseAlignTag CloseAlphaTag CloseBoldTag CloseCSpaceTag CloseColorTag CloseItalicsTag CloseLineHeightTag CloseScaleTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public abstract string Name { get; } Property Value string Names Gets the names of this tag. public override sealed string[] Names { get; } Property Value string[] Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected virtual void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser. HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override sealed bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Enums.CaseStyle.html": {
    "href": "api/RueI.Parsing.Enums.CaseStyle.html",
    "title": "Enum CaseStyle | RueI",
    "keywords": "Enum CaseStyle Namespace RueI.Parsing.Enums Assembly RueI.dll Represents the case style of the parser. public enum CaseStyle Fields Lowercase = 1 Indicates that all text will be in lowercase. Smallcaps = 0 Indicates that all text will be in uppercase, but lowercase characters will be slightly smaller. Uppercase = 2 Indicates that all text will be in uppercase."
  },
  "api/RueI.Parsing.Enums.ColorStyle.html": {
    "href": "api/RueI.Parsing.Enums.ColorStyle.html",
    "title": "Enum ColorStyle | RueI",
    "keywords": "Enum ColorStyle Namespace RueI.Parsing.Enums Assembly RueI.dll Represents the style used for a color parameter. public enum ColorStyle Fields HexCode = 1 Indicates that the color parameter is a hex code. Named = 0 Indicates that the color parameter is a named color."
  },
  "api/RueI.Parsing.Enums.MeasurementUnit.html": {
    "href": "api/RueI.Parsing.Enums.MeasurementUnit.html",
    "title": "Enum MeasurementUnit | RueI",
    "keywords": "Enum MeasurementUnit Namespace RueI.Parsing.Enums Assembly RueI.dll Represents the unit used for a measurement parameter. public enum MeasurementUnit Fields Ems = 2 Indicates that the measurement is in ems. Percentage = 1 Indicates that the measurement is a percentage of the default. Pixels = 0 Indicates that the measurement is in pixels."
  },
  "api/RueI.Parsing.Enums.TagStyle.html": {
    "href": "api/RueI.Parsing.Enums.TagStyle.html",
    "title": "Enum TagStyle | RueI",
    "keywords": "Enum TagStyle Namespace RueI.Parsing.Enums Assembly RueI.dll Represents the valid characters for a delimiter. public enum TagStyle Fields Attributes = 2 Indicates that a tag takes in only attributes (space delimiter). NoParams = 0 Indicates that a tag does not take parameters. ValueParam = 1 Indicates that a tag takes in a value (equal sign) param."
  },
  "api/RueI.Parsing.Enums.html": {
    "href": "api/RueI.Parsing.Enums.html",
    "title": "Namespace RueI.Parsing.Enums | RueI",
    "keywords": "Namespace RueI.Parsing.Enums Enums CaseStyle Represents the case style of the parser. ColorStyle Represents the style used for a color parameter. MeasurementUnit Represents the unit used for a measurement parameter. TagStyle Represents the valid characters for a delimiter."
  },
  "api/RueI.Parsing.NoParamsTag.html": {
    "href": "api/RueI.Parsing.NoParamsTag.html",
    "title": "Class NoParamsTag | RueI",
    "keywords": "Class NoParamsTag Namespace RueI.Parsing Assembly RueI.dll Defines the base class for all rich text tags. public abstract class NoParamsTag : RichTextTag Inheritance object RichTextTag NoParamsTag Derived ClosingTag<T> AllcapsTag BoldTag CloseAllcapsTag CloseLowercase CloseSizeTag CloseSmallcapsTag ItalicsTag LowercaseTag SmallcapsTag Inherited Members RichTextTag.Names object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties TagStyle Gets the parameter style of this tag. public override sealed TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public abstract bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false. HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override sealed bool HandleTag(ParserContext context, string parameters) Parameters context ParserContext The context of the parser. parameters string The parameters of the tag, excluding the delimiter. Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Parser.html": {
    "href": "api/RueI.Parsing.Parser.html",
    "title": "Class Parser | RueI",
    "keywords": "Class Parser Namespace RueI.Parsing Assembly RueI.dll Helps parse the content of elements. public class Parser Inheritance object Parser Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Examples This example demonstrates creating and using a ParserBuilder. Parser builder = new ParserBuilder() .ImportFrom(Constants.DefaultParser) .AddTag<MyCustomTag>(); .Build(); builder.Parse(\"hello world!\") Properties DefaultParser Gets the default Parser. public static Parser DefaultParser { get; } Property Value Parser Tags Gets the tags that will be searched for when parsing. public ReadOnlyDictionary<string, ReadOnlyCollection<RichTextTag>> Tags { get; } Property Value ReadOnlyDictionary<string, ReadOnlyCollection<RichTextTag>> Remarks Multiple tags can share the same name. Methods AddCharacter(ParserContext, char) Adds a character to a parser context. public static void AddCharacter(ParserContext context, char ch) Parameters context ParserContext The context of the parser. ch char The character to add. CalculateCharacterLength(TextInfo, char) Calculates the length of an char with a context. public static float CalculateCharacterLength(TextInfo context, char ch) Parameters context TextInfo The context to parse the char under. ch char The char to calculate the length for. Returns float A float indicating the total length of the char. CreateLineBreak(ParserContext) Generates the effects of a linebreak for a parser. public static void CreateLineBreak(ParserContext context) Parameters context ParserContext The context of the parser. GetTagAttributes(string, out Dictionary<string, string>) Parses the tag attributes of a string. public static bool GetTagAttributes(string content, out Dictionary<string, string> attributes) Parameters content string The content to parse. attributes Dictionary<string, string> The pairs of attributes. Returns bool true if the content is valid, otherwise false. Parse(string) Parses a rich text string. public ParsedData Parse(string text) Parameters text string The string to parse. Returns ParsedData A ParsedData containing information about the string."
  },
  "api/RueI.Parsing.ParserBuilder.html": {
    "href": "api/RueI.Parsing.ParserBuilder.html",
    "title": "Class ParserBuilder | RueI",
    "keywords": "Class ParserBuilder Namespace RueI.Parsing Assembly RueI.dll Builds Parsers. public sealed class ParserBuilder Inheritance object ParserBuilder Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors ParserBuilder() Initializes a new instance of the ParserBuilder class. public ParserBuilder() Properties TagsCount Gets the number of tags within this ParserBuilder. public int TagsCount { get; } Property Value int Methods AddFromAssembly(Assembly) Adds new RichTextTags from an assembly by getting all of the RichTextTagAttribute classes. public ParserBuilder AddFromAssembly(Assembly assembly) Parameters assembly Assembly The Assembly to get the classes from. Returns ParserBuilder A reference to this ParserBuilder. AddTag<T>() Gets the SharedTag<T> of a RichTextTag type and adds it to the builder. public ParserBuilder AddTag<T>() where T : RichTextTag, new() Returns ParserBuilder A reference to this ParserBuilder. Type Parameters T The type of the tag to create. Build() Builds this ParserBuilder into a Parser. public Parser Build() Returns Parser The built Parser. ImportFrom(Parser) Imports all of the RichTextTags from a Parser, adding it to the builder. public ParserBuilder ImportFrom(Parser parser) Parameters parser Parser The Parser to import the tags from. Returns ParserBuilder A reference to this ParserBuilder."
  },
  "api/RueI.Parsing.ParserContext.html": {
    "href": "api/RueI.Parsing.ParserContext.html",
    "title": "Class ParserContext | RueI",
    "keywords": "Class ParserContext Namespace RueI.Parsing Assembly RueI.dll Describes the state of a parser at a time. public class ParserContext : TextInfo, IDisposable Inheritance object TextInfo ParserContext Implements IDisposable Inherited Members TextInfo.CurrentLineHeight TextInfo.Size TextInfo.CurrentCSpace TextInfo.IsMonospace TextInfo.Monospacing TextInfo.IsBold TextInfo.Scale TextInfo.IsSuperOrSubScript TextInfo.CurrentCase object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Remarks The ParserContext class provides a way for the general state of the parser, such as the current line width or the vertical height, to be modified by passing it along. Tags should modify this in order to change the end result of parsing. Properties BiggestCharSize Gets or sets the biggest char size of the line. public float BiggestCharSize { get; set; } Property Value float ColorTags Gets or sets the number of color tags that are nested. public int ColorTags { get; set; } Property Value int CurrentLineWidth Gets or sets the current line width of the parser. public float CurrentLineWidth { get; set; } Property Value float DisplayAreaWidth Gets or sets the current width of the text. public float DisplayAreaWidth { get; set; } Property Value float Indent Gets or sets the current indent of the parser. public float Indent { get; set; } Property Value float LineHasAnyChars Gets or sets a value indicating whether or not the current line has any characters. public bool LineHasAnyChars { get; set; } Property Value bool NewOffset Gets or sets the final offset for the element as a whole. public float NewOffset { get; set; } Property Value float NoBreak Gets or sets a value indicating whether or not words are currently in no break. public bool NoBreak { get; set; } Property Value bool ResultBuilder Gets the end result string builder. public StringBuilder ResultBuilder { get; } Property Value StringBuilder ShouldParse Gets or sets a value indicating whether the parser should parse tags other than noparse. public bool ShouldParse { get; set; } Property Value bool SizeTags Gets a stack containing all of the nested sizes. public Stack<float> SizeTags { get; } Property Value Stack<float> WidthSinceSpace Gets or sets the total width since a space. public float WidthSinceSpace { get; set; } Property Value float Methods AddEndingTag<T>(bool) Adds a RichTextTag to a list of tags that will be added to the end of the parser's result. public void AddEndingTag<T>(bool allowDuplicates = false) where T : NoParamsTag, new() Parameters allowDuplicates bool Whether or not duplicates are allowed, accommodating for nested tags. Type Parameters T The type of the RichTextTag to be added as an ending tag (as a SharedTag<T>). ApplyClosingTags() Applies the endingTags and closing SizeTags tags to this ParserContext. public void ApplyClosingTags() Dispose() Disposes this ParserContext, returning the string builder to the pool. public void Dispose() RemoveEndingTag<T>() Removes a RichTextTag from the list list of tags that will be added to the end of the parser's result. public void RemoveEndingTag<T>() where T : NoParamsTag, new() Type Parameters T The type of the RichTextTag to be removed from the ending tags (as a SharedTag<T>)."
  },
  "api/RueI.Parsing.Records.MeasurementInfo.html": {
    "href": "api/RueI.Parsing.Records.MeasurementInfo.html",
    "title": "Struct MeasurementInfo | RueI",
    "keywords": "Struct MeasurementInfo Namespace RueI.Parsing.Records Assembly RueI.dll Defines a record that contains information about measurement info. public record struct MeasurementInfo : IEquatable<MeasurementInfo> Implements IEquatable<MeasurementInfo> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Remarks This provides a convenient way to specify both the value and unit for a measurement, as the base value when converted to pixels can differ depending on the context of the measurement. Constructors MeasurementInfo(float, MeasurementUnit) Defines a record that contains information about measurement info. public MeasurementInfo(float Value, MeasurementUnit Style) Parameters Value float The value of the measurement. Style MeasurementUnit The style of the measurement. Remarks This provides a convenient way to specify both the value and unit for a measurement, as the base value when converted to pixels can differ depending on the context of the measurement. Properties Style The style of the measurement. public MeasurementUnit Style { readonly get; set; } Property Value MeasurementUnit Value The value of the measurement. public float Value { readonly get; set; } Property Value float Methods TryParse(string, out MeasurementInfo) Attempts to extract a MeasurementInfo from a string. public static bool TryParse(string content, out MeasurementInfo info) Parameters content string The content to parse. info MeasurementInfo The returned info, if true. Returns bool true if the string was valid, otherwise false."
  },
  "api/RueI.Parsing.Records.ParsedData.html": {
    "href": "api/RueI.Parsing.Records.ParsedData.html",
    "title": "Struct ParsedData | RueI",
    "keywords": "Struct ParsedData Namespace RueI.Parsing.Records Assembly RueI.dll Defines a record that contains information used for displaying multiple elements. public record struct ParsedData : IEquatable<ParsedData> Implements IEquatable<ParsedData> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors ParsedData(string, float) Defines a record that contains information used for displaying multiple elements. public ParsedData(string Content, float Offset) Parameters Content string The element's content. Offset float The offset that should be applied. Equivalent to the total linebreaks within the element. Properties Content The element's content. public string Content { readonly get; set; } Property Value string Offset The offset that should be applied. Equivalent to the total linebreaks within the element. public float Offset { readonly get; set; } Property Value float"
  },
  "api/RueI.Parsing.Records.html": {
    "href": "api/RueI.Parsing.Records.html",
    "title": "Namespace RueI.Parsing.Records | RueI",
    "keywords": "Namespace RueI.Parsing.Records Structs MeasurementInfo Defines a record that contains information about measurement info. ParsedData Defines a record that contains information used for displaying multiple elements."
  },
  "api/RueI.Parsing.RichTextTag.html": {
    "href": "api/RueI.Parsing.RichTextTag.html",
    "title": "Class RichTextTag | RueI",
    "keywords": "Class RichTextTag Namespace RueI.Parsing Assembly RueI.dll Defines the base class for all rich text tags. public abstract class RichTextTag Inheritance object RichTextTag Derived NoParamsTag AlignTag AlphaTag ColorTag ScaleTag MeasurementTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public abstract string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public abstract TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public abstract bool HandleTag(ParserContext context, string parameters) Parameters context ParserContext The context of the parser. parameters string The parameters of the tag, excluding the delimiter. Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AlignTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AlignTag.html",
    "title": "Class AlignTag | RueI",
    "keywords": "Class AlignTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle scale tags. public class AlignTag : RichTextTag Inheritance object RichTextTag AlignTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AllcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AllcapsTag.html",
    "title": "Class AllcapsTag | RueI",
    "keywords": "Class AllcapsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle allcaps tags. public class AllcapsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag AllcapsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AlphaTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AlphaTag.html",
    "title": "Class AlphaTag | RueI",
    "keywords": "Class AlphaTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle line-height tags. public class AlphaTag : RichTextTag Inheritance object RichTextTag AlphaTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.BoldTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.BoldTag.html",
    "title": "Class BoldTag | RueI",
    "keywords": "Class BoldTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle line-height tags. public class BoldTag : NoParamsTag Inheritance object RichTextTag NoParamsTag BoldTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CSpaceTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CSpaceTag.html",
    "title": "Class CSpaceTag | RueI",
    "keywords": "Class CSpaceTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle cspace tags. public class CSpaceTag : MeasurementTag Inheritance object RichTextTag MeasurementTag CSpaceTag Inherited Members MeasurementTag.TagStyle MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties AllowPercentages Gets a value indicating whether or not this tag allows parentheses. public override bool AllowPercentages { get; } Property Value bool Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAlignTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAlignTag.html",
    "title": "Class CloseAlignTag | RueI",
    "keywords": "Class CloseAlignTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing align tags. public class CloseAlignTag : ClosingTag<CloseAlignTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseAlignTag> CloseAlignTag Inherited Members ClosingTag<CloseAlignTag>.Names ClosingTag<CloseAlignTag>.HandleTag(ParserContext) ClosingTag<CloseAlignTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAllcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAllcapsTag.html",
    "title": "Class CloseAllcapsTag | RueI",
    "keywords": "Class CloseAllcapsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing smallcaps tags. public class CloseAllcapsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseAllcapsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAlphaTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAlphaTag.html",
    "title": "Class CloseAlphaTag | RueI",
    "keywords": "Class CloseAlphaTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing alpha tags. public class CloseAlphaTag : ClosingTag<CloseAlphaTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseAlphaTag> CloseAlphaTag Inherited Members ClosingTag<CloseAlphaTag>.Names ClosingTag<CloseAlphaTag>.HandleTag(ParserContext) ClosingTag<CloseAlphaTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseBoldTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseBoldTag.html",
    "title": "Class CloseBoldTag | RueI",
    "keywords": "Class CloseBoldTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing line-height tags. public class CloseBoldTag : ClosingTag<CloseBoldTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseBoldTag> CloseBoldTag Inherited Members ClosingTag<CloseBoldTag>.Names ClosingTag<CloseBoldTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseCSpaceTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseCSpaceTag.html",
    "title": "Class CloseCSpaceTag | RueI",
    "keywords": "Class CloseCSpaceTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing cspace tags. public class CloseCSpaceTag : ClosingTag<CloseLineHeightTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseLineHeightTag> CloseCSpaceTag Inherited Members ClosingTag<CloseLineHeightTag>.Names ClosingTag<CloseLineHeightTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseColorTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseColorTag.html",
    "title": "Class CloseColorTag | RueI",
    "keywords": "Class CloseColorTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing color tags. public class CloseColorTag : ClosingTag<CloseColorTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseColorTag> CloseColorTag Inherited Members ClosingTag<CloseColorTag>.Names ClosingTag<CloseColorTag>.HandleTag(ParserContext) ClosingTag<CloseColorTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseItalicsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseItalicsTag.html",
    "title": "Class CloseItalicsTag | RueI",
    "keywords": "Class CloseItalicsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing color tags. public class CloseItalicsTag : ClosingTag<CloseItalicsTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseItalicsTag> CloseItalicsTag Inherited Members ClosingTag<CloseItalicsTag>.Names ClosingTag<CloseItalicsTag>.HandleTag(ParserContext) ClosingTag<CloseItalicsTag>.ApplyTo(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLineHeightTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLineHeightTag.html",
    "title": "Class CloseLineHeightTag | RueI",
    "keywords": "Class CloseLineHeightTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing line-height tags. public class CloseLineHeightTag : ClosingTag<CloseLineHeightTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseLineHeightTag> CloseLineHeightTag Inherited Members ClosingTag<CloseLineHeightTag>.Names ClosingTag<CloseLineHeightTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLowercase.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLowercase.html",
    "title": "Class CloseLowercase | RueI",
    "keywords": "Class CloseLowercase Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing smallcaps tags. public class CloseLowercase : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseLowercase Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseScaleTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseScaleTag.html",
    "title": "Class CloseScaleTag | RueI",
    "keywords": "Class CloseScaleTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing scale tags. public class CloseScaleTag : ClosingTag<CloseScaleTag> Inheritance object RichTextTag NoParamsTag ClosingTag<CloseScaleTag> CloseScaleTag Inherited Members ClosingTag<CloseScaleTag>.Names ClosingTag<CloseScaleTag>.HandleTag(ParserContext) NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Name Gets the only name of this ClosingTag<T>. public override string Name { get; } Property Value string Methods ApplyTo(ParserContext) Applies the effects ClosingTag<T> to a ParserContext. protected override void ApplyTo(ParserContext context) Parameters context ParserContext The context of the parser."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSizeTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSizeTag.html",
    "title": "Class CloseSizeTag | RueI",
    "keywords": "Class CloseSizeTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing size tags. public class CloseSizeTag : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseSizeTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSmallcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSmallcapsTag.html",
    "title": "Class CloseSmallcapsTag | RueI",
    "keywords": "Class CloseSmallcapsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle closing smallcaps tags. public class CloseSmallcapsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag CloseSmallcapsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ColorTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ColorTag.html",
    "title": "Class ColorTag | RueI",
    "keywords": "Class ColorTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle color tags. public class ColorTag : RichTextTag Inheritance object RichTextTag ColorTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ItalicsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ItalicsTag.html",
    "title": "Class ItalicsTag | RueI",
    "keywords": "Class ItalicsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle italics tags. public class ItalicsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag ItalicsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LineHeightTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LineHeightTag.html",
    "title": "Class LineHeightTag | RueI",
    "keywords": "Class LineHeightTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle line-height tags. public class LineHeightTag : MeasurementTag Inheritance object RichTextTag MeasurementTag LineHeightTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LowercaseTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LowercaseTag.html",
    "title": "Class LowercaseTag | RueI",
    "keywords": "Class LowercaseTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle lowercase tags. public class LowercaseTag : NoParamsTag Inheritance object RichTextTag NoParamsTag LowercaseTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ScaleTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ScaleTag.html",
    "title": "Class ScaleTag | RueI",
    "keywords": "Class ScaleTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle scale tags. public class ScaleTag : RichTextTag Inheritance object RichTextTag ScaleTag Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] TagStyle Gets the parameter style of this tag. public override TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SizeTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SizeTag.html",
    "title": "Class SizeTag | RueI",
    "keywords": "Class SizeTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle size tags. public class SizeTag : MeasurementTag Inheritance object RichTextTag MeasurementTag SizeTag Inherited Members MeasurementTag.TagStyle MeasurementTag.AllowPercentages MeasurementTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public override bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SmallcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SmallcapsTag.html",
    "title": "Class SmallcapsTag | RueI",
    "keywords": "Class SmallcapsTag Namespace RueI.Parsing.Tags.ConcreteTags Assembly RueI.dll Provides a way to handle smallcaps tags. public class SmallcapsTag : NoParamsTag Inheritance object RichTextTag NoParamsTag SmallcapsTag Inherited Members NoParamsTag.TagStyle NoParamsTag.HandleTag(ParserContext, string) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Names Gets the names of this tag. public override string[] Names { get; } Property Value string[] Methods HandleTag(ParserContext) Applies this tag (without parameters) to a ParserContext. public override bool HandleTag(ParserContext context) Parameters context ParserContext The context of the parser. Returns bool true if the tag is valid, otherwise false."
  },
  "api/RueI.Parsing.Tags.ConcreteTags.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.html",
    "title": "Namespace RueI.Parsing.Tags.ConcreteTags | RueI",
    "keywords": "Namespace RueI.Parsing.Tags.ConcreteTags Classes AlignTag Provides a way to handle scale tags. AllcapsTag Provides a way to handle allcaps tags. AlphaTag Provides a way to handle line-height tags. BoldTag Provides a way to handle line-height tags. CSpaceTag Provides a way to handle cspace tags. CloseAlignTag Provides a way to handle closing align tags. CloseAllcapsTag Provides a way to handle closing smallcaps tags. CloseAlphaTag Provides a way to handle closing alpha tags. CloseBoldTag Provides a way to handle closing line-height tags. CloseCSpaceTag Provides a way to handle closing cspace tags. CloseColorTag Provides a way to handle closing color tags. CloseItalicsTag Provides a way to handle closing color tags. CloseLineHeightTag Provides a way to handle closing line-height tags. CloseLowercase Provides a way to handle closing smallcaps tags. CloseScaleTag Provides a way to handle closing scale tags. CloseSizeTag Provides a way to handle closing size tags. CloseSmallcapsTag Provides a way to handle closing smallcaps tags. ColorTag Provides a way to handle color tags. ItalicsTag Provides a way to handle italics tags. LineHeightTag Provides a way to handle line-height tags. LowercaseTag Provides a way to handle lowercase tags. ScaleTag Provides a way to handle scale tags. SizeTag Provides a way to handle size tags. SmallcapsTag Provides a way to handle smallcaps tags."
  },
  "api/RueI.Parsing.Tags.MeasurementTag.html": {
    "href": "api/RueI.Parsing.Tags.MeasurementTag.html",
    "title": "Class MeasurementTag | RueI",
    "keywords": "Class MeasurementTag Namespace RueI.Parsing.Tags Assembly RueI.dll Defines the base class for all tags that only take in a measurement. public abstract class MeasurementTag : RichTextTag Inheritance object RichTextTag MeasurementTag Derived CSpaceTag LineHeightTag SizeTag Inherited Members RichTextTag.Names object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties AllowPercentages Gets a value indicating whether or not this tag allows parentheses. public virtual bool AllowPercentages { get; } Property Value bool TagStyle Gets the parameter style of this tag. public override sealed TagStyle TagStyle { get; } Property Value TagStyle Remarks This property is used to determine what delimiters between the tag name and parameters (e.g. space, equal sign, none) will be allowed. For multiple tag style, create different classes. Methods HandleTag(ParserContext, MeasurementInfo) Handles an instance of this tag with MeasurementInfo. public abstract bool HandleTag(ParserContext context, MeasurementInfo info) Parameters context ParserContext The context of the parser. info MeasurementInfo The information about the measurement. Returns bool true if the tag is valid, otherwise false. HandleTag(ParserContext, string) Applies this tag to a ParserContext. public override sealed bool HandleTag(ParserContext context, string content) Parameters context ParserContext The context of the parser. content string Returns bool true if the tag is valid, otherwise false. Remarks If the tag does not have parameters, parameters will always be Empty."
  },
  "api/RueI.Parsing.Tags.RichTextTagAttribute.html": {
    "href": "api/RueI.Parsing.Tags.RichTextTagAttribute.html",
    "title": "Class RichTextTagAttribute | RueI",
    "keywords": "Class RichTextTagAttribute Namespace RueI.Parsing.Tags Assembly RueI.dll Defines a RichTextTag for RueI. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class RichTextTagAttribute : Attribute, _Attribute Inheritance object Attribute RichTextTagAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>)"
  },
  "api/RueI.Parsing.Tags.SharedTag-1.html": {
    "href": "api/RueI.Parsing.Tags.SharedTag-1.html",
    "title": "Class SharedTag<T> | RueI",
    "keywords": "Class SharedTag<T> Namespace RueI.Parsing.Tags Assembly RueI.dll Provides a way to handle singletons of tags. public static class SharedTag<T> where T : RichTextTag, new() Type Parameters T The RichTextTag type to share. Inheritance object SharedTag<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks This class provides a way to guarantee that only one instance of a tag will ever be used by the parser, since tags are not static to support inheritance but must act similar to it. Properties Singleton Gets the shared singleton for this RichTextTag. public static T Singleton { get; } Property Value T"
  },
  "api/RueI.Parsing.Tags.TagHelpers.html": {
    "href": "api/RueI.Parsing.Tags.TagHelpers.html",
    "title": "Class TagHelpers | RueI",
    "keywords": "Class TagHelpers Namespace RueI.Parsing.Tags Assembly RueI.dll Provides a number of helper functions for RichTextTags. public static class TagHelpers Inheritance object TagHelpers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ExtractFromQuotations(string) Validates and extracts the text from inside quotations for tag parameters, or returns the original string. public static string? ExtractFromQuotations(string str) Parameters str string The string to extract the quotations from. Returns string The string with the quotes removed, or null if the string is invalid. Examples This code demonstrates the behavior of ExtractFromQuotations(string). ExtractFromQuotations(\"\\\"hello world\\\"\") // -> hello world ExtractFromQuotations(\"hello world\") // -> hello world ExtractFromQuotations(\"\\\"hello world\") // -> null ExtractFromQuotations(\"hello world\\\"\") // -> null"
  },
  "api/RueI.Parsing.Tags.html": {
    "href": "api/RueI.Parsing.Tags.html",
    "title": "Namespace RueI.Parsing.Tags | RueI",
    "keywords": "Namespace RueI.Parsing.Tags Classes MeasurementTag Defines the base class for all tags that only take in a measurement. RichTextTagAttribute Defines a RichTextTag for RueI. SharedTag<T> Provides a way to handle singletons of tags. TagHelpers Provides a number of helper functions for RichTextTags."
  },
  "api/RueI.Parsing.TextInfo.html": {
    "href": "api/RueI.Parsing.TextInfo.html",
    "title": "Class TextInfo | RueI",
    "keywords": "Class TextInfo Namespace RueI.Parsing Assembly RueI.dll Provides information about TMP text at a certain point. public class TextInfo Inheritance object TextInfo Derived ParserContext Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Remarks This class provides information necessary for individual character sizes, but does not provide the required information to calculate vertical offsets and total line widths. For that, use the derived class ParserContext. Properties CurrentCSpace Gets or sets the current additional character spacing of the text. public float CurrentCSpace { get; set; } Property Value float CurrentCase Gets or sets the current case of the parser. public CaseStyle CurrentCase { get; set; } Property Value CaseStyle CurrentLineHeight Gets or sets the current line height of the parser. public float CurrentLineHeight { get; set; } Property Value float IsBold Gets or sets a value indicating whether or not the characters are currently bold. public bool IsBold { get; set; } Property Value bool IsMonospace Gets or sets a value indicating whether the characters are currently in monospace. public bool IsMonospace { get; set; } Property Value bool IsSuperOrSubScript Gets or sets a value indicating whether or not the parser is in subscript/superscript. public bool IsSuperOrSubScript { get; set; } Property Value bool Monospacing Gets or sets the monospacing of the text. public float Monospacing { get; set; } Property Value float Scale Gets or sets the scale of the parser. public float Scale { get; set; } Property Value float Size Gets or sets the current character of the parser. public float Size { get; set; } Property Value float"
  },
  "api/RueI.Parsing.html": {
    "href": "api/RueI.Parsing.html",
    "title": "Namespace RueI.Parsing | RueI",
    "keywords": "Namespace RueI.Parsing Classes ClosingTag<T> Defines the base class for all rich text tags. NoParamsTag Defines the base class for all rich text tags. Parser Helps parse the content of elements. ParserBuilder Builds Parsers. ParserContext Describes the state of a parser at a time. RichTextTag Defines the base class for all rich text tags. TextInfo Provides information about TMP text at a certain point."
  },
  "api/RueI.Patches.HintPatch.html": {
    "href": "api/RueI.Patches.HintPatch.html",
    "title": "Class HintPatch | RueI",
    "keywords": "Class HintPatch Namespace RueI.Patches Assembly RueI.dll Patches HintDisplay.Show to detect when hints are shown. [HarmonyPatch(typeof(HintDisplay), \"Show\")] public static class HintPatch Inheritance object HintPatch Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods HandleAnonymousHint(NetworkConnection, Hint) public static void HandleAnonymousHint(NetworkConnection connection, Hint hint) Parameters connection NetworkConnection hint Hint Transpiler(IEnumerable<CodeInstruction>, ILGenerator) [HarmonyTranspiler] public static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions, ILGenerator generator) Parameters instructions IEnumerable<CodeInstruction> generator ILGenerator Returns IEnumerable<CodeInstruction>"
  },
  "api/RueI.Patches.html": {
    "href": "api/RueI.Patches.html",
    "title": "Namespace RueI.Patches | RueI",
    "keywords": "Namespace RueI.Patches Classes HintPatch Patches HintDisplay.Show to detect when hints are shown."
  },
  "api/RueI.Ruetility.html": {
    "href": "api/RueI.Ruetility.html",
    "title": "Class Ruetility | RueI",
    "keywords": "Class Ruetility Namespace RueI Assembly RueI.dll Provides helpful functions for dealing with elements and hints. public static class Ruetility Inheritance object Ruetility Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods FunctionalToScaledPosition(float) Converts a functional position into a scaled position. public static float FunctionalToScaledPosition(float position) Parameters position float The position to convert. Returns float The converted value. GetCleanText(string) Cleans a string by wrapping it in noparses, and removes any noparse closer tags existing in it already. public static string GetCleanText(string text) Parameters text string The string to clean. Returns string The cleaned string. ScaledPositionToFunctional(float) Converts a scaled position from 0-1000 into functional pixels (offset from baseline). public static float ScaledPositionToFunctional(float position) Parameters position float The position to convert. Returns float The converted value."
  },
  "api/RueI.UnityAlternative.IAsyncOperation.html": {
    "href": "api/RueI.UnityAlternative.IAsyncOperation.html",
    "title": "Interface UnityAlternative.IAsyncOperation | RueI",
    "keywords": "Interface UnityAlternative.IAsyncOperation Namespace RueI Assembly RueI.dll Represents a generalized handler for an async operation. public interface UnityAlternative.IAsyncOperation : IDisposable Inherited Members IDisposable.Dispose() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties IsRunning Gets a value indicating whether or not this operation is handling. bool IsRunning { get; } Property Value bool Methods Cancel() Cancels this operation. void Cancel()"
  },
  "api/RueI.UnityAlternative.html": {
    "href": "api/RueI.UnityAlternative.html",
    "title": "Class UnityAlternative | RueI",
    "keywords": "Class UnityAlternative Namespace RueI Assembly RueI.dll Defines the base class for a provider of methods that may or may not use Unity. public abstract class UnityAlternative Inheritance object UnityAlternative Derived NonUnityProvider UnityProvider Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Provider Gets the current UnityAlternative of the application. public static UnityAlternative Provider { get; } Property Value UnityAlternative Methods Log(string) Logs a message to the console. public abstract void Log(string message) Parameters message string The message to log. PerformAsync(TimeSpan, Action) Performs an async operation. public abstract UnityAlternative.IAsyncOperation PerformAsync(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Returns UnityAlternative.IAsyncOperation A UnityAlternative.IAsyncOperation to use."
  },
  "api/RueI.UnityProvider.MECAsyncOperation.html": {
    "href": "api/RueI.UnityProvider.MECAsyncOperation.html",
    "title": "Class UnityProvider.MECAsyncOperation | RueI",
    "keywords": "Class UnityProvider.MECAsyncOperation Namespace RueI Assembly RueI.dll Represents an async operation using a Task. public class UnityProvider.MECAsyncOperation : UnityAlternative.IAsyncOperation, IDisposable Inheritance object UnityProvider.MECAsyncOperation Implements UnityAlternative.IAsyncOperation IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors MECAsyncOperation(TimeSpan, Action) Initializes a new instance of the UnityProvider.MECAsyncOperation class, and then immediately runs. public MECAsyncOperation(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Properties IsRunning Gets a value indicating whether or not this operation is handling. public bool IsRunning { get; } Property Value bool Methods Cancel() Cancels this operation. public void Cancel() Dispose() Disposes this MEC operation. public void Dispose()"
  },
  "api/RueI.UnityProvider.html": {
    "href": "api/RueI.UnityProvider.html",
    "title": "Class UnityProvider | RueI",
    "keywords": "Class UnityProvider Namespace RueI Assembly RueI.dll Provides Unity methods for the application. public class UnityProvider : UnityAlternative Inheritance object UnityAlternative UnityProvider Inherited Members UnityAlternative.Provider object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Methods Log(string) Logs a message to the console. public override void Log(string message) Parameters message string The message to log. PerformAsync(TimeSpan, Action) Performs an async operation. public override UnityAlternative.IAsyncOperation PerformAsync(TimeSpan span, Action action) Parameters span TimeSpan How long until the action should be ran. action Action The action to run when finished. Returns UnityAlternative.IAsyncOperation A UnityAlternative.IAsyncOperation to use."
  },
  "api/RueI.html": {
    "href": "api/RueI.html",
    "title": "Namespace RueI | RueI",
    "keywords": "Namespace RueI Classes CharacterLengths Provides a variety of constant values. Constants Provides a variety of constant values. EventHandler Handles events for RueI. Main Represents the main class for RueI. NonUnityProvider Provides non-Unity alternatives for the UnityProvider of the application. NonUnityProvider.TaskAsyncOperation Represents an async operation using a Task. Ruetility Provides helpful functions for dealing with elements and hints. UnityAlternative Defines the base class for a provider of methods that may or may not use Unity. UnityProvider Provides Unity methods for the application. UnityProvider.MECAsyncOperation Represents an async operation using a Task. Interfaces UnityAlternative.IAsyncOperation Represents a generalized handler for an async operation."
  },
  "api/eMEC.Cooldown.html": {
    "href": "api/eMEC.Cooldown.html",
    "title": "Class Cooldown | RueI",
    "keywords": "Class Cooldown Namespace eMEC Assembly RueI.dll Provides a way to implement a cooldown easily. public class Cooldown Inheritance object Cooldown Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Active Gets a value indicating whether or not the cooldown is active. public bool Active { get; } Property Value bool Length Gets or sets the current length of the cooldown. public TimeSpan Length { get; set; } Property Value TimeSpan TimeLeft Gets the amount of time left for the cooldown. public TimeSpan TimeLeft { get; } Property Value TimeSpan Methods Pause() Pauses the cooldown. public void Pause() Resume() Resume the cooldown if it is paused. public void Resume() Start(float) Starts the cooldown. public void Start(float length) Parameters length float In seconds, how long the cooldown should last. Start(TimeSpan) Starts the cooldown. public void Start(TimeSpan length) Parameters length TimeSpan How long the cooldown should last."
  },
  "api/eMEC.ITaskable.html": {
    "href": "api/eMEC.ITaskable.html",
    "title": "Interface ITaskable | RueI",
    "keywords": "Interface ITaskable Namespace eMEC Assembly RueI.dll Represents anything that deals with Tasks. public interface ITaskable Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Methods CleanUp() Recursvely cleans up this ITaskable. void CleanUp() DescendOrPerform(Action<TaskBase>) Recursively loops through the pool, or performs the action if this is a Task. void DescendOrPerform(Action<TaskBase> action) Parameters action Action<TaskBase> The Action<T> to perform."
  },
  "api/eMEC.MECExtensions.html": {
    "href": "api/eMEC.MECExtensions.html",
    "title": "Class MECExtensions | RueI",
    "keywords": "Class MECExtensions Namespace eMEC Assembly RueI.dll Provides extensions for working with MEC. The primary purpose is to provide better nullable functionality. public static class MECExtensions Inheritance object MECExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods IsRunning(CoroutineHandle) Gets whether or not a coroutine is running. public static bool IsRunning(this CoroutineHandle handle) Parameters handle CoroutineHandle The handle. Returns bool A bool indicating whether or not the coroutine is running. IsRunningOrPaused(CoroutineHandle) Gets whether or not a coroutine is running or paused. public static bool IsRunningOrPaused(this CoroutineHandle handle) Parameters handle CoroutineHandle The handle. Returns bool A bool indicating whether or not the coroutine is running or paused. Kill(CoroutineHandle) Kills a coroutine. public static void Kill(this CoroutineHandle handle) Parameters handle CoroutineHandle The handle to kill."
  },
  "api/eMEC.TaskBase.html": {
    "href": "api/eMEC.TaskBase.html",
    "title": "Class TaskBase | RueI",
    "keywords": "Class TaskBase Namespace eMEC Assembly RueI.dll Provides the base class for all tasks. public abstract class TaskBase : ITaskable Inheritance object TaskBase Implements ITaskable Derived UpdateTask Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Constructors TaskBase() Initializes a new instance of the TaskBase class. public TaskBase() TaskBase(TaskPool) Initializes a new instance of the TaskBase class. public TaskBase(TaskPool pool) Parameters pool TaskPool The pool to add Task to. Fields operation protected UnityAlternative.IAsyncOperation? operation Field Value UnityAlternative.IAsyncOperation Properties IsRunning Gets a value indicating whether or not this task is currently running. public abstract bool IsRunning { get; } Property Value bool Methods CleanUp() Recursvely cleans up this ITaskable. public void CleanUp() DescendOrPerform(Action<TaskBase>) Performs an action on this task. public void DescendOrPerform(Action<TaskBase> action) Parameters action Action<TaskBase> The method to perform. End() Ends the task, without calling the method. public virtual void End() ~TaskBase() Finalizes an instance of the TaskBase class. protected ~TaskBase() ResetState() protected virtual void ResetState()"
  },
  "api/eMEC.TaskPool.html": {
    "href": "api/eMEC.TaskPool.html",
    "title": "Class TaskPool | RueI",
    "keywords": "Class TaskPool Namespace eMEC Assembly RueI.dll Manages a number of ITaskables and tasks. public class TaskPool : Collection<ITaskable>, IList<ITaskable>, ICollection<ITaskable>, IList, ICollection, IReadOnlyList<ITaskable>, IReadOnlyCollection<ITaskable>, IEnumerable<ITaskable>, IEnumerable, ITaskable Inheritance object Collection<ITaskable> TaskPool Implements IList<ITaskable> ICollection<ITaskable> IList ICollection IReadOnlyList<ITaskable> IReadOnlyCollection<ITaskable> IEnumerable<ITaskable> IEnumerable ITaskable Inherited Members Collection<ITaskable>.Add(ITaskable) Collection<ITaskable>.Clear() Collection<ITaskable>.CopyTo(ITaskable[], int) Collection<ITaskable>.Contains(ITaskable) Collection<ITaskable>.GetEnumerator() Collection<ITaskable>.IndexOf(ITaskable) Collection<ITaskable>.Insert(int, ITaskable) Collection<ITaskable>.Remove(ITaskable) Collection<ITaskable>.RemoveAt(int) Collection<ITaskable>.ClearItems() Collection<ITaskable>.InsertItem(int, ITaskable) Collection<ITaskable>.RemoveItem(int) Collection<ITaskable>.SetItem(int, ITaskable) Collection<ITaskable>.Count Collection<ITaskable>.Items Collection<ITaskable>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods CollectionExtensions.Add<T>(ICollection<T>, params T[]) IEnumerableExtensions.ToPooledList<T>(IEnumerable<T>) IEnumerableExtensions.ToPooledList<T>(IEnumerable<T>, int) UniversalExtensions.AddTo<T>(T, ICollection<T>) Methods CleanUp() Recursvely cleans up this ITaskable. public void CleanUp() DescendOrPerform(Action<TaskBase>) Recursively loops through the pool, or performs the action if this is a Task. public void DescendOrPerform(Action<TaskBase> action) Parameters action Action<TaskBase> The Action<T> to perform. ~TaskPool() Finalizes an instance of the TaskPool class. protected ~TaskPool()"
  },
  "api/eMEC.UpdateTask.html": {
    "href": "api/eMEC.UpdateTask.html",
    "title": "Class UpdateTask | RueI",
    "keywords": "Class UpdateTask Namespace eMEC Assembly RueI.dll Represents a task that runs a method when finished. public class UpdateTask : TaskBase, ITaskable Inheritance object TaskBase UpdateTask Implements ITaskable Inherited Members TaskBase.operation TaskBase.CleanUp() TaskBase.End() TaskBase.DescendOrPerform(Action<TaskBase>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods UniversalExtensions.AddTo<T>(T, ICollection<T>) Properties Action Gets or sets a method that will be run when the task is finished. public Action? Action { get; set; } Property Value Action ElapsedTime Gets how long the task has been running for. public TimeSpan? ElapsedTime { get; } Property Value TimeSpan? FinishesAt Gets how long the task has been running for. public DateTimeOffset? FinishesAt { get; } Property Value DateTimeOffset? IsRunning Gets a value indicating whether or not this task is currently running. public override bool IsRunning { get; } Property Value bool Length Gets the length of the task. public TimeSpan? Length { get; } Property Value TimeSpan? TimeLeft Gets the amount of time left until the task is finished. public TimeSpan? TimeLeft { get; } Property Value TimeSpan? Methods AddLength(TimeSpan) Adds a certain amount of time to the length of the task, if it is running. public void AddLength(TimeSpan toAdd) Parameters toAdd TimeSpan An amount of time to add. Remarks The timespan can be negative. If the new length is less than the elapsed time, the task will immediately finish. ChangeLength(TimeSpan) Sets the length of the task, if it is running. public void ChangeLength(TimeSpan newLength) Parameters newLength TimeSpan The new length. Remarks If the new length is less than the elapsed time, the task will immediately finish. Pause() Pauses the task. public void Pause() ResetState() Resets the state of the task to before it was started. protected override void ResetState() Resume() Resumes the task if it is paused. public void Resume() Start(float, Action) Starts the task. public void Start(float length, Action action) Parameters length float In seconds, how long to run the action for. action Action The action to run when finished. Start(TimeSpan, Action) Starts the task. public void Start(TimeSpan length, Action action) Parameters length TimeSpan How long to run the task for. action Action The action to run when finished. SubtractLength(TimeSpan) Subtracts a certain amount of time from the length of the task, if it is running. public void SubtractLength(TimeSpan toSubtract) Parameters toSubtract TimeSpan An amount of time to subtract. Remarks If the new length is less than the elapsed time, the task will immediately finish."
  },
  "api/eMEC.html": {
    "href": "api/eMEC.html",
    "title": "Namespace eMEC | RueI",
    "keywords": "Namespace eMEC Classes Cooldown Provides a way to implement a cooldown easily. MECExtensions Provides extensions for working with MEC. The primary purpose is to provide better nullable functionality. TaskBase Provides the base class for all tasks. TaskPool Manages a number of ITaskables and tasks. UpdateTask Represents a task that runs a method when finished. Interfaces ITaskable Represents anything that deals with Tasks."
  },
  "index.html": {
    "href": "index.html",
    "title": "RueI | RueI",
    "keywords": "RueI RueI is a hint framework for scp:sl. it provides the ability to show multiple hints at once, along with a lot of other features for server owners installing RueI is easy. download the dll, and move it into your dependencies folder for the plugin framework you are using. note that RueI requires Harmony 2.2.2, you can get that here."
  },
  "markdown/customtags.html": {
    "href": "markdown/customtags.html",
    "title": "Creating Custom Tags | RueI",
    "keywords": "Creating Custom Tags RueI supports creating custom rich text tags. all rich text tags should ultimately derive from RichTextTag. if you need certain parameter types, there are a few abstract subclasses that automatically parse their parameters. for measurement tags (e.g <line-height=5em>) use"
  },
  "markdown/eMec.html": {
    "href": "markdown/eMec.html",
    "title": "eMEC | RueI",
    "keywords": "eMEC eMEC is a wrapper for MEC that is used by RueI. it is absolutely not necessary to use it in your own plugins, but it does provide some utility. eMEC provides a few notable advantages over the usual MEC. firstly, it is much higher level - you do not directly manipulate CoroutineHandles directly. instead, you use TaskBases (not to be confused with .NET Tasks). secondly, if RueI detects that it is not running in Unity, it will automatically swap over to using .NET tasks, which means that you can do unit tests on things that use TaskBases but also use them normally in scp:sl."
  },
  "markdown/getting-started.html": {
    "href": "markdown/getting-started.html",
    "title": "Getting Started | RueI",
    "keywords": "Getting Started this guide assumes that you have a basic level of knowledge with c#. there are two main ways of using RueI: through a normal dependency or through reflection. with a normal dependency, you include RueI as a dependency in your project. the advantages of this are that it gives you type safety, it is significantly faster, and it is just overall much easier to use. however, if someone does not have RueI installed, then your plugin will stop working. this makes it ideal for plugins that rely on RueI heavily, or if you're creating a plugin for your own use. with reflection, you can dynamically add support for RueI, meaning that your plugin works even if someone doesn't have RueI installed. this guide will cover how to use RueI using the first option, as a normal dependency. installing RueI"
  },
  "markdown/hintbuilding.html": {
    "href": "markdown/hintbuilding.html",
    "title": "HintBuilding Extensions | RueI",
    "keywords": "HintBuilding Extensions RueI provides extensions to StringBuilder through the HintBuilding class. this provides a large number of methods on StringBuilder to make adding tags easier and less error-prone. to use this, you first bring the class into scope: using RueI.Extensions.HintBuilding; then, you can use it like so: StringBuilder sb = new() .SetColor(255, 0, 0) .SetSize(1.5, MeasurementStyle.Ems) .Append(\"hello!\") .CloseColor() .CloseSize(); since all of the methods return the original StringBuilder, you can chain them easily."
  },
  "markdown/introduction.html": {
    "href": "markdown/introduction.html",
    "title": "Introduction | RueI",
    "keywords": "Introduction RueI is a hint framework for scp:sl. the primary component of RueI is the ability to display multiple hints at once, but it also provides a lot of other features to make working with hints easier and more effective. a quick note: RueI is licensed under CC0 1.0. this means you can do whatever you want with both its compiled versions and its source code. commerical use, modifications, etc, are all okay! :) RueI is a dependency. it is a not a plugin. this means that it does not provide any functionality out of the box. other plugins will not work automatically once you install this if they do not have built-in support for RueI."
  },
  "markdown/scheduling.html": {
    "href": "markdown/scheduling.html",
    "title": "Using the Scheduler | RueI",
    "keywords": "Using the Scheduler RueI comes with the Scheduler, and every display has one of them. the main purpose of the Scheduler is to provide an easy way to update the display at a certain time, and to provide a way to batch updates together to prevent getting ratelimited. normally, the hints system comes with a 0.5 second ratelimit. if you send a hint (which updating the display does), you cannot send another one for 0.5 seconds*. this can easily create problems. for example, what if you update the display in 0.3 seconds and 0.5 seconds? normally, the first update would show, but then the second update would not show up until in 0.8 seconds. this might not seem like the biggest problem, but it can make things look weird because of the delay. instead, what RueI will do is batch those two operations together, averaging the times. so, in that example, it will update the display in 0.4 seconds (assuming they both have the same priority). How to do it scheduling a job is pretty easy. first, you have to get the DisplayCore of a player, and then access the DisplayCore.Scheduler property. then you can use the Scheduler.Schedule method to schedule jobs. here's an example: // assuming hub is previously defined as a ReferenceHub SetElement element = new(300, \"Hello!!\"); DisplayCore core = DisplayCore.Get(hub); Display display = new(core); core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () => display.Elements.Add(element)); notice how you do not have to explicitly call display.Update() or core.Update(). this is because, once RueI performs a batch job, it automatically updates the display. updating the display in a batch job doesn't do anything as the DisplayCore ignores all update requests when it is performing a batch job. so, this does nothing: core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () => core.Update()); Canceling a job often, you're going to want to cancel a job that is ongoing. however, RueI does not return a reference to a job that you can then use to cancel it. instead, you use a JobToken. you can then pass a JobToken in the Scheduler.Schedule() method. the benefit of this is that since you can declare a static JobToken singleton, you can ensure that there is only ever one instance of a certain job. here's an example: public static JobToken HelloToken { get; } = new(); public void UpdateDisplay(ReferenceHub hub) { SetElement element = new(300, \"Hello!!\"); DisplayCore core = DisplayCore.Get(hub); Display display = new(core); core.Scheduler.KillJob(HelloToken); core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () => display.Elements.Add(element)); } with this, you won't ever have to worry about having multiple instances of the same job. * it is more complicated than this, technically. however, RueI enforces a 0.525 second ratelimit, so you won't notice it."
  }
}