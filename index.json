{
  "README.html": {
    "href": "README.html",
    "title": "RueI | RueI",
    "keywords": "RueI RueI is a hint framework, designed to be the definitive way to display multiple hints at once docs are available here. if you want to develop using RueI, make sure you install the nuget package Features support for displaying multiple hints at once without them interfering with eachother cross-plugin compatibility custom tags and other utility scheduler system, which makes dealing with the hint ratelimit easier RueI is not a grid-based or line-based system, it calculates the offset necessary to put a hint at the same position no matter what Comments if you\u0027ve encountered any bugs please make an issue (it helps me out a ton)"
  },
  "api/RueI.Constants.html": {
    "href": "api/RueI.Constants.html",
    "title": "Class Constants | RueI",
    "keywords": "Provides a variety of constant values.\n"
  },
  "api/RueI.Displays.AutoElement.html": {
    "href": "api/RueI.Displays.AutoElement.html",
    "title": "Class AutoElement | RueI",
    "keywords": "Manages and automatically assigns Element instances to any DisplayCore meeting a criteria.\n"
  },
  "api/RueI.Displays.Display.html": {
    "href": "api/RueI.Displays.Display.html",
    "title": "Class Display | RueI",
    "keywords": "Represents a basic display attached to a DisplayCore.\n"
  },
  "api/RueI.Displays.DisplayBase.html": {
    "href": "api/RueI.Displays.DisplayBase.html",
    "title": "Class DisplayBase | RueI",
    "keywords": "Defines the base class for all displays.\n"
  },
  "api/RueI.Displays.DisplayCore.html": {
    "href": "api/RueI.Displays.DisplayCore.html",
    "title": "Class DisplayCore | RueI",
    "keywords": "Manages all of the DisplayBases for a ReferenceHub.\n"
  },
  "api/RueI.Displays.ElemCombiner.html": {
    "href": "api/RueI.Displays.ElemCombiner.html",
    "title": "Class ElemCombiner | RueI",
    "keywords": "Provides a means of combining Elements.\n"
  },
  "api/RueI.Displays.IElemReference-1.html": {
    "href": "api/RueI.Displays.IElemReference-1.html",
    "title": "Interface IElemReference\u003CT\u003E | RueI",
    "keywords": "Represents a reference to an element present within any number of player\u0027s displays.\n"
  },
  "api/RueI.Displays.Interfaces.IElementContainer.html": {
    "href": "api/RueI.Displays.Interfaces.IElementContainer.html",
    "title": "Interface IElementContainer | RueI",
    "keywords": "Defines a container for multiple elements.\n"
  },
  "api/RueI.Displays.Interfaces.html": {
    "href": "api/RueI.Displays.Interfaces.html",
    "title": "Namespace RueI.Displays.Interfaces | RueI",
    "keywords": "Namespace RueI.Displays.Interfaces Interfaces IElementContainer Defines a container for multiple elements."
  },
  "api/RueI.Displays.Roles.html": {
    "href": "api/RueI.Displays.Roles.html",
    "title": "Enum Roles | RueI",
    "keywords": "Provides a means for describing multiple RoleTypeIds.\n"
  },
  "api/RueI.Displays.Scheduling.JobToken.html": {
    "href": "api/RueI.Displays.Scheduling.JobToken.html",
    "title": "Class JobToken | RueI",
    "keywords": "Represents a reference to any number of ScheduledJob.\n"
  },
  "api/RueI.Displays.Scheduling.RateLimiter.html": {
    "href": "api/RueI.Displays.Scheduling.RateLimiter.html",
    "title": "Class RateLimiter | RueI",
    "keywords": "Provides a way to ratelimit actions or detect ratelimits.\n"
  },
  "api/RueI.Displays.Scheduling.Records.ScheduledJob.html": {
    "href": "api/RueI.Displays.Scheduling.Records.ScheduledJob.html",
    "title": "Class ScheduledJob | RueI",
    "keywords": "Defines a scheduled job for a Scheduler.\n"
  },
  "api/RueI.Displays.Scheduling.Records.html": {
    "href": "api/RueI.Displays.Scheduling.Records.html",
    "title": "Namespace RueI.Displays.Scheduling.Records | RueI",
    "keywords": "Namespace RueI.Displays.Scheduling.Records Classes ScheduledJob Defines a scheduled job for a Scheduler."
  },
  "api/RueI.Displays.Scheduling.Scheduler.html": {
    "href": "api/RueI.Displays.Scheduling.Scheduler.html",
    "title": "Class Scheduler | RueI",
    "keywords": "Provides a means of doing batch operations.\n"
  },
  "api/RueI.Displays.Scheduling.TimedElemRef-1.html": {
    "href": "api/RueI.Displays.Scheduling.TimedElemRef-1.html",
    "title": "Class TimedElemRef\u003CT\u003E | RueI",
    "keywords": "Represents a IElemReference\u0026lt;T\u0026gt; with an associated JobToken.\n"
  },
  "api/RueI.Displays.Scheduling.html": {
    "href": "api/RueI.Displays.Scheduling.html",
    "title": "Namespace RueI.Displays.Scheduling | RueI",
    "keywords": "Namespace RueI.Displays.Scheduling Classes JobToken Represents a reference to any number of ScheduledJob. RateLimiter Provides a way to ratelimit actions or detect ratelimits. Scheduler Provides a means of doing batch operations. TimedElemRef\u003CT\u003E Represents a IElemReference\u003CT\u003E with an associated JobToken."
  },
  "api/RueI.Displays.Screen.html": {
    "href": "api/RueI.Displays.Screen.html",
    "title": "Class Screen | RueI",
    "keywords": "Represents a IElementContainer inside a ScreenDisplay.\n"
  },
  "api/RueI.Displays.ScreenDisplay.html": {
    "href": "api/RueI.Displays.ScreenDisplay.html",
    "title": "Class ScreenDisplay | RueI",
    "keywords": "Represents a display attached to a DisplayCore with support for Screens.\n"
  },
  "api/RueI.Displays.html": {
    "href": "api/RueI.Displays.html",
    "title": "Namespace RueI.Displays | RueI",
    "keywords": "Namespace RueI.Displays Classes AutoElement Manages and automatically assigns Element instances to any DisplayCore meeting a criteria. Display Represents a basic display attached to a DisplayCore. DisplayBase Defines the base class for all displays. DisplayCore Manages all of the DisplayBases for a ReferenceHub. ElemCombiner Provides a means of combining Elements. Screen Represents a IElementContainer inside a ScreenDisplay. ScreenDisplay Represents a display attached to a DisplayCore with support for Screens. Interfaces IElemReference\u003CT\u003E Represents a reference to an element present within any number of player\u0027s displays. Enums Roles Provides a means for describing multiple RoleTypeIds."
  },
  "api/RueI.Elements.Delegates.GetContent.html": {
    "href": "api/RueI.Elements.Delegates.GetContent.html",
    "title": "Delegate GetContent | RueI",
    "keywords": "Defines a method used to get content for an element.\n"
  },
  "api/RueI.Elements.Delegates.html": {
    "href": "api/RueI.Elements.Delegates.html",
    "title": "Namespace RueI.Elements.Delegates | RueI",
    "keywords": "Namespace RueI.Elements.Delegates Delegates GetContent Defines a method used to get content for an element."
  },
  "api/RueI.Elements.DynamicElement.html": {
    "href": "api/RueI.Elements.DynamicElement.html",
    "title": "Class DynamicElement | RueI",
    "keywords": "Represents a non-cached element that evaluates and parses a function when getting its content.\n"
  },
  "api/RueI.Elements.Element.html": {
    "href": "api/RueI.Elements.Element.html",
    "title": "Class Element | RueI",
    "keywords": "Represents the base class for all elements, which are individual \u0027hints\u0027 present within an arbitrary number of Displays.\n"
  },
  "api/RueI.Elements.Enums.ElementOptions.html": {
    "href": "api/RueI.Elements.Enums.ElementOptions.html",
    "title": "Enum ElementOptions | RueI",
    "keywords": "Provides options for elements.\n"
  },
  "api/RueI.Elements.Enums.html": {
    "href": "api/RueI.Elements.Enums.html",
    "title": "Namespace RueI.Elements.Enums | RueI",
    "keywords": "Namespace RueI.Elements.Enums Enums ElementOptions Provides options for elements."
  },
  "api/RueI.Elements.Interfaces.ISettable.html": {
    "href": "api/RueI.Elements.Interfaces.ISettable.html",
    "title": "Interface ISettable | RueI",
    "keywords": "Defines an Element that can be set.\n"
  },
  "api/RueI.Elements.Interfaces.html": {
    "href": "api/RueI.Elements.Interfaces.html",
    "title": "Namespace RueI.Elements.Interfaces | RueI",
    "keywords": "Namespace RueI.Elements.Interfaces Interfaces ISettable Defines an Element that can be set."
  },
  "api/RueI.Elements.SetElement.html": {
    "href": "api/RueI.Elements.SetElement.html",
    "title": "Class SetElement | RueI",
    "keywords": "Represents a simple cached element with settable content.\n"
  },
  "api/RueI.Elements.html": {
    "href": "api/RueI.Elements.html",
    "title": "Namespace RueI.Elements | RueI",
    "keywords": "Namespace RueI.Elements Classes DynamicElement Represents a non-cached element that evaluates and parses a function when getting its content. Element Represents the base class for all elements, which are individual \u0027hints\u0027 present within an arbitrary number of Displays. SetElement Represents a simple cached element with settable content."
  },
  "api/RueI.Events.DisplayUpdatedEventArgs.html": {
    "href": "api/RueI.Events.DisplayUpdatedEventArgs.html",
    "title": "Class DisplayUpdatedEventArgs | RueI",
    "keywords": "Contains all information after a player\u0027s DisplayCore is updated.\n"
  },
  "api/RueI.Events.Events.RueIEvent-1.html": {
    "href": "api/RueI.Events.Events.RueIEvent-1.html",
    "title": "Delegate Events.RueIEvent\u003CT\u003E | RueI",
    "keywords": "Represents a custom RueI event.\n"
  },
  "api/RueI.Events.Events.html": {
    "href": "api/RueI.Events.Events.html",
    "title": "Class Events | RueI",
    "keywords": "Provides events for use by other plugins.\n"
  },
  "api/RueI.Events.html": {
    "href": "api/RueI.Events.html",
    "title": "Namespace RueI.Events | RueI",
    "keywords": "Namespace RueI.Events Classes DisplayUpdatedEventArgs Contains all information after a player\u0027s DisplayCore is updated. Events Provides events for use by other plugins. Delegates Events.RueIEvent\u003CT\u003E Represents a custom RueI event."
  },
  "api/RueI.Extensions.DisplayCoreExtensions.html": {
    "href": "api/RueI.Extensions.DisplayCoreExtensions.html",
    "title": "Class DisplayCoreExtensions | RueI",
    "keywords": "Provides miscellaneous utility for DisplayCores.\n"
  },
  "api/RueI.Extensions.ElementHelpers.html": {
    "href": "api/RueI.Extensions.ElementHelpers.html",
    "title": "Class ElementHelpers | RueI",
    "keywords": "Provides extensions and helpers for working with elements.\n"
  },
  "api/RueI.Extensions.EnumExtensions.html": {
    "href": "api/RueI.Extensions.EnumExtensions.html",
    "title": "Class EnumExtensions | RueI",
    "keywords": "Provides extensions for working with RueI Enums.\n"
  },
  "api/RueI.Extensions.HintBuilding.HintBuilding.AlignStyle.html": {
    "href": "api/RueI.Extensions.HintBuilding.HintBuilding.AlignStyle.html",
    "title": "Enum HintBuilding.AlignStyle | RueI",
    "keywords": "Represents all of the options for the alignment of a string of text.\n"
  },
  "api/RueI.Extensions.HintBuilding.HintBuilding.html": {
    "href": "api/RueI.Extensions.HintBuilding.HintBuilding.html",
    "title": "Class HintBuilding | RueI",
    "keywords": "Provides extensions for adding rich text tags to StringBuilders.\n"
  },
  "api/RueI.Extensions.HintBuilding.html": {
    "href": "api/RueI.Extensions.HintBuilding.html",
    "title": "Namespace RueI.Extensions.HintBuilding | RueI",
    "keywords": "Namespace RueI.Extensions.HintBuilding Classes HintBuilding Provides extensions for adding rich text tags to StringBuilders. Enums HintBuilding.AlignStyle Represents all of the options for the alignment of a string of text."
  },
  "api/RueI.Extensions.IEnumerableExtensions.html": {
    "href": "api/RueI.Extensions.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | RueI",
    "keywords": "Provides extensions for working with collections.\n"
  },
  "api/RueI.Extensions.Intersection-2.html": {
    "href": "api/RueI.Extensions.Intersection-2.html",
    "title": "Class Intersection\u003CT, TOther\u003E | RueI",
    "keywords": "Represents an intersection between a class and an interface.\n"
  },
  "api/RueI.Extensions.ReflectionHelpers.html": {
    "href": "api/RueI.Extensions.ReflectionHelpers.html",
    "title": "Class ReflectionHelpers | RueI",
    "keywords": "Contains methods designed for use by reflection.\n"
  },
  "api/RueI.Extensions.html": {
    "href": "api/RueI.Extensions.html",
    "title": "Namespace RueI.Extensions | RueI",
    "keywords": "Namespace RueI.Extensions RueI.Extensions contains extensions and helpers for working with hints and RueI as a whole. This namespace also contains various extensions that are used internally by RueI. Classes DisplayCoreExtensions Provides miscellaneous utility for DisplayCores. ElementHelpers Provides extensions and helpers for working with elements. EnumExtensions Provides extensions for working with RueI Enums. IEnumerableExtensions Provides extensions for working with collections. Intersection\u003CT, TOther\u003E Represents an intersection between a class and an interface. ReflectionHelpers Contains methods designed for use by reflection."
  },
  "api/RueI.NonUnityProvider.TaskAsyncOperation.html": {
    "href": "api/RueI.NonUnityProvider.TaskAsyncOperation.html",
    "title": "Class NonUnityProvider.TaskAsyncOperation | RueI",
    "keywords": "Represents an async operation using a Task.\n"
  },
  "api/RueI.NonUnityProvider.html": {
    "href": "api/RueI.NonUnityProvider.html",
    "title": "Class NonUnityProvider | RueI",
    "keywords": "Provides non-Unity alternatives for the UnityProvider of the application.\n"
  },
  "api/RueI.Parsing.CharacterLengths.html": {
    "href": "api/RueI.Parsing.CharacterLengths.html",
    "title": "Class CharacterLengths | RueI",
    "keywords": "Provides lengths for characters in hints.\n"
  },
  "api/RueI.Parsing.ClosingTag-1.html": {
    "href": "api/RueI.Parsing.ClosingTag-1.html",
    "title": "Class ClosingTag\u003CT\u003E | RueI",
    "keywords": "Defines the base class for all rich text tags.\n"
  },
  "api/RueI.Parsing.Enums.CaseStyle.html": {
    "href": "api/RueI.Parsing.Enums.CaseStyle.html",
    "title": "Enum CaseStyle | RueI",
    "keywords": "Represents the case style of the parser.\n"
  },
  "api/RueI.Parsing.Enums.ColorStyle.html": {
    "href": "api/RueI.Parsing.Enums.ColorStyle.html",
    "title": "Enum ColorStyle | RueI",
    "keywords": "Represents the style used for a color parameter.\n"
  },
  "api/RueI.Parsing.Enums.MeasurementUnit.html": {
    "href": "api/RueI.Parsing.Enums.MeasurementUnit.html",
    "title": "Enum MeasurementUnit | RueI",
    "keywords": "Represents the unit used for a measurement parameter.\n"
  },
  "api/RueI.Parsing.Enums.TagStyle.html": {
    "href": "api/RueI.Parsing.Enums.TagStyle.html",
    "title": "Enum TagStyle | RueI",
    "keywords": "Represents the valid characters for a delimiter.\n"
  },
  "api/RueI.Parsing.Enums.html": {
    "href": "api/RueI.Parsing.Enums.html",
    "title": "Namespace RueI.Parsing.Enums | RueI",
    "keywords": "Namespace RueI.Parsing.Enums Enums CaseStyle Represents the case style of the parser. ColorStyle Represents the style used for a color parameter. MeasurementUnit Represents the unit used for a measurement parameter. TagStyle Represents the valid characters for a delimiter."
  },
  "api/RueI.Parsing.NoParamsTag.html": {
    "href": "api/RueI.Parsing.NoParamsTag.html",
    "title": "Class NoParamsTag | RueI",
    "keywords": "Defines a RichTextTag that does not take in parameters.\n"
  },
  "api/RueI.Parsing.Parser.html": {
    "href": "api/RueI.Parsing.Parser.html",
    "title": "Class Parser | RueI",
    "keywords": "Helps parse the content of elements. This class cannot be inherited.\n"
  },
  "api/RueI.Parsing.ParserBuilder.html": {
    "href": "api/RueI.Parsing.ParserBuilder.html",
    "title": "Class ParserBuilder | RueI",
    "keywords": "Builds Parsers.\n"
  },
  "api/RueI.Parsing.ParserContext.html": {
    "href": "api/RueI.Parsing.ParserContext.html",
    "title": "Class ParserContext | RueI",
    "keywords": "Describes the state of a parser at a time.\n"
  },
  "api/RueI.Parsing.Records.MeasurementInfo.html": {
    "href": "api/RueI.Parsing.Records.MeasurementInfo.html",
    "title": "Struct MeasurementInfo | RueI",
    "keywords": "Defines a record that contains information about measurement info.\n"
  },
  "api/RueI.Parsing.Records.ParsedData.html": {
    "href": "api/RueI.Parsing.Records.ParsedData.html",
    "title": "Class ParsedData | RueI",
    "keywords": "Defines a class that contains parsed information about a single element, used for displaying multiple at a time.\n"
  },
  "api/RueI.Parsing.Records.html": {
    "href": "api/RueI.Parsing.Records.html",
    "title": "Namespace RueI.Parsing.Records | RueI",
    "keywords": "Namespace RueI.Parsing.Records Classes ParsedData Defines a class that contains parsed information about a single element, used for displaying multiple at a time. Structs MeasurementInfo Defines a record that contains information about measurement info."
  },
  "api/RueI.Parsing.RichTextTag.html": {
    "href": "api/RueI.Parsing.RichTextTag.html",
    "title": "Class RichTextTag | RueI",
    "keywords": "Defines the base class for all rich text tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AlignTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AlignTag.html",
    "title": "Class AlignTag | RueI",
    "keywords": "Provides a way to handle align tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AllcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AllcapsTag.html",
    "title": "Class AllcapsTag | RueI",
    "keywords": "Provides a way to handle allcaps tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.AlphaTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.AlphaTag.html",
    "title": "Class AlphaTag | RueI",
    "keywords": "Provides a way to handle alpha tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.BoldTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.BoldTag.html",
    "title": "Class BoldTag | RueI",
    "keywords": "Provides a way to handle bold tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.BrTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.BrTag.html",
    "title": "Class BrTag | RueI",
    "keywords": "Provides a way to handle br tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CSpaceTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CSpaceTag.html",
    "title": "Class CSpaceTag | RueI",
    "keywords": "Provides a way to handle cspace tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAlignTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAlignTag.html",
    "title": "Class CloseAlignTag | RueI",
    "keywords": "Provides a way to handle closing align tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAllcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAllcapsTag.html",
    "title": "Class CloseAllcapsTag | RueI",
    "keywords": "Provides a way to handle closing allcaps tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseAlphaTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseAlphaTag.html",
    "title": "Class CloseAlphaTag | RueI",
    "keywords": "Provides a way to handle closing alpha tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseBoldTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseBoldTag.html",
    "title": "Class CloseBoldTag | RueI",
    "keywords": "Provides a way to handle closing bold tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseCSpaceTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseCSpaceTag.html",
    "title": "Class CloseCSpaceTag | RueI",
    "keywords": "Provides a way to handle closing cspace tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseColorTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseColorTag.html",
    "title": "Class CloseColorTag | RueI",
    "keywords": "Provides a way to handle closing color tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseIndentTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseIndentTag.html",
    "title": "Class CloseIndentTag | RueI",
    "keywords": "Provides a way to handle closing indent tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseItalicsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseItalicsTag.html",
    "title": "Class CloseItalicsTag | RueI",
    "keywords": "Provides a way to handle closing italics tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLineHeightTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLineHeightTag.html",
    "title": "Class CloseLineHeightTag | RueI",
    "keywords": "Provides a way to handle closing line-height tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLineIndentTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLineIndentTag.html",
    "title": "Class CloseLineIndentTag | RueI",
    "keywords": "Provides a way to handle closing line indent tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseLowercase.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseLowercase.html",
    "title": "Class CloseLowercase | RueI",
    "keywords": "Provides a way to handle closing lowercase tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseMarginTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseMarginTag.html",
    "title": "Class CloseMarginTag | RueI",
    "keywords": "Provides a way to handle closing indent tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseMarkTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseMarkTag.html",
    "title": "Class CloseMarkTag | RueI",
    "keywords": "Provides a way to handle closing mark tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseNobrTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseNobrTag.html",
    "title": "Class CloseNobrTag | RueI",
    "keywords": "Provides a way to handle closing nobr tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseNoparseTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseNoparseTag.html",
    "title": "Class CloseNoparseTag | RueI",
    "keywords": "Provides a way to handle closing noparse tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseRotateTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseRotateTag.html",
    "title": "Class CloseRotateTag | RueI",
    "keywords": "Provides a way to handle closing rotate tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseScaleTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseScaleTag.html",
    "title": "Class CloseScaleTag | RueI",
    "keywords": "Provides a way to handle closing scale tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSizeTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSizeTag.html",
    "title": "Class CloseSizeTag | RueI",
    "keywords": "Provides a way to handle closing size tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSmallcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSmallcapsTag.html",
    "title": "Class CloseSmallcapsTag | RueI",
    "keywords": "Provides a way to handle closing smallcaps tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseStrikethroughTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseStrikethroughTag.html",
    "title": "Class CloseStrikethroughTag | RueI",
    "keywords": "Provides a way to handle closing strikethrough tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSubscriptTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSubscriptTag.html",
    "title": "Class CloseSubscriptTag | RueI",
    "keywords": "Provides a way to handle closing subscript tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseSuperscriptTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseSuperscriptTag.html",
    "title": "Class CloseSuperscriptTag | RueI",
    "keywords": "Provides a way to handle closing superscript tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseUnderlineTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseUnderlineTag.html",
    "title": "Class CloseUnderlineTag | RueI",
    "keywords": "Provides a way to handle closing underline tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.CloseVOffsetTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.CloseVOffsetTag.html",
    "title": "Class CloseVOffsetTag | RueI",
    "keywords": "Provides a way to handle closing voffset tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ColorTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ColorTag.html",
    "title": "Class ColorTag | RueI",
    "keywords": "Provides a way to handle color tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.IndentTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.IndentTag.html",
    "title": "Class IndentTag | RueI",
    "keywords": "Provides a way to handle indent tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ItalicsAngleTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ItalicsAngleTag.html",
    "title": "Class ItalicsAngleTag | RueI",
    "keywords": "Provides a way to handle italic angles tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ItalicsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ItalicsTag.html",
    "title": "Class ItalicsTag | RueI",
    "keywords": "Provides a way to handle italics tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LineHeightTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LineHeightTag.html",
    "title": "Class LineHeightTag | RueI",
    "keywords": "Provides a way to handle line-height tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LineIndentTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LineIndentTag.html",
    "title": "Class LineIndentTag | RueI",
    "keywords": "Provides a way to handle line indent tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.LowercaseTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.LowercaseTag.html",
    "title": "Class LowercaseTag | RueI",
    "keywords": "Provides a way to handle lowercase tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.MarginLeft.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.MarginLeft.html",
    "title": "Class MarginLeft | RueI",
    "keywords": "Provides a way to handle margin tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.MarginRight.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.MarginRight.html",
    "title": "Class MarginRight | RueI",
    "keywords": "Provides a way to handle margin tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.MarginTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.MarginTag.html",
    "title": "Class MarginTag | RueI",
    "keywords": "Provides a way to handle margin tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.MarkTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.MarkTag.html",
    "title": "Class MarkTag | RueI",
    "keywords": "Provides a way to handle mark tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.NobrTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.NobrTag.html",
    "title": "Class NobrTag | RueI",
    "keywords": "Provides a way to handle nobr tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.NoparseTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.NoparseTag.html",
    "title": "Class NoparseTag | RueI",
    "keywords": "Provides a way to handle noparse tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.PageTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.PageTag.html",
    "title": "Class PageTag | RueI",
    "keywords": "Provides a way to handle page tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.PosTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.PosTag.html",
    "title": "Class PosTag | RueI",
    "keywords": "Provides a way to handle pos tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.RotateTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.RotateTag.html",
    "title": "Class RotateTag | RueI",
    "keywords": "Provides a way to handle rotate tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.ScaleTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.ScaleTag.html",
    "title": "Class ScaleTag | RueI",
    "keywords": "Provides a way to handle scale tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SizeTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SizeTag.html",
    "title": "Class SizeTag | RueI",
    "keywords": "Provides a way to handle size tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SmallcapsTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SmallcapsTag.html",
    "title": "Class SmallcapsTag | RueI",
    "keywords": "Provides a way to handle smallcaps tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SpaceTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SpaceTag.html",
    "title": "Class SpaceTag | RueI",
    "keywords": "Provides a way to handle space tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.StrikethroughTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.StrikethroughTag.html",
    "title": "Class StrikethroughTag | RueI",
    "keywords": "Provides a way to handle strikethrough tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SubscriptTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SubscriptTag.html",
    "title": "Class SubscriptTag | RueI",
    "keywords": "Provides a way to handle subscript tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.SuperscriptTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.SuperscriptTag.html",
    "title": "Class SuperscriptTag | RueI",
    "keywords": "Provides a way to handle superscript tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.UnderlineTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.UnderlineTag.html",
    "title": "Class UnderlineTag | RueI",
    "keywords": "Provides a way to handle underline tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.VOffsetTag.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.VOffsetTag.html",
    "title": "Class VOffsetTag | RueI",
    "keywords": "Provides a way to handle voffset tags.\n"
  },
  "api/RueI.Parsing.Tags.ConcreteTags.html": {
    "href": "api/RueI.Parsing.Tags.ConcreteTags.html",
    "title": "Namespace RueI.Parsing.Tags.ConcreteTags | RueI",
    "keywords": "Namespace RueI.Parsing.Tags.ConcreteTags Classes AlignTag Provides a way to handle align tags. AllcapsTag Provides a way to handle allcaps tags. AlphaTag Provides a way to handle alpha tags. BoldTag Provides a way to handle bold tags. BrTag Provides a way to handle br tags. CSpaceTag Provides a way to handle cspace tags. CloseAlignTag Provides a way to handle closing align tags. CloseAllcapsTag Provides a way to handle closing allcaps tags. CloseAlphaTag Provides a way to handle closing alpha tags. CloseBoldTag Provides a way to handle closing bold tags. CloseCSpaceTag Provides a way to handle closing cspace tags. CloseColorTag Provides a way to handle closing color tags. CloseIndentTag Provides a way to handle closing indent tags. CloseItalicsTag Provides a way to handle closing italics tags. CloseLineHeightTag Provides a way to handle closing line-height tags. CloseLineIndentTag Provides a way to handle closing line indent tags. CloseLowercase Provides a way to handle closing lowercase tags. CloseMarginTag Provides a way to handle closing indent tags. CloseMarkTag Provides a way to handle closing mark tags. CloseNobrTag Provides a way to handle closing nobr tags. CloseNoparseTag Provides a way to handle closing noparse tags. CloseRotateTag Provides a way to handle closing rotate tags. CloseScaleTag Provides a way to handle closing scale tags. CloseSizeTag Provides a way to handle closing size tags. CloseSmallcapsTag Provides a way to handle closing smallcaps tags. CloseStrikethroughTag Provides a way to handle closing strikethrough tags. CloseSubscriptTag Provides a way to handle closing subscript tags. CloseSuperscriptTag Provides a way to handle closing superscript tags. CloseUnderlineTag Provides a way to handle closing underline tags. CloseVOffsetTag Provides a way to handle closing voffset tags. ColorTag Provides a way to handle color tags. IndentTag Provides a way to handle indent tags. ItalicsAngleTag Provides a way to handle italic angles tags. ItalicsTag Provides a way to handle italics tags. LineHeightTag Provides a way to handle line-height tags. LineIndentTag Provides a way to handle line indent tags. LowercaseTag Provides a way to handle lowercase tags. MarginLeft Provides a way to handle margin tags. MarginRight Provides a way to handle margin tags. MarginTag Provides a way to handle margin tags. MarkTag Provides a way to handle mark tags. NobrTag Provides a way to handle nobr tags. NoparseTag Provides a way to handle noparse tags. PageTag Provides a way to handle page tags. PosTag Provides a way to handle pos tags. RotateTag Provides a way to handle rotate tags. ScaleTag Provides a way to handle scale tags. SizeTag Provides a way to handle size tags. SmallcapsTag Provides a way to handle smallcaps tags. SpaceTag Provides a way to handle space tags. StrikethroughTag Provides a way to handle strikethrough tags. SubscriptTag Provides a way to handle subscript tags. SuperscriptTag Provides a way to handle superscript tags. UnderlineTag Provides a way to handle underline tags. VOffsetTag Provides a way to handle voffset tags."
  },
  "api/RueI.Parsing.Tags.MeasurementTag.html": {
    "href": "api/RueI.Parsing.Tags.MeasurementTag.html",
    "title": "Class MeasurementTag | RueI",
    "keywords": "Defines a RichTextTag that only takes in a measurement.\n"
  },
  "api/RueI.Parsing.Tags.RichTextTagAttribute.html": {
    "href": "api/RueI.Parsing.Tags.RichTextTagAttribute.html",
    "title": "Class RichTextTagAttribute | RueI",
    "keywords": "Defines a RichTextTag for RueI.\n"
  },
  "api/RueI.Parsing.Tags.SharedTag-1.html": {
    "href": "api/RueI.Parsing.Tags.SharedTag-1.html",
    "title": "Class SharedTag\u003CT\u003E | RueI",
    "keywords": "Provides a way to handle singletons of tags.\n"
  },
  "api/RueI.Parsing.Tags.TagHelpers.html": {
    "href": "api/RueI.Parsing.Tags.TagHelpers.html",
    "title": "Class TagHelpers | RueI",
    "keywords": "Provides a number of helper functions for RichTextTags.\n"
  },
  "api/RueI.Parsing.Tags.html": {
    "href": "api/RueI.Parsing.Tags.html",
    "title": "Namespace RueI.Parsing.Tags | RueI",
    "keywords": "Namespace RueI.Parsing.Tags Classes MeasurementTag Defines a RichTextTag that only takes in a measurement. RichTextTagAttribute Defines a RichTextTag for RueI. SharedTag\u003CT\u003E Provides a way to handle singletons of tags. TagHelpers Provides a number of helper functions for RichTextTags."
  },
  "api/RueI.Parsing.TextInfo.html": {
    "href": "api/RueI.Parsing.TextInfo.html",
    "title": "Class TextInfo | RueI",
    "keywords": "Provides information about TMP text at a certain point.\n"
  },
  "api/RueI.Parsing.html": {
    "href": "api/RueI.Parsing.html",
    "title": "Namespace RueI.Parsing | RueI",
    "keywords": "Namespace RueI.Parsing The RueI.Parsing namespace contains a large number of classes mostly used internally by RueI. Notably, classes within this namespace can be used to create custom tags. Additionally, if you want to calculate and parse hints, you can use this namespace. Classes CharacterLengths Provides lengths for characters in hints. ClosingTag\u003CT\u003E Defines the base class for all rich text tags. NoParamsTag Defines a RichTextTag that does not take in parameters. Parser Helps parse the content of elements. This class cannot be inherited. ParserBuilder Builds Parsers. ParserContext Describes the state of a parser at a time. RichTextTag Defines the base class for all rich text tags. TextInfo Provides information about TMP text at a certain point."
  },
  "api/RueI.Patches.HintPatch.html": {
    "href": "api/RueI.Patches.HintPatch.html",
    "title": "Class HintPatch | RueI",
    "keywords": "Patches HintDisplay.Show to detect when hints are shown.\n"
  },
  "api/RueI.Patches.PatchHelper.html": {
    "href": "api/RueI.Patches.PatchHelper.html",
    "title": "Class PatchHelper | RueI",
    "keywords": "Provides helpful functions for working with patches.\n"
  },
  "api/RueI.Patches.html": {
    "href": "api/RueI.Patches.html",
    "title": "Namespace RueI.Patches | RueI",
    "keywords": "Namespace RueI.Patches Classes HintPatch Patches HintDisplay.Show to detect when hints are shown. PatchHelper Provides helpful functions for working with patches."
  },
  "api/RueI.RueIMain.html": {
    "href": "api/RueI.RueIMain.html",
    "title": "Class RueIMain | RueI",
    "keywords": "Represents the main class for RueI.\n"
  },
  "api/RueI.Ruetility.html": {
    "href": "api/RueI.Ruetility.html",
    "title": "Class Ruetility | RueI",
    "keywords": "Provides helpful functions for dealing with elements and hints.\n"
  },
  "api/RueI.UnityAlternative.IAsyncOperation.html": {
    "href": "api/RueI.UnityAlternative.IAsyncOperation.html",
    "title": "Interface UnityAlternative.IAsyncOperation | RueI",
    "keywords": "Represents a generalized handler for an async operation.\n"
  },
  "api/RueI.UnityAlternative.html": {
    "href": "api/RueI.UnityAlternative.html",
    "title": "Class UnityAlternative | RueI",
    "keywords": "Defines the base class for a provider of methods that may or may not use Unity.\n"
  },
  "api/RueI.UnityProvider.MECAsyncOperation.html": {
    "href": "api/RueI.UnityProvider.MECAsyncOperation.html",
    "title": "Class UnityProvider.MECAsyncOperation | RueI",
    "keywords": "Represents an async operation using a Task.\n"
  },
  "api/RueI.UnityProvider.html": {
    "href": "api/RueI.UnityProvider.html",
    "title": "Class UnityProvider | RueI",
    "keywords": "Provides Unity methods for the application.\n"
  },
  "api/RueI.html": {
    "href": "api/RueI.html",
    "title": "Namespace RueI | RueI",
    "keywords": "Namespace RueI The RueI namespace contains classes shared across all of RueI. Generally, you shouldn\u0027t need to use the classes and interfaces within this namespace. The exception is the RueIMain class that contains the EnsureInit() method, which should be called by any plugin using RueI upon being loaded. Classes Constants Provides a variety of constant values. NonUnityProvider Provides non-Unity alternatives for the UnityProvider of the application. NonUnityProvider.TaskAsyncOperation Represents an async operation using a Task. RueIMain Represents the main class for RueI. Ruetility Provides helpful functions for dealing with elements and hints. UnityAlternative Defines the base class for a provider of methods that may or may not use Unity. UnityProvider Provides Unity methods for the application. UnityProvider.MECAsyncOperation Represents an async operation using a Task. Interfaces UnityAlternative.IAsyncOperation Represents a generalized handler for an async operation."
  },
  "api/eMEC.Cooldown.html": {
    "href": "api/eMEC.Cooldown.html",
    "title": "Class Cooldown | RueI",
    "keywords": "Provides a way to implement a cooldown easily.\n"
  },
  "api/eMEC.ITaskable.html": {
    "href": "api/eMEC.ITaskable.html",
    "title": "Interface ITaskable | RueI",
    "keywords": "Represents anything that deals with Tasks.\n"
  },
  "api/eMEC.TaskBase.html": {
    "href": "api/eMEC.TaskBase.html",
    "title": "Class TaskBase | RueI",
    "keywords": "Provides the base class for all tasks.\n"
  },
  "api/eMEC.TaskPool.html": {
    "href": "api/eMEC.TaskPool.html",
    "title": "Class TaskPool | RueI",
    "keywords": "Manages a number of ITaskables and tasks.\n"
  },
  "api/eMEC.UpdateTask.html": {
    "href": "api/eMEC.UpdateTask.html",
    "title": "Class UpdateTask | RueI",
    "keywords": "Represents a task that runs a method when finished.\n"
  },
  "api/eMEC.html": {
    "href": "api/eMEC.html",
    "title": "Namespace eMEC | RueI",
    "keywords": "Namespace eMEC Classes Cooldown Provides a way to implement a cooldown easily. TaskBase Provides the base class for all tasks. TaskPool Manages a number of ITaskables and tasks. UpdateTask Represents a task that runs a method when finished. Interfaces ITaskable Represents anything that deals with Tasks."
  },
  "index.html": {
    "href": "index.html",
    "title": "RueI | RueI",
    "keywords": "RueI RueI is a hint framework for scp:sl. it provides the ability to show multiple hints at once, along with a lot of other features for server owners installing RueI is easy. download the dll, and move it into your dependencies folder for the plugin framework you are using. note that RueI requires Harmony 2.2.2, you can get that here."
  },
  "markdown/basic-concepts.html": {
    "href": "markdown/basic-concepts.html",
    "title": "Basic Concepts | RueI",
    "keywords": "Basic Concepts this serves as a basic introduction to RueI concepts and functionality. the most basic components of RueI are Elements, which act like individual hints with their own content. elements are contained within DisplayBases. elements are not tied to a player (so you can have an instance of an element in multiple displays at once), but displays are. finally, every ReferenceHub (player) in RueI has an associated DisplayCore, which manages all of the displays for a player and combines the elements in them to one hint. every DisplayCore also has a Scheduler, enabling synchronized delayed updates. there are two element types that RueI provides out of the box: SetElement: a very simple element with settable content DynamicElement: an element that, when the display is updated/refreshed, gets its content by calling a function. every time you update something in RueI, such as the content of an element, you must update the DisplayCore by calling DisplayCore.Update(). you can get the DisplayCore for a player by calling DisplayCore.Get(ReferenceHub). while it\u0027s easy to forget to do this, this is unfortunately necessary."
  },
  "markdown/customtags.html": {
    "href": "markdown/customtags.html",
    "title": "Creating Custom Tags | RueI",
    "keywords": "Creating Custom Tags RueI supports creating custom rich text tags. all rich text tags should ultimately derive from RichTextTag. if you need certain parameter types, there are a few abstract subclasses that automatically parse their parameters. for measurement tags (e.g \u003Cline-height=5em\u003E) use"
  },
  "markdown/eMec.html": {
    "href": "markdown/eMec.html",
    "title": "eMEC | RueI",
    "keywords": "eMEC eMEC is a wrapper for MEC that is used by RueI. it is absolutely not necessary to use it in your own plugins, but it does provide some utility. eMEC provides a few notable advantages over the usual MEC. firstly, it is much higher level - you do not directly manipulate CoroutineHandles directly. instead, you use TaskBases (not to be confused with .NET Tasks). secondly, if RueI detects that it is not running in Unity, it will automatically swap over to using .NET tasks, which means that you can do unit tests on things that use TaskBases but also use them normally in scp:sl."
  },
  "markdown/getting-started.html": {
    "href": "markdown/getting-started.html",
    "title": "Getting Started | RueI",
    "keywords": "Getting Started this guide assumes that you have a basic level of knowledge with c#. there are three main ways of using RueI: as a \u0027hard\u0027 dependency, as a \u0027soft\u0027 dependency, or through reflection. with a hard dependency, you directly reference RueI and use it in place of hints. the advantages of this are that it gives you type safety, it is significantly faster, and it is just overall much easier to use. however, if someone does not have RueI installed, then your plugin will stop working. this makes it ideal for plugins that rely on RueI heavily, or if you\u0027re creating a plugin for your own use. a soft dependency still means that you reference RueI, but you also provide alternatives using normal hints and switch to those alternatives if RueI isn\u0027t detected, ideally using a dependency injection model. this requires you to carefully avoid type load exceptions, but doesn\u0027t have penalties to speed or type safety. using reflection, you can dynamically add support for RueI, meaning that you don\u0027t have it reference it at all. reflection, however, is slow and does not provide any of the compile-time guarantees of the first two options, making it much harder to work with. the way that you should use RueI depends on who your plugin is for and what it\u0027s doing. if you\u0027re making a private plugin or want to make use of all of the features of RueI, then you should make it a hard dependency. if your plugin is small and/or extensively uses hints, you should use it as a soft dependency. finally, if your plugin only uses hints occassionally, reflection is the best choice. this guide will cover how to use RueI using the first option, as a normal hard dependency. installing RueI"
  },
  "markdown/hintbuilding.html": {
    "href": "markdown/hintbuilding.html",
    "title": "HintBuilding Extensions | RueI",
    "keywords": "HintBuilding Extensions RueI provides extensions to StringBuilder through the HintBuilding class. this provides a large number of methods on StringBuilder to make adding tags easier and less error-prone. to use this, you first bring the class into scope: using RueI.Extensions.HintBuilding; then, you can use it like so: StringBuilder sb = new() .SetColor(255, 0, 0) .SetSize(1.5, MeasurementStyle.Ems) .Append(\u0022hello!\u0022) .CloseColor() .CloseSize(); since all of the methods return the original StringBuilder, you can chain them easily."
  },
  "markdown/introduction.html": {
    "href": "markdown/introduction.html",
    "title": "Introduction | RueI",
    "keywords": "Introduction RueI is a hint framework for scp:sl. the primary component of RueI is the ability to display multiple hints at once, but it also provides a lot of other features to make working with hints easier and more effective. a quick note: RueI is licensed under CC0 1.0. this means you can do whatever you want with both its compiled versions and its source code. commerical use, modifications, etc, are all okay! :) RueI is a dependency. it is a not a plugin. this means that it does not provide any functionality out of the box. other plugins will not work automatically once you install this if they do not have built-in support for RueI."
  },
  "markdown/scheduling.html": {
    "href": "markdown/scheduling.html",
    "title": "Using the Scheduler | RueI",
    "keywords": "Using the Scheduler RueI comes with the Scheduler, and every display has one of them. the main purpose of the Scheduler is to provide an easy way to update the display at a certain time, and to provide a way to batch updates together to prevent getting ratelimited. normally, the hints system comes with a 0.5 second ratelimit. if you send a hint (which updating the display does), you cannot send another one for 0.5 seconds*. this can easily create problems. for example, what if you update the display in 0.3 seconds and 0.5 seconds? normally, the first update would show, but then the second update would not show up until in 0.8 seconds. this might not seem like the biggest problem, but it can make things look weird because of the delay. instead, what RueI will do is batch those two operations together, averaging the times. so, in that example, it will update the display in 0.4 seconds (assuming they both have the same priority). How to do it scheduling a job is pretty easy. first, you have to get the DisplayCore of a player, and then access the DisplayCore.Scheduler property. then you can use the Scheduler.Schedule method to schedule jobs. here\u0027s an example: // assuming hub is previously defined as a ReferenceHub SetElement element = new(300, \u0022Hello!!\u0022); DisplayCore core = DisplayCore.Get(hub); Display display = new(core); core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () =\u003E display.Elements.Add(element)); notice how you do not have to explicitly call display.Update() or core.Update(). this is because, once RueI performs a batch job, it automatically updates the display. updating the display in a batch job doesn\u0027t do anything as the DisplayCore ignores all update requests when it is performing a batch job. so, this does nothing: core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () =\u003E core.Update()); Canceling a job often, you\u0027re going to want to cancel a job that is ongoing. however, RueI does not return a reference to a job that you can then use to cancel it. instead, you use a JobToken. you can then pass a JobToken in the Scheduler.Schedule() method. the benefit of this is that since you can declare a static JobToken singleton, you can ensure that there is only ever one instance of a certain job. here\u0027s an example: public static JobToken HelloToken { get; } = new(); public void UpdateDisplay(ReferenceHub hub) { SetElement element = new(300, \u0022Hello!!\u0022); DisplayCore core = DisplayCore.Get(hub); Display display = new(core); core.Scheduler.KillJob(HelloToken); core.Scheduler.Schedule(TimeSpan.FromSeconds(5), () =\u003E display.Elements.Add(element)); } with this, you won\u0027t ever have to worry about having multiple instances of the same job. * it is more complicated than this, technically. however, RueI enforces a 0.525 second ratelimit, so you won\u0027t notice it."
  }
}
